Replaying proof: 0.007704
Replaying proof: 0.023744

sort2_perm
Statistics
  infstep : 391
  nodes   : 127
  maxdepth: 6
Time: 10.029138
  inferstep time: 8.388777
  node_find time: 0.030698
  node_crea time: 1.542457
    pred time: 0.476535
    thmpred time: 0.000031
    mc time: 0.626576
    inst time: 0.0
Proof status: Time Out
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.007087

sort3_perm
proof length: 2
proof time: 0.008975
Statistics
  infstep : 55
  nodes   : 21
  maxdepth: 3
Time: 1.626327
  inferstep time: 1.329218
  node_find time: 0.001975
  node_crea time: 0.276871
    pred time: 0.112988
    thmpred time: 0.000004
    mc time: 0.113028
    inst time: 0.0
Proof found: boolLib.REWRITE_TAC [DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "mergesortN_def", DB.fetch "mergesort" "sort3_tail_def", quantHeuristicsTheory.LIST_LENGTH_3, quantHeuristicsTheory.LIST_LENGTH_4, DB.fetch "mergesort" "sort2_perm", DB.fetch "mergesort" "mergesortN_ind", DB.fetch "mergesort" "mergesortN_tail_def", DB.fetch "mergesort" "mergesortN_tail_ind", DB.fetch "mergesort" "sort2_def", DB.fetch "mergesort" "sort2_tail_def", quantHeuristicsTheory.LIST_LENGTH_2, sortingTheory.PERM_SING, listTheory.FRONT_CONS, listTheory.LAST_CONS, sortingTheory.PERM_TRANS] THEN BasicProvers.srw_tac [permLib.PERM_ss] [(DB.fetch "mergesort" "sort2_def")]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.011667

merge_perm
Statistics
  infstep : 668
  nodes   : 122
  maxdepth: 6
Time: 10.016059
  inferstep time: 8.409166
  node_find time: 0.053044
  node_crea time: 1.472227
    pred time: 0.460604
    thmpred time: 0.000034
    mc time: 0.620255
    inst time: 0.0
Proof status: Time Out
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.083436

mergesortN_perm
Statistics
  infstep : 866
  nodes   : 156
  maxdepth: 5
Time: 10.012243
  inferstep time: 7.951038
  node_find time: 0.079991
  node_crea time: 1.74657
    pred time: 0.477378
    thmpred time: 0.000028
    mc time: 0.960971
    inst time: 0.0
Proof status: Time Out
Org tac number: 15
Original proof time: 0.0
Replaying proof: 0.661964

mergesort_perm
Statistics
  infstep : 484
  nodes   : 130
  maxdepth: 6
Time: 10.000086
  inferstep time: 8.105066
  node_find time: 0.053293
  node_crea time: 1.703681
    pred time: 0.528743
    thmpred time: 0.000026
    mc time: 0.813962
    inst time: 0.0
Proof status: Time Out
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.037684

sort2_sorted
proof length: 4
proof time: 0.078669
Statistics
  infstep : 105
  nodes   : 19
  maxdepth: 3
Time: 2.148916
  inferstep time: 1.804156
  node_find time: 0.00621
  node_crea time: 0.276203
    pred time: 0.095337
    thmpred time: 0.000008
    mc time: 0.148106
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "mergesort" "mergesortN_def", DB.fetch "mergesort" "sort2_def", DB.fetch "mergesort" "sort2_perm", DB.fetch "mergesort" "tactictoe_thm_1", sortingTheory.QSORT3_SORTED, sortingTheory.QSORT_SORTED, sortingTheory.tactictoe_thm_55, relationTheory.total_def, sortingTheory.QSORT3_SPLIT, sortingTheory.QSORT3_SORTS, sortingTheory.QSORT3_STABLE, sortingTheory.QSORT_SORTS, sortingTheory.QSORT_eq_if_PERM, relationTheory.total_inv_image, pairTheory.total_LEX, listTheory.LLEX_total] THENL [bossLib.FULL_SIMP_TAC bossLib.list_ss [(DB.fetch "sorting" "tactictoe_thm_37")], bossLib.FULL_SIMP_TAC bossLib.list_ss [(DB.fetch "sorting" "tactictoe_thm_37")] THEN
  metisTools.METIS_TAC [relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, pred_setTheory.tactictoe_thm_21, relationTheory.WF_INDUCTION_THM, DB.fetch "mergesort" "sort2_def", relationTheory.transitive_def, relationTheory.total_def, sortingTheory.SORTED_EQ]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.04483

sort3_sorted
proof length: 12
proof time: 0.101559
Statistics
  infstep : 94
  nodes   : 21
  maxdepth: 3
Time: 2.310434
  inferstep time: 1.761728
  node_find time: 0.005823
  node_crea time: 0.42781
    pred time: 0.145309
    thmpred time: 0.000008
    mc time: 0.209962
    inst time: 0.0
Proof found: BasicProvers.srw_tac [permLib.PERM_ss] [(DB.fetch "mergesort" "sort3_def")] THENL [bossLib.FULL_SIMP_TAC bossLib.list_ss [(DB.fetch "sorting" "tactictoe_thm_37")], bossLib.FULL_SIMP_TAC bossLib.list_ss [(DB.fetch "sorting" "tactictoe_thm_37")] THEN
  BasicProvers.PROVE_TAC [relationTheory.total_def, relationTheory.transitive_def], bossLib.FULL_SIMP_TAC bossLib.list_ss [(DB.fetch "sorting" "tactictoe_thm_37")] THEN
  BasicProvers.PROVE_TAC [relationTheory.total_def, relationTheory.transitive_def], bossLib.FULL_SIMP_TAC bossLib.list_ss [(DB.fetch "sorting" "tactictoe_thm_37")] THEN
  metisTools.METIS_TAC [relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, relationTheory.WF_INDUCTION_THM, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort2_def", relationTheory.total_def, sortingTheory.SORTED_DEF, relationTheory.transitive_def], bossLib.FULL_SIMP_TAC bossLib.list_ss [(DB.fetch "sorting" "tactictoe_thm_37")] THEN
  BasicProvers.PROVE_TAC [relationTheory.total_def, relationTheory.transitive_def], bossLib.FULL_SIMP_TAC bossLib.list_ss [(DB.fetch "sorting" "tactictoe_thm_37")] THEN
  BasicProvers.PROVE_TAC [relationTheory.total_def, relationTheory.transitive_def]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.06543

merge_sorted
Statistics
  infstep : 612
  nodes   : 114
  maxdepth: 6
Time: 10.009255
  inferstep time: 7.128679
  node_find time: 0.064251
  node_crea time: 2.567545
    pred time: 0.551394
    thmpred time: 0.000043
    mc time: 0.85018
    inst time: 0.0
Proof status: Time Out
Org tac number: 13
Original proof time: 0.0
Replaying proof: 0.772127

mergesortN_sorted
Statistics
  infstep : 334
  nodes   : 78
  maxdepth: 5
Time: 10.036585
  inferstep time: 7.942951
  node_find time: 0.03339
  node_crea time: 1.835882
    pred time: 0.610554
    thmpred time: 0.000026
    mc time: 0.683409
    inst time: 0.0
Proof status: Time Out
Org tac number: 17
Original proof time: 0.0
Replaying proof: 0.666448

mergesort_sorted
proof length: 1
proof time: 0.051508
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.061203
  inferstep time: 0.032406
  node_find time: 0.000061
  node_crea time: 0.020337
    pred time: 0.003992
    thmpred time: 0.0
    mc time: 0.021731
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "mergesort" "mergesort_def" , DB.fetch "mergesort" "mergesort_perm" , DB.fetch "mergesort" "mergesortN_sorted" , DB.fetch "mergesort" "merge_sorted" , sortingTheory.QSORT3_SORTED , sortingTheory.QSORT_SORTED , DB.fetch "mergesort" "sort2_sorted" , DB.fetch "mergesort" "sort3_sorted" , sortingTheory.QSORT3_SPLIT , sortingTheory.tactictoe_thm_55 , sortingTheory.QSORT3_SORTS , sortingTheory.QSORT3_STABLE , sortingTheory.QSORT_SORTS , sortingTheory.QSORT_eq_if_PERM , relationTheory.total_inv_image , relationTheory.total_def])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.016395

stable_cong
proof length: 2
proof time: 0.005657
Statistics
  infstep : 72
  nodes   : 11
  maxdepth: 2
Time: 1.288281
  inferstep time: 1.095099
  node_find time: 0.005275
  node_crea time: 0.16166
    pred time: 0.055652
    thmpred time: 0.000001
    mc time: 0.069616
    inst time: 0.0
Proof found: boolLib.REWRITE_TAC [DB.fetch "mergesort" "stable_def", rich_listTheory.EVERY2_APPEND_suff, rich_listTheory.EVERY2_APPEND, listTheory.FILTER_EQ_APPEND, sortingTheory.PERM_FUN_APPEND_APPEND_1, sortingTheory.PERM_FUN_APPEND_APPEND_2, listTheory.APPEND_11, sortingTheory.PERM_FUN_CONS_11_APPEND, listTheory.APPEND_ASSOC, rich_listTheory.APPEND_ASSOC_CONS, sortingTheory.tactictoe_thm_15, listTheory.LIST_REL_trans, sortingTheory.PERM_IND, sortingTheory.PERM_STRONG_IND, sortingTheory.tactictoe_thm_10, sortingTheory.tactictoe_thm_12] THEN boolLib.EVERY [bossLib.SIMP_TAC bossLib.list_ss [boolLib.GSYM (DB.fetch "sorting" "PERM_EQUIVALENCE_ALT_DEF"), (DB.fetch "sorting" "PERM_alt"), listTheory.FILTER_APPEND_DISTRIB], boolLib.REPEAT boolLib.STRIP_TAC, boolLib.COND_CASES_TAC, bossLib.ASM_SIMP_TAC bossLib.list_ss []]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.009765

stable_trans
proof length: 1
proof time: 0.005417
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.149335
  inferstep time: 0.131332
  node_find time: 0.000137
  node_crea time: 0.013859
    pred time: 0.004998
    thmpred time: 0.000001
    mc time: 0.009638
    inst time: 0.0
Proof found: (BasicProvers.srw_tac [ ] [ ( DB.fetch "mergesort" "stable_def" ) , rich_listTheory.FILTER_APPEND ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.01045

sort2_stable
proof length: 4
proof time: 0.10709
Statistics
  infstep : 36
  nodes   : 12
  maxdepth: 3
Time: 1.455802
  inferstep time: 1.23721
  node_find time: 0.002836
  node_crea time: 0.176402
    pred time: 0.073497
    thmpred time: 0.000006
    mc time: 0.081834
    inst time: 0.0
Proof found: BasicProvers.srw_tac [permLib.PERM_ss] [(DB.fetch "mergesort" "sort2_def")] THENL [BasicProvers.srw_tac [] [(DB.fetch "mergesort" "stable_def"), rich_listTheory.FILTER_APPEND], BasicProvers.srw_tac [] [(DB.fetch "mergesort" "stable_def"), rich_listTheory.FILTER_APPEND] THEN
  metisTools.METIS_TAC [sortingTheory.tactictoe_thm_17, sortingTheory.tactictoe_thm_10, sortingTheory.tactictoe_thm_14, sortingTheory.tactictoe_thm_16, sortingTheory.tactictoe_thm_18, sortingTheory.tactictoe_thm_5, sortingTheory.tactictoe_thm_6, sortingTheory.tactictoe_thm_7, sortingTheory.tactictoe_thm_8, sortingTheory.tactictoe_thm_9, rich_listTheory.SPLITP_AUX_def, rich_listTheory.FILTER_FOLDR, rich_listTheory.PREFIX, rich_listTheory.PREFIX_FOLDR, rich_listTheory.SPLITP, listTheory.FILTER]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.114069

sort3_stable
Statistics
  infstep : 308
  nodes   : 71
  maxdepth: 4
Time: 10.023942
  inferstep time: 7.565286
  node_find time: 0.030609
  node_crea time: 2.198496
    pred time: 0.639762
    thmpred time: 0.000028
    mc time: 0.576466
    inst time: 0.0
Proof status: Time Out
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.6913

filter_merge
Statistics
  infstep : 822
  nodes   : 106
  maxdepth: 5
Time: 10.007101
  inferstep time: 7.716477
  node_find time: 0.097235
  node_crea time: 1.945849
    pred time: 0.462172
    thmpred time: 0.000023
    mc time: 0.793464
    inst time: 0.0
Proof status: Time Out
Org tac number: 12
Original proof time: 0.0
Replaying proof: 0.611691

merge_stable
proof length: 1
proof time: 0.005241
Statistics
  infstep : 162
  nodes   : 37
  maxdepth: 4
Time: 3.881786
  inferstep time: 3.135473
  node_find time: 0.015257
  node_crea time: 0.642253
    pred time: 0.179886
    thmpred time: 0.000011
    mc time: 0.289843
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "mergesort" "stable_cong" , DB.fetch "mergesort" "filter_merge" , DB.fetch "mergesort" "merge_sorted" , DB.fetch "mergesort" "merge_perm" , DB.fetch "mergesort" "sort3_stable" , DB.fetch "mergesort" "stable_def" , DB.fetch "mergesort" "stable_trans" , DB.fetch "mergesort" "sort2_stable" , DB.fetch "mergesort" "tactictoe_thm_4" , DB.fetch "mergesort" "tactictoe_thm_2" , DB.fetch "mergesort" "tactictoe_thm_0" , DB.fetch "mergesort" "merge_def" , DB.fetch "mergesort" "tactictoe_thm_5" , DB.fetch "mergesort" "mergesortN_def" , DB.fetch "mergesort" "tactictoe_thm_1" , DB.fetch "mergesort" "tactictoe_thm_3" ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.007259

mergesortN_stable
Statistics
  infstep : 336
  nodes   : 85
  maxdepth: 6
Time: 10.009962
  inferstep time: 7.39314
  node_find time: 0.043513
  node_crea time: 2.413438
    pred time: 0.722834
    thmpred time: 0.000021
    mc time: 0.738319
    inst time: 0.0
Proof status: Time Out
Org tac number: 24
Original proof time: 0.0
Replaying proof: 1.116813

mergesort_stable
Statistics
  infstep : 415
  nodes   : 98
  maxdepth: 5
Time: 10.00026
  inferstep time: 7.456462
  node_find time: 0.051304
  node_crea time: 2.309428
    pred time: 0.639642
    thmpred time: 0.000028
    mc time: 0.804952
    inst time: 0.0
Proof status: Time Out
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.027513

mergesort_STABLE_SORT
proof length: 3
proof time: 0.144114
Statistics
  infstep : 7
  nodes   : 6
  maxdepth: 2
Time: 0.406709
  inferstep time: 0.321912
  node_find time: 0.000462
  node_crea time: 0.066078
    pred time: 0.022922
    thmpred time: 0.0
    mc time: 0.034252
    inst time: 0.0
Proof found: BasicProvers.RW_TAC bossLib.std_ss [(DB.fetch "sorting" "STABLE_DEF"), (DB.fetch "sorting" "QSORT3_SORTS")] THENL [BasicProvers.SRW_TAC [] [sortingTheory.QSORT3_SORTS, DB.fetch "mergesort" "mergesort_sorted", DB.fetch "mergesort" "mergesort_def", DB.fetch "mergesort" "mergesort_stable", DB.fetch "mergesort" "mergesort_perm", sortingTheory.SORTS_DEF, sortingTheory.QSORT_SORTS, sortingTheory.STABLE_DEF, sortingTheory.QSORT3_STABLE, sortingTheory.PART3_FILTER, sortingTheory.QSORT3_SPLIT, sortingTheory.tactictoe_thm_53, sortingTheory.tactictoe_thm_55, DB.fetch "mergesort" "mergesortN_sorted", DB.fetch "mergesort" "mergesortN_stable", DB.fetch "mergesort" "mergesortN_perm"], metisTools.METIS_TAC [DB.fetch "mergesort" "mergesort_def", DB.fetch "mergesort" "mergesort_sorted", DB.fetch "mergesort" "mergesort_stable", DB.fetch "mergesort" "mergesort_perm", sortingTheory.tactictoe_thm_55, DB.fetch "mergesort" "stable_def", sortingTheory.STABLE_DEF, sortingTheory.SORTED_FILTER, sortingTheory.sorted_filter, sortingTheory.tactictoe_thm_54, sortingTheory.tactictoe_thm_57, sortingTheory.tactictoe_thm_50, sortingTheory.tactictoe_thm_52, listTheory.FILTER_EQ_NIL, sortingTheory.tactictoe_thm_42, sortingTheory.tactictoe_thm_40]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.104634

mergesort_mem
Statistics
  infstep : 985
  nodes   : 131
  maxdepth: 6
Time: 10.011008
  inferstep time: 7.917596
  node_find time: 0.137608
  node_crea time: 1.66384
    pred time: 0.443171
    thmpred time: 0.000017
    mc time: 0.748617
    inst time: 0.0
Proof status: Time Out
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.049164

sort2_tail_correct
proof length: 5
proof time: 0.011432
Statistics
  infstep : 16
  nodes   : 8
  maxdepth: 3
Time: 0.582013
  inferstep time: 0.482605
  node_find time: 0.001161
  node_crea time: 0.073951
    pred time: 0.027958
    thmpred time: 0.000002
    mc time: 0.038742
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THENL [BasicProvers.SRW_TAC [] [DB.fetch "mergesort" "mergesortN_def", DB.fetch "mergesort" "sort2_def", DB.fetch "mergesort" "tactictoe_thm_1", DB.fetch "mergesort" "tactictoe_thm_3", DB.fetch "mergesort" "tactictoe_thm_6", DB.fetch "mergesort" "sort2_perm", DB.fetch "mergesort" "sort2_sorted", DB.fetch "mergesort" "sort2_stable", DB.fetch "mergesort" "mergesortN_tail_def", DB.fetch "mergesort" "sort2_tail_def", rich_listTheory.EVERY2_REVERSE1, listTheory.EVERY2_REVERSE, rich_listTheory.FOLDL_FOLDR_REVERSE, rich_listTheory.FOLDL_REVERSE, rich_listTheory.FOLDR_FOLDL_REVERSE, rich_listTheory.FOLDR_REVERSE] THEN
  metisTools.METIS_TAC [DB.fetch "mergesort" "mergesortN_tail_def", arithmeticTheory.X_LT_DIV, pairTheory.FST, pairTheory.SND, pairTheory.UNCURRY_DEF, pairTheory.pair_case_thm, relationTheory.inv_image_def, DB.fetch "mergesort" "sort2_tail_def", DB.fetch "mergesort" "mergesortN_def", DB.fetch "mergesort" "sort2_def", DB.fetch "mergesort" "tactictoe_thm_1", DB.fetch "mergesort" "tactictoe_thm_3", DB.fetch "mergesort" "tactictoe_thm_6", sortingTheory.PERM_EQUIVALENCE_ALT_DEF, sortingTheory.PERM_FUN_CONS_11_SWAP_AT_FRONT, relationTheory.total_def], BasicProvers.SRW_TAC [] [DB.fetch "mergesort" "mergesortN_def", DB.fetch "mergesort" "sort2_def", DB.fetch "mergesort" "tactictoe_thm_1", DB.fetch "mergesort" "tactictoe_thm_3", DB.fetch "mergesort" "tactictoe_thm_6", DB.fetch "mergesort" "sort2_perm", DB.fetch "mergesort" "sort2_sorted", DB.fetch "mergesort" "sort2_stable", DB.fetch "mergesort" "mergesortN_tail_def", DB.fetch "mergesort" "sort2_tail_def", listTheory.LLEX_def, listTheory.MEM, rich_listTheory.IS_PREFIX, listTheory.EXISTS_DEF, listTheory.NULL_DEF, ConseqConvTheory.COND_CLAUSES_FF]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.04175

sort3_tail_correct
proof length: 22
proof time: 0.282757
Statistics
  infstep : 113
  nodes   : 26
  maxdepth: 3
Time: 3.343175
  inferstep time: 2.9678
  node_find time: 0.009681
  node_crea time: 0.248415
    pred time: 0.082788
    thmpred time: 0.00001
    mc time: 0.144729
    inst time: 0.0
Proof found: BasicProvers.srw_tac [] [(DB.fetch "mergesort" "sort3_def"), (DB.fetch "mergesort" "stable_def")] THENL [boolLib.REWRITE_TAC [DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "mergesortN_tail_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "mergesortN_def"] THEN
  bossLib.FULL_SIMP_TAC bossLib.list_ss [(DB.fetch "sorting" "tactictoe_thm_37")], BasicProvers.SRW_TAC [] [DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "mergesortN_tail_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "mergesortN_def"], boolLib.REWRITE_TAC [DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "mergesortN_tail_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "mergesortN_def"] THEN
  bossLib.FULL_SIMP_TAC bossLib.list_ss [(DB.fetch "sorting" "tactictoe_thm_37")], BasicProvers.SRW_TAC [] [DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "mergesortN_tail_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "mergesortN_def"], BasicProvers.SRW_TAC [] [DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "mergesortN_tail_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "mergesortN_def"], boolLib.REWRITE_TAC [DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "mergesortN_tail_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "mergesortN_def"] THEN
  bossLib.FULL_SIMP_TAC bossLib.list_ss [(DB.fetch "sorting" "tactictoe_thm_37")], boolLib.REWRITE_TAC [DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "mergesortN_tail_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "mergesortN_def"] THEN
  BasicProvers.srw_tac [permLib.PERM_ss] [(DB.fetch "mergesort" "sort2_def")], boolLib.REWRITE_TAC [DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "mergesortN_tail_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "mergesortN_def"] THEN
  BasicProvers.srw_tac [permLib.PERM_ss] [(DB.fetch "mergesort" "sort2_def")], boolLib.REWRITE_TAC [DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "mergesortN_tail_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "mergesortN_def"] THEN
  metisTools.METIS_TAC [DB.fetch "mergesort" "sort3_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "sort2_def", DB.fetch "mergesort" "mergesortN_tail_def"], boolLib.REWRITE_TAC [DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "mergesortN_tail_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "mergesortN_def"] THEN
  BasicProvers.srw_tac [permLib.PERM_ss] [(DB.fetch "mergesort" "sort2_def")], boolLib.REWRITE_TAC [DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "mergesortN_tail_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "mergesortN_def"] THEN
  BasicProvers.srw_tac [permLib.PERM_ss] [(DB.fetch "mergesort" "sort2_def")], boolLib.REWRITE_TAC [DB.fetch "mergesort" "sort3_tail_def", DB.fetch "mergesort" "mergesortN_tail_def", relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_5, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_8, relationTheory.tactictoe_thm_9, DB.fetch "mergesort" "sort3_def", DB.fetch "mergesort" "sort3_perm", DB.fetch "mergesort" "sort3_stable", DB.fetch "mergesort" "mergesortN_def"] THEN
  BasicProvers.srw_tac [permLib.PERM_ss] [(DB.fetch "mergesort" "sort2_def")]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.190844

merge_tail_correct1
proof length: 9
proof time: 0.034072
Statistics
  infstep : 788
  nodes   : 115
  maxdepth: 5
Time: 9.462194
  inferstep time: 7.799523
  node_find time: 0.102281
  node_crea time: 1.240456
    pred time: 0.308045
    thmpred time: 0.000023
    mc time: 0.614618
    inst time: 0.0
Proof found: boolLib.STRIP_TAC THEN boolLib.ho_match_mp_tac (DB.fetch "mergesort" "merge_ind") THEN
  BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THENL
  [BasicProvers.srw_tac [permLib.PERM_ss] [DB.fetch "mergesort" "tactictoe_thm_4", DB.fetch "mergesort" "tactictoe_thm_0", DB.fetch "mergesort" "tactictoe_thm_2", DB.fetch "mergesort" "merge_def", DB.fetch "mergesort" "tactictoe_thm_5", DB.fetch "mergesort" "tactictoe_thm_8", DB.fetch "mergesort" "merge_tail_def", DB.fetch "mergesort" "tactictoe_thm_7", DB.fetch "mergesort" "mergesortN_tail_def", DB.fetch "mergesort" "filter_merge", DB.fetch "mergesort" "merge_stable", DB.fetch "mergesort" "merge_perm", DB.fetch "mergesort" "mergesortN_def", DB.fetch "mergesort" "tactictoe_thm_1", DB.fetch "mergesort" "tactictoe_thm_3", DB.fetch "mergesort" "tactictoe_thm_6"],
  BasicProvers.srw_tac [] [(DB.fetch "mergesort" "tactictoe_thm_4"), sortingTheory.SORTED_EQ] THEN
  BasicProvers.SRW_TAC [] [listTheory.REVERSE_DEF, DB.fetch "mergesort" "merge_tail_def", DB.fetch "mergesort" "tactictoe_thm_7", DB.fetch "mergesort" "merge_tail_ind", listTheory.REVERSE_APPEND, listTheory.REV_REVERSE_LEM, indexedListsTheory.MAPi_ACC_MAPi, DB.fetch "mergesort" "mergesortN_tail_def", DB.fetch "mergesort" "tactictoe_thm_4", DB.fetch "mergesort" "tactictoe_thm_0", DB.fetch "mergesort" "tactictoe_thm_2", DB.fetch "mergesort" "merge_def", DB.fetch "mergesort" "tactictoe_thm_5", DB.fetch "mergesort" "tactictoe_thm_8", DB.fetch "mergesort" "merge_ind", rich_listTheory.SPLITP_AUX_def],
  BasicProvers.srw_tac [] [(DB.fetch "mergesort" "tactictoe_thm_4"), sortingTheory.SORTED_EQ] THEN
  BasicProvers.SRW_TAC [] [listTheory.REVERSE_DEF, DB.fetch "mergesort" "merge_tail_def", DB.fetch "mergesort" "tactictoe_thm_7", listTheory.REVERSE_APPEND, listTheory.REV_REVERSE_LEM, indexedListsTheory.MAPi_ACC_MAPi, DB.fetch "mergesort" "mergesortN_tail_def", DB.fetch "mergesort" "merge_tail_ind", DB.fetch "mergesort" "tactictoe_thm_4", DB.fetch "mergesort" "tactictoe_thm_0", DB.fetch "mergesort" "tactictoe_thm_2", DB.fetch "mergesort" "merge_def", DB.fetch "mergesort" "tactictoe_thm_5", DB.fetch "mergesort" "tactictoe_thm_8", DB.fetch "mergesort" "merge_ind", rich_listTheory.SPLITP_AUX_def],
  BasicProvers.SRW_TAC [] [DB.fetch "mergesort" "tactictoe_thm_4", DB.fetch "mergesort" "tactictoe_thm_0", DB.fetch "mergesort" "tactictoe_thm_2", DB.fetch "mergesort" "merge_def", DB.fetch "mergesort" "tactictoe_thm_5", DB.fetch "mergesort" "tactictoe_thm_8", DB.fetch "mergesort" "merge_tail_def", DB.fetch "mergesort" "tactictoe_thm_7", DB.fetch "mergesort" "mergesortN_tail_def", DB.fetch "mergesort" "filter_merge", DB.fetch "mergesort" "merge_stable", DB.fetch "mergesort" "merge_perm", DB.fetch "mergesort" "merge_sorted", DB.fetch "mergesort" "mergesortN_def", DB.fetch "mergesort" "tactictoe_thm_1", DB.fetch "mergesort" "tactictoe_thm_3"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.063353

merge_empty
proof length: 7
proof time: 0.007599
Statistics
  infstep : 88
  nodes   : 14
  maxdepth: 3
Time: 1.262811
  inferstep time: 1.031961
  node_find time: 0.010339
  node_crea time: 0.137607
    pred time: 0.056762
    thmpred time: 0.000004
    mc time: 0.085257
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THEN (BasicProvers.Cases_on [HolKernel.QUOTE " (*#loc 1 6333*)l"] THENL
  [BasicProvers.SRW_TAC [] [DB.fetch "mergesort" "merge_def", DB.fetch "mergesort" "tactictoe_thm_0", DB.fetch "mergesort" "tactictoe_thm_2", DB.fetch "mergesort" "tactictoe_thm_4", DB.fetch "mergesort" "tactictoe_thm_5", DB.fetch "mergesort" "tactictoe_thm_8", DB.fetch "mergesort" "tactictoe_thm_9", DB.fetch "mergesort" "mergesortN_def", DB.fetch "mergesort" "tactictoe_thm_1", DB.fetch "mergesort" "tactictoe_thm_3", DB.fetch "mergesort" "tactictoe_thm_6", DB.fetch "mergesort" "filter_merge", DB.fetch "mergesort" "merge_tail_correct1", DB.fetch "mergesort" "merge_sorted", DB.fetch "mergesort" "merge_perm", DB.fetch "mergesort" "merge_stable"],
  BasicProvers.srw_tac [] [(DB.fetch "mergesort" "tactictoe_thm_0")]])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.037772
Replaying proof: 0.024917
Replaying proof: 0.033703

merge_tail_correct2
Statistics
  infstep : 622
  nodes   : 112
  maxdepth: 6
Time: 10.031975
  inferstep time: 7.495762
  node_find time: 0.103707
  node_crea time: 2.088488
    pred time: 0.45683
    thmpred time: 0.000029
    mc time: 0.799688
    inst time: 0.0
Proof status: Time Out
Org tac number: 17
Original proof time: 0.0
Replaying proof: 0.980151

mergesortN_correct
Statistics
  infstep : 349
  nodes   : 54
  maxdepth: 5
Time: 10.082631
  inferstep time: 8.007207
  node_find time: 0.0495
  node_crea time: 1.846142
    pred time: 0.644313
    thmpred time: 0.000021
    mc time: 0.505994
    inst time: 0.0
Proof status: Time Out
Org tac number: 10
Original proof time: 0.0
Replaying proof: 0.610419

mergesort_tail_correct
proof length: 1
proof time: 0.065959
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.082593
  inferstep time: 0.063165
  node_find time: 0.000094
  node_crea time: 0.010782
    pred time: 0.003293
    thmpred time: 0.0
    mc time: 0.011996
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "mergesort" "mergesort_tail_def" , DB.fetch "mergesort" "mergesort_sorted" , DB.fetch "mergesort" "mergesort_stable" , DB.fetch "mergesort" "mergesort_def" , DB.fetch "mergesort" "mergesort_perm" , DB.fetch "mergesort" "mergesort_mem" , DB.fetch "mergesort" "mergesort_STABLE_SORT" , DB.fetch "mergesort" "mergesortN_correct" , sortingTheory.QSORT3_SPLIT , sortingTheory.tactictoe_thm_55 , DB.fetch "mergesort" "mergesortN_sorted" , DB.fetch "mergesort" "mergesortN_stable" , sortingTheory.QSORT_eq_if_PERM , DB.fetch "mergesort" "merge_sorted" , DB.fetch "mergesort" "sort3_stable" , sortingTheory.QSORT_SORTED])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.008373
Bad stac: 7
