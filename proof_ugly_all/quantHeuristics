
GUESS_EXISTS_FORALL_REWRITES
proof length: 5
proof time: 0.261185
Statistics
  infstep : 57
  nodes   : 9
  maxdepth: 3
Time: 0.757369
  inferstep time: 0.661302
  node_find time: 0.001122
  node_crea time: 0.066597
    pred time: 0.019128
    thmpred time: 0.000001
    mc time: 0.055519
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THENL [metisTools.METIS_TAC [DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_45, pred_setTheory.tactictoe_thm_44, pred_setTheory.tactictoe_thm_49, relationTheory.tactictoe_thm_24, ind_typeTheory.ZRECSPACE_def, listTheory.EXISTS_GENLIST, ind_typeTheory.CONSTR_REC, ind_typeTheory.CONSTR_IND, ind_typeTheory.ZRECSPACE_ind, ind_typeTheory.ZRECSPACE_strongind, ind_typeTheory.tactictoe_thm_4, listTheory.EVERY_GENLIST], metisTools.METIS_TAC [DB.fetch "quantHeuristics" "GUESS_EXISTS_def", pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_45, pred_setTheory.tactictoe_thm_44, pred_setTheory.tactictoe_thm_49, relationTheory.tactictoe_thm_24, DB.fetch "quantHeuristics" "GUESS_FORALL_def", ind_typeTheory.ZRECSPACE_def, listTheory.EXISTS_GENLIST, ind_typeTheory.CONSTR_REC, ind_typeTheory.CONSTR_BOT, ind_typeTheory.CONSTR_IND, ind_typeTheory.CONSTR, ind_typeTheory.ZRECSPACE_ind, ind_typeTheory.ZRECSPACE_strongind], metisTools.METIS_TAC [DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_45, pred_setTheory.tactictoe_thm_44, pred_setTheory.tactictoe_thm_49, relationTheory.tactictoe_thm_24, ind_typeTheory.ZRECSPACE_def, listTheory.EXISTS_GENLIST, ind_typeTheory.CONSTR_REC, ind_typeTheory.CONSTR_IND, ind_typeTheory.ZRECSPACE_ind, ind_typeTheory.ZRECSPACE_strongind, ind_typeTheory.tactictoe_thm_4, listTheory.EVERY_GENLIST], metisTools.METIS_TAC [DB.fetch "quantHeuristics" "GUESS_FORALL_def", pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_45, pred_setTheory.tactictoe_thm_44, pred_setTheory.tactictoe_thm_49, relationTheory.tactictoe_thm_24, DB.fetch "quantHeuristics" "GUESS_EXISTS_def", ind_typeTheory.ZRECSPACE_def, listTheory.EXISTS_GENLIST, ind_typeTheory.CONSTR_REC, ind_typeTheory.CONSTR_BOT, ind_typeTheory.CONSTR_IND, ind_typeTheory.CONSTR, ind_typeTheory.ZRECSPACE_ind, ind_typeTheory.ZRECSPACE_strongind]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.067603

GUESS_POINT_THM
proof length: 2
proof time: 0.006983
Statistics
  infstep : 22
  nodes   : 8
  maxdepth: 2
Time: 0.589653
  inferstep time: 0.491172
  node_find time: 0.000541
  node_crea time: 0.08939
    pred time: 0.039305
    thmpred time: 0.000002
    mc time: 0.036824
    inst time: 0.0
Proof found: simpLib.SIMP_TAC (BasicProvers.srw_ss ()) [DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", optionTheory.option_CLAUSES, DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", listTheory.LLEX_def, numeralTheory.tactictoe_thm_27, optionTheory.IS_SOME_DEF, optionTheory.IS_NONE_DEF, numeralTheory.numeral_lt, numeralTheory.numeral_lte, numeralTheory.iSUB_DEF, listTheory.NULL_DEF, listTheory.isPREFIX, numeralTheory.iSUB_THM] THEN metisLib.METIS_TAC []
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.036602

GUESS_EXISTS_POINT_THM
proof length: 4
proof time: 0.034849
Statistics
  infstep : 1219
  nodes   : 156
  maxdepth: 6
Time: 9.606908
  inferstep time: 8.117804
  node_find time: 0.083535
  node_crea time: 1.253237
    pred time: 0.308067
    thmpred time: 0.000015
    mc time: 0.558542
    inst time: 0.0
Proof found: boolLib.ASM_REWRITE_TAC [(DB.fetch "arithmetic" "ADD_CLAUSES"), (DB.fetch "arithmetic" "SUB_0"), (DB.fetch "arithmetic" "SUB_MONO_EQ"), (DB.fetch "arithmetic" "LESS_EQ_MONO"), prim_recTheory.INV_SUC_EQ, (DB.fetch "arithmetic" "LESS_EQ_0")] THEN BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THEN
  BasicProvers.RW_TAC numLib.std_ss [boolTheory.EXISTS_DEF] THEN
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_5, pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_44, pred_setTheory.tactictoe_thm_49, pred_setTheory.tactictoe_thm_37, arithmeticTheory.tactictoe_thm_11, pred_setTheory.LINV_OPT_def, relationTheory.the_fun_def, optionTheory.some_def, ind_typeTheory.ZBOT, oneTheory.one_DEF, DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", satTheory.NOT_NOT, satTheory.AND_INV_IMP]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.037979

GUESS_FORALL_POINT_THM
Statistics
  infstep : 1298
  nodes   : 120
  maxdepth: 5
Time: 10.039971
  inferstep time: 8.610412
  node_find time: 0.095979
  node_crea time: 1.181449
    pred time: 0.299959
    thmpred time: 0.000024
    mc time: 0.556482
    inst time: 0.0
Proof status: Time Out
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.032797

GUESS_EXISTS_THM
proof length: 2
proof time: 0.006811
Statistics
  infstep : 36
  nodes   : 7
  maxdepth: 2
Time: 0.507669
  inferstep time: 0.445927
  node_find time: 0.001332
  node_crea time: 0.049584
    pred time: 0.019122
    thmpred time: 0.000002
    mc time: 0.022205
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_EXISTS_def"), (DB.fetch "quantHeuristics" "GUESS_FORALL_def")] THEN simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def"), boolLib.EXISTS_THM]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.056371

GUESS_FORALL_THM
proof length: 2
proof time: 0.001057
Statistics
  infstep : 70
  nodes   : 6
  maxdepth: 2
Time: 0.654437
  inferstep time: 0.565317
  node_find time: 0.003082
  node_crea time: 0.069355
    pred time: 0.023532
    thmpred time: 0.000002
    mc time: 0.034306
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_EXISTS_def"), (DB.fetch "quantHeuristics" "GUESS_FORALL_def")] THEN simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_REWRITES"), boolLib.FORALL_THM]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.056648

GUESSES_UEXISTS_THM1
proof length: 6
proof time: 0.118815
Statistics
  infstep : 697
  nodes   : 95
  maxdepth: 5
Time: 8.473783
  inferstep time: 7.19244
  node_find time: 0.051097
  node_crea time: 1.090838
    pred time: 0.273291
    thmpred time: 0.000024
    mc time: 0.491762
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_EXISTS_def"), (DB.fetch "quantHeuristics" "GUESS_FORALL_def")] THEN BasicProvers.RW_TAC numLib.std_ss [boolTheory.EXISTS_DEF] THEN
  BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THENL
  [metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, relationTheory.tactictoe_thm_24, DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", ind_typeTheory.CONSTR_REC, DB.fetch "quantHeuristics" "GUESS_POINT_THM", ind_typeTheory.ZRECSPACE_def, listTheory.GENLIST_EL],
  metisLib.METIS_TAC [(DB.fetch "pred_set" "IN_INSERT")],
  metisLib.METIS_TAC [(DB.fetch "pred_set" "IN_INSERT")]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.05658

GUESSES_UEXISTS_THM2
proof length: 4
proof time: 0.10158
Statistics
  infstep : 19
  nodes   : 8
  maxdepth: 3
Time: 0.616547
  inferstep time: 0.546781
  node_find time: 0.000817
  node_crea time: 0.055363
    pred time: 0.021373
    thmpred time: 0.000001
    mc time: 0.026449
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", pred_setTheory.BIJ_ALT, relationTheory.WF_RECURSION_THM, listTheory.list_Axiom_old, listTheory.tactictoe_thm_17, pairTheory.PAIR_FUN_THM, prim_recTheory.SIMP_REC_REL_UNIQUE_RESULT, prim_recTheory.num_Axiom_old, sumTheory.tactictoe_thm_9, sumTheory.sum_axiom, oneTheory.one_Axiom, oneTheory.tactictoe_thm_0, numpairTheory.nfoldl_def, listTheory.EVERY_SIMP] THEN BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THENL
  [metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", ind_typeTheory.CONSTR_REC, ind_typeTheory.ZRECSPACE_def, listTheory.EVERY_GENLIST, listTheory.GENLIST_EL, listTheory.splitAtPki_APPEND, numTheory.tactictoe_thm_17, DB.fetch "quantHeuristics" "GUESS_EXISTS_def"],
  metisLib.METIS_TAC [(DB.fetch "option" "option_nchotomy")]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.045578

GUESSES_UEXISTS_THM3
proof length: 4
proof time: 0.018212
Statistics
  infstep : 45
  nodes   : 10
  maxdepth: 3
Time: 0.849057
  inferstep time: 0.736805
  node_find time: 0.002028
  node_crea time: 0.089482
    pred time: 0.029817
    thmpred time: 0.000002
    mc time: 0.043199
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def"), boolLib.EXISTS_THM] THEN BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THEN
  metisLib.METIS_TAC [(DB.fetch "option" "option_nchotomy")]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.041444

GUESSES_UEXISTS_THM4
proof length: 2
proof time: 0.008277
Statistics
  infstep : 7
  nodes   : 5
  maxdepth: 2
Time: 0.286446
  inferstep time: 0.242855
  node_find time: 0.000415
  node_crea time: 0.036444
    pred time: 0.017413
    thmpred time: 0.000001
    mc time: 0.017581
    inst time: 0.0
Proof found: boolLib.ASM_REWRITE_TAC [DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM2", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM3", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", pred_setTheory.BIJ_ALT, relationTheory.WF_RECURSION_THM, listTheory.list_Axiom_old, listTheory.tactictoe_thm_17, oneTheory.one_Axiom, pairTheory.PAIR_FUN_THM, prim_recTheory.SIMP_REC_REL_UNIQUE_RESULT, prim_recTheory.num_Axiom_old] THEN metisLib.METIS_TAC []
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.034035

GUESSES_NEG_DUALITY
proof length: 1
proof time: 0.00436
Statistics
  infstep : 3
  nodes   : 2
  maxdepth: 1
Time: 0.147899
  inferstep time: 0.133846
  node_find time: 0.000143
  node_crea time: 0.009696
    pred time: 0.002862
    thmpred time: 0.0
    mc time: 0.007543
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "GUESS_REWRITES" ) , boolLib.FORALL_THM ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.008621

GUESSES_WEAKEN_THM
proof length: 2
proof time: 0.012898
Statistics
  infstep : 7
  nodes   : 5
  maxdepth: 2
Time: 0.304345
  inferstep time: 0.248072
  node_find time: 0.00031
  node_crea time: 0.04929
    pred time: 0.022882
    thmpred time: 0.0
    mc time: 0.016969
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_REWRITES"), boolLib.FORALL_THM] THEN metisLib.METIS_TAC []
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.045818

GUESS_RULES_EQUATION_EXISTS_POINT
proof length: 2
proof time: 0.115486
Statistics
  infstep : 3
  nodes   : 3
  maxdepth: 2
Time: 0.224754
  inferstep time: 0.203898
  node_find time: 0.000155
  node_crea time: 0.015051
    pred time: 0.005827
    thmpred time: 0.0
    mc time: 0.010839
    inst time: 0.0
Proof found: boolLib.ASM_REWRITE_TAC [listTheory.MAP_EQ_EVERY2, DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM3", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM4", relationTheory.WF_RECURSION_THM, pred_setTheory.LINV_OPT_def, DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_THM", DB.fetch "quantHeuristics" "GUESSES_WEAKEN_THM", DB.fetch "quantHeuristics" "GUESSES_NEG_DUALITY", oneTheory.tactictoe_thm_0, oneTheory.one_TY_DEF, DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM2"] THEN metisTools.METIS_TAC [listTheory.MAP_EQ_EVERY2, relationTheory.WF_RECURSION_THM, pred_setTheory.LINV_OPT_def, ind_typeTheory.CONSTR_IND, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM3", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM2", ind_typeTheory.ZRECSPACE_def]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.004198

GUESS_RULES_EQUATION_FORALL_POINT
proof length: 1
proof time: 0.001497
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.122423
  inferstep time: 0.110379
  node_find time: 0.000095
  node_crea time: 0.008688
    pred time: 0.002761
    thmpred time: 0.0
    mc time: 0.006804
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "GUESS_REWRITES" ) , boolLib.FORALL_THM ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.021564

GUESS_RULES_EQUATION_EXISTS_GAP
proof length: 2
proof time: 0.051798
Statistics
  infstep : 3
  nodes   : 3
  maxdepth: 2
Time: 0.192737
  inferstep time: 0.164213
  node_find time: 0.000197
  node_crea time: 0.021946
    pred time: 0.006067
    thmpred time: 0.000001
    mc time: 0.018506
    inst time: 0.0
Proof found: boolLib.ASM_REWRITE_TAC [DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM2", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM4", optionTheory.some_EQ, whileTheory.LEAST_EQ, whileTheory.OLEAST_EQNS, ind_typeTheory.INJA, ind_typeTheory.INJN, DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESSES_NEG_DUALITY", DB.fetch "quantHeuristics" "GUESSES_WEAKEN_THM", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_EXISTS_POINT", oneTheory.tactictoe_thm_0, oneTheory.one_TY_DEF, DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1"] THEN metisTools.METIS_TAC [optionTheory.some_EQ, whileTheory.LEAST_EQ, whileTheory.OLEAST_EQNS, ind_typeTheory.INJA, ind_typeTheory.INJN, listTheory.EL_LUPDATE, sumTheory.tactictoe_thm_2, sumTheory.tactictoe_thm_6, pairTheory.LEX_DEF, sumTheory.tactictoe_thm_4, sumTheory.tactictoe_thm_7, pairTheory.ABS_REP_prod, pairTheory.COMMA_DEF, pairTheory.tactictoe_thm_0, pred_setTheory.DELETE_INSERT, pred_setTheory.INSERT_DEF]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.023966

GUESS_RULES_TRIVIAL_EXISTS_POINT
proof length: 1
proof time: 0.001001
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.133806
  inferstep time: 0.124906
  node_find time: 0.0001
  node_crea time: 0.006354
    pred time: 0.002285
    thmpred time: 0.0
    mc time: 0.00458
    inst time: 0.0
Proof found: (boolLib.ASM_REWRITE_TAC [ DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM3" , DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM4" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_EXISTS_POINT" , DB.fetch "quantHeuristics" "GUESS_REWRITES" , DB.fetch "quantHeuristics" "GUESS_POINT_THM" , DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def" , DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE" , DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_THM" , DB.fetch "quantHeuristics" "GUESSES_WEAKEN_THM" , DB.fetch "quantHeuristics" "GUESSES_NEG_DUALITY" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_EXISTS_GAP" , oneTheory.tactictoe_thm_0 , oneTheory.one_TY_DEF , DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1" , DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM2" , oneTheory.one_induction ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.007891

GUESS_RULES_TRIVIAL_FORALL_POINT
proof length: 1
proof time: 0.000961
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.117319
  inferstep time: 0.106472
  node_find time: 0.000136
  node_crea time: 0.007148
    pred time: 0.002362
    thmpred time: 0.0
    mc time: 0.00627
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "GUESS_REWRITES" ) , boolLib.FORALL_THM ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.004109

GUESS_RULES_BOOL
proof length: 1
proof time: 0.001561
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.117972
  inferstep time: 0.106508
  node_find time: 0.000126
  node_crea time: 0.008125
    pred time: 0.002438
    thmpred time: 0.000001
    mc time: 0.006334
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "GUESS_REWRITES" ) , boolLib.FORALL_THM ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.005432

GUESS_RULES_TWO_CASES
proof length: 2
proof time: 0.098157
Statistics
  infstep : 3
  nodes   : 3
  maxdepth: 2
Time: 0.217391
  inferstep time: 0.193571
  node_find time: 0.000148
  node_crea time: 0.016638
    pred time: 0.005881
    thmpred time: 0.000001
    mc time: 0.013868
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_REWRITES"), boolLib.FORALL_THM] THEN metisTools.METIS_TAC [DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", optionTheory.some_elim, pred_setTheory.GSPEC_OR, pred_setTheory.tactictoe_thm_62, pred_setTheory.CROSS_SUBSET, pred_setTheory.FINITE_CROSS_EQ]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.036253

GUESS_RULES_ONE_CASE___FORALL_GAP
proof length: 1
proof time: 0.001149
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.116688
  inferstep time: 0.106938
  node_find time: 0.000099
  node_crea time: 0.00682
    pred time: 0.002526
    thmpred time: 0.0
    mc time: 0.005175
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "GUESS_REWRITES" ) , boolLib.FORALL_THM ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.008153

GUESS_RULES_ONE_CASE___EXISTS_GAP
proof length: 1
proof time: 0.001275
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.117265
  inferstep time: 0.1073
  node_find time: 0.000096
  node_crea time: 0.007051
    pred time: 0.002636
    thmpred time: 0.000001
    mc time: 0.00514
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "GUESS_REWRITES" ) , boolLib.FORALL_THM ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.008003

GUESS_RULES_NEG
proof length: 1
proof time: 0.005395
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.148049
  inferstep time: 0.127684
  node_find time: 0.000139
  node_crea time: 0.011642
    pred time: 0.003065
    thmpred time: 0.0
    mc time: 0.012884
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "GUESS_REWRITES" ) , boolLib.FORALL_THM ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.005288

GUESS_RULES_CONSTANT_EXISTS
proof length: 1
proof time: 0.000506
Statistics
  infstep : 3
  nodes   : 3
  maxdepth: 1
Time: 0.125835
  inferstep time: 0.109861
  node_find time: 0.000154
  node_crea time: 0.012632
    pred time: 0.004901
    thmpred time: 0.000001
    mc time: 0.007716
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "GUESS_EXISTS_def" ) , ( DB.fetch "quantHeuristics" "GUESS_FORALL_def" ) ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.008026

GUESS_RULES_CONSTANT_FORALL
proof length: 1
proof time: 0.000576
Statistics
  infstep : 3
  nodes   : 3
  maxdepth: 1
Time: 0.122921
  inferstep time: 0.106446
  node_find time: 0.000135
  node_crea time: 0.013218
    pred time: 0.005052
    thmpred time: 0.0
    mc time: 0.007995
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "GUESS_EXISTS_def" ) , ( DB.fetch "quantHeuristics" "GUESS_FORALL_def" ) ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.007919

GUESS_RULES_DISJ
proof length: 10
proof time: 0.464314
Statistics
  infstep : 72
  nodes   : 32
  maxdepth: 4
Time: 3.018202
  inferstep time: 2.584677
  node_find time: 0.004161
  node_crea time: 0.360423
    pred time: 0.119419
    thmpred time: 0.000011
    mc time: 0.135053
    inst time: 0.0
Proof found: boolLib.ASM_REWRITE_TAC [DB.fetch "quantHeuristics" "GUESS_RULES_NEG", DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE", pred_setTheory.GSPEC_OR, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESSES_WEAKEN_THM", DB.fetch "quantHeuristics" "GUESSES_NEG_DUALITY", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_RULES_BOOL", DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_RULES_CONSTANT_FORALL", DB.fetch "quantHeuristics" "GUESS_RULES_CONSTANT_EXISTS", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"] THEN BasicProvers.SRW_TAC [] [pred_setTheory.GSPEC_OR, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_RULES_NEG"] THENL
  [metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, arithmeticTheory.tactictoe_thm_11, DB.fetch "quantHeuristics" "GUESS_RULES_NEG", DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_RULES_TRIVIAL_FORALL_POINT", pred_setTheory.FINITE_INDUCT, arithmeticTheory.WOP, optionTheory.some_elim, listTheory.splitAtPki_APPEND, whileTheory.OLEAST_INTRO],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, arithmeticTheory.tactictoe_thm_11, DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", optionTheory.some_elim, whileTheory.OLEAST_INTRO, optionTheory.some_intro, pred_setTheory.MIN_SET_ELIM, whileTheory.LEAST_ELIM, pred_setTheory.GSPEC_OR, DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_EXISTS_POINT", pairTheory.PROD_ALL_CONG, pairTheory.PROD_ALL_THM],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.101431

GUESS_RULES_EQUIV
proof length: 6
proof time: 0.260907
Statistics
  infstep : 20
  nodes   : 11
  maxdepth: 3
Time: 1.012929
  inferstep time: 0.840223
  node_find time: 0.001126
  node_crea time: 0.139464
    pred time: 0.056045
    thmpred time: 0.000003
    mc time: 0.054928
    inst time: 0.0
Proof found: boolLib.REWRITE_TAC [DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_RULES_CONJ", DB.fetch "quantHeuristics" "GUESS_RULES_DISJ", DB.fetch "quantHeuristics" "GUESS_RULES_IMP", DB.fetch "quantHeuristics" "GUESS_RULES_NEG", DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_EXISTS_POINT", listTheory.EVERY_FILTER, listTheory.EVERY_FILTER_IMP, listTheory.MAP_EQ_EVERY2, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESSES_WEAKEN_THM", DB.fetch "quantHeuristics" "GUESSES_NEG_DUALITY", DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_RULES_BOOL", pred_setTheory.LINV_OPT_def] THEN BasicProvers.SRW_TAC [] [DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", listTheory.EVERY_FILTER, listTheory.EVERY_FILTER_IMP, DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_EXISTS_POINT", listTheory.MAP_EQ_EVERY2, pred_setTheory.LINV_OPT_def, relationTheory.WF_RECURSION_THM, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP"] THEN
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.08418

GUESS_RULES_COND
proof length: 16
proof time: 0.80993
Statistics
  infstep : 74
  nodes   : 36
  maxdepth: 3
Time: 3.320461
  inferstep time: 2.700391
  node_find time: 0.004476
  node_crea time: 0.506706
    pred time: 0.186726
    thmpred time: 0.000008
    mc time: 0.185266
    inst time: 0.0
Proof found: boolLib.REWRITE_TAC [DB.fetch "quantHeuristics" "GUESS_RULES_CONJ", DB.fetch "quantHeuristics" "GUESS_RULES_DISJ", DB.fetch "quantHeuristics" "GUESS_RULES_IMP", DB.fetch "quantHeuristics" "GUESS_RULES_NEG", DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE", DB.fetch "quantHeuristics" "GUESS_RULES_EQUIV", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESSES_WEAKEN_THM", DB.fetch "quantHeuristics" "GUESSES_NEG_DUALITY", numeralTheory.tactictoe_thm_13, numeralTheory.tactictoe_thm_18, numeralTheory.tactictoe_thm_22, numeralTheory.tactictoe_thm_25, numeralTheory.tactictoe_thm_28, DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_POINT_THM"] THEN boolLib.REPEAT boolLib.STRIP_TAC THENL
  [metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, satTheory.AND_INV_IMP, satTheory.OR_DUAL2, satTheory.OR_DUAL3, satTheory.AND_INV2, DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_RULES_BOOL", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_THM", numeralTheory.iSUB_DEF, optionTheory.OPTION_GUARD_def, optionTheory.IS_SOME_DEF, optionTheory.IS_NONE_DEF, ConseqConvTheory.COND_CLAUSES_FF, ConseqConvTheory.COND_CLAUSES_TF, numeralTheory.numeral_distrib],
  metisTools.METIS_TAC [listTheory.INDEX_FIND_def, whileTheory.ITERATION, whileTheory.WHILE, listTheory.FILTER, listTheory.dropWhile_def, whileTheory.OWHILE_THM, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def"],
  metisTools.METIS_TAC [numeralTheory.tactictoe_thm_13, numeralTheory.tactictoe_thm_18, numeralTheory.tactictoe_thm_22, numeralTheory.tactictoe_thm_25, numeralTheory.tactictoe_thm_28, pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES"],
  metisTools.METIS_TAC [numeralTheory.tactictoe_thm_13, numeralTheory.tactictoe_thm_18, numeralTheory.tactictoe_thm_22, numeralTheory.tactictoe_thm_25, numeralTheory.tactictoe_thm_28, pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, satTheory.AND_INV_IMP, satTheory.OR_DUAL2, satTheory.OR_DUAL3, satTheory.AND_INV2, DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_RULES_BOOL", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_THM", numeralTheory.iSUB_DEF, optionTheory.OPTION_GUARD_def, optionTheory.IS_SOME_DEF, optionTheory.IS_NONE_DEF, ConseqConvTheory.COND_CLAUSES_FF, ConseqConvTheory.COND_CLAUSES_TF, numeralTheory.numeral_distrib],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, listTheory.INDEX_FIND_def, whileTheory.ITERATION, whileTheory.WHILE, listTheory.FILTER, listTheory.dropWhile_def, whileTheory.OWHILE_THM, DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, satTheory.AND_INV_IMP, satTheory.OR_DUAL2, satTheory.OR_DUAL3, satTheory.AND_INV2, DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_RULES_BOOL", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_THM", numeralTheory.iSUB_DEF, optionTheory.OPTION_GUARD_def, optionTheory.IS_SOME_DEF, optionTheory.IS_NONE_DEF, ConseqConvTheory.COND_CLAUSES_FF, ConseqConvTheory.COND_CLAUSES_TF, numeralTheory.numeral_distrib],
  metisTools.METIS_TAC [listTheory.INDEX_FIND_def, whileTheory.ITERATION, whileTheory.WHILE, listTheory.FILTER, listTheory.dropWhile_def, whileTheory.OWHILE_THM, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.137221

GUESS_RULES_FORALL___NEW_FV
proof length: 4
proof time: 0.166061
Statistics
  infstep : 23
  nodes   : 11
  maxdepth: 3
Time: 0.915028
  inferstep time: 0.761948
  node_find time: 0.00125
  node_crea time: 0.12576
    pred time: 0.048385
    thmpred time: 0.000004
    mc time: 0.05751
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [pairTheory.ELIM_UNCURRY, pairTheory.tactictoe_thm_1, pairTheory.ELIM_PFORALL, pairTheory.ELIM_PEXISTS, pairTheory.UNCURRY_VAR, pairTheory.UNCURRY, pairTheory.pair_CASE_def, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_RULES_COND", DB.fetch "quantHeuristics" "GUESS_RULES_CONJ", DB.fetch "quantHeuristics" "GUESS_RULES_DISJ", DB.fetch "quantHeuristics" "GUESS_RULES_IMP", DB.fetch "quantHeuristics" "GUESS_RULES_NEG", DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE", DB.fetch "quantHeuristics" "GUESSES_WEAKEN_THM", DB.fetch "quantHeuristics" "GUESSES_NEG_DUALITY"] THENL [metisTools.METIS_TAC [pairTheory.ELIM_PEXISTS, pairTheory.ELIM_PFORALL, pairTheory.LAMBDA_PROD, pairTheory.LET2_RAND, pred_setTheory.tactictoe_thm_25, pred_setTheory.tactictoe_thm_26, pred_setTheory.KoenigsLemma, pred_setTheory.tactictoe_thm_75, relationTheory.WF_DEF, pairTheory.PEXISTS_THM, relationTheory.RTC_CASES1, pred_setTheory.partition_def, pairTheory.pair_Axiom, ind_typeTheory.CONSTR_REC, listTheory.LIST_REL_def, listTheory.LIST_REL_CONS1], metisTools.METIS_TAC [pairTheory.ELIM_PEXISTS, pairTheory.ELIM_PFORALL, pairTheory.LAMBDA_PROD, pred_setTheory.tactictoe_thm_25, pred_setTheory.tactictoe_thm_26, pairTheory.LET2_RAND, pred_setTheory.KoenigsLemma, pred_setTheory.tactictoe_thm_75, relationTheory.WF_DEF, pairTheory.PEXISTS_THM, relationTheory.RTC_CASES1, pred_setTheory.partition_def, pairTheory.pair_Axiom, ind_typeTheory.CONSTR_REC, listTheory.LIST_REL_def, listTheory.LIST_REL_CONS1], metisTools.METIS_TAC [pairTheory.ELIM_PEXISTS, pairTheory.ELIM_PFORALL, pairTheory.LAMBDA_PROD, pred_setTheory.tactictoe_thm_25, pred_setTheory.tactictoe_thm_26, pairTheory.PEXISTS_THM, pred_setTheory.KoenigsLemma, relationTheory.RTC_CASES1, pred_setTheory.partition_def, pairTheory.pair_Axiom, pred_setTheory.tactictoe_thm_75, ind_typeTheory.CONSTR_REC, relationTheory.WF_DEF, listTheory.LIST_REL_def, listTheory.LIST_REL_CONS1, pairTheory.LET2_RAND]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.068017

GUESS_RULES_FORALL___NEW_FV_1
proof length: 4
proof time: 0.205058
Statistics
  infstep : 6
  nodes   : 6
  maxdepth: 2
Time: 0.386466
  inferstep time: 0.335681
  node_find time: 0.000346
  node_crea time: 0.036596
    pred time: 0.014013
    thmpred time: 0.000002
    mc time: 0.022717
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "quantHeuristics" "GUESS_RULES_FORALL___NEW_FV", DB.fetch "quantHeuristics" "GUESS_RULES_CONJ", DB.fetch "quantHeuristics" "GUESS_RULES_DISJ", DB.fetch "quantHeuristics" "GUESS_RULES_IMP", DB.fetch "quantHeuristics" "GUESS_RULES_COND", DB.fetch "quantHeuristics" "GUESS_RULES_NEG", DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESSES_WEAKEN_THM", DB.fetch "quantHeuristics" "GUESSES_NEG_DUALITY", DB.fetch "quantHeuristics" "GUESS_RULES_EQUIV", DB.fetch "quantHeuristics" "GUESS_RULES_BOOL", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_RULES_CONSTANT_FORALL"] THENL [metisTools.METIS_TAC [relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_9, pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_25, pred_setTheory.tactictoe_thm_26, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM"], metisTools.METIS_TAC [relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_9, pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_25, pred_setTheory.tactictoe_thm_26, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM"], metisTools.METIS_TAC [relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_9, pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_25, pred_setTheory.tactictoe_thm_26, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.082946

GUESS_RULES_FORALL
proof length: 2
proof time: 0.021251
Statistics
  infstep : 10
  nodes   : 5
  maxdepth: 2
Time: 0.55367
  inferstep time: 0.507498
  node_find time: 0.00052
  node_crea time: 0.036646
    pred time: 0.012919
    thmpred time: 0.000001
    mc time: 0.017745
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_REWRITES"), boolLib.FORALL_THM] THEN metisLib.METIS_TAC []
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.05697

GUESS_RULES_EXISTS_UNIQUE
proof length: 3
proof time: 0.041251
Statistics
  infstep : 15
  nodes   : 9
  maxdepth: 3
Time: 0.560263
  inferstep time: 0.481173
  node_find time: 0.000812
  node_crea time: 0.061382
    pred time: 0.018328
    thmpred time: 0.000002
    mc time: 0.036121
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "quantHeuristics" "GUESS_RULES_EXISTS", DB.fetch "quantHeuristics" "GUESS_RULES_FORALL", DB.fetch "quantHeuristics" "GUESS_RULES_FORALL___NEW_FV_1", DB.fetch "quantHeuristics" "GUESS_RULES_COND", DB.fetch "quantHeuristics" "GUESS_RULES_CONJ", DB.fetch "quantHeuristics" "GUESS_RULES_DISJ", DB.fetch "quantHeuristics" "GUESS_RULES_EQUIV", DB.fetch "quantHeuristics" "GUESS_RULES_IMP", DB.fetch "quantHeuristics" "GUESS_RULES_NEG", DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESSES_WEAKEN_THM", DB.fetch "quantHeuristics" "GUESSES_NEG_DUALITY", DB.fetch "quantHeuristics" "GUESS_RULES_EXISTS___NEW_FV_1", DB.fetch "quantHeuristics" "GUESS_RULES_FORALL___NEW_FV", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM2"] THENL [metisTools.METIS_TAC [DB.fetch "quantHeuristics" "GUESS_RULES_BOOL", whileTheory.OLEAST_EQNS, relationTheory.tactictoe_thm_0, relationTheory.tactictoe_thm_1, relationTheory.tactictoe_thm_2, relationTheory.tactictoe_thm_3, relationTheory.tactictoe_thm_4, relationTheory.tactictoe_thm_6, relationTheory.tactictoe_thm_7, relationTheory.tactictoe_thm_9, pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_25, pred_setTheory.tactictoe_thm_26, DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM2", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM4"], metisLib.METIS_TAC [(DB.fetch "option" "option_nchotomy")]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.006555
Replaying proof: 0.000148

GUESS_RULES_ELIM_UNIT
Statistics
  infstep : 595
  nodes   : 124
  maxdepth: 5
Time: 10.08741
  inferstep time: 8.279018
  node_find time: 0.064755
  node_crea time: 1.580178
    pred time: 0.410717
    thmpred time: 0.000028
    mc time: 0.600286
    inst time: 0.0
Proof status: Time Out
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.007915

GUESS_RULES_STRENGTHEN_EXISTS_POINT
proof length: 1
proof time: 0.001066
Statistics
  infstep : 5
  nodes   : 3
  maxdepth: 1
Time: 0.181488
  inferstep time: 0.154046
  node_find time: 0.00033
  node_crea time: 0.02333
    pred time: 0.012261
    thmpred time: 0.000001
    mc time: 0.008625
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def" ) , boolLib.EXISTS_THM ])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.026312

GUESS_RULES_STRENGTHEN_FORALL_GAP
proof length: 2
proof time: 0.122253
Statistics
  infstep : 3
  nodes   : 3
  maxdepth: 2
Time: 0.262322
  inferstep time: 0.221101
  node_find time: 0.000276
  node_crea time: 0.028948
    pred time: 0.008054
    thmpred time: 0.000001
    mc time: 0.02676
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_REWRITES"), boolLib.FORALL_THM] THEN metisTools.METIS_TAC [DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_RULES_EXISTS___NEW_FV", DB.fetch "quantHeuristics" "GUESS_RULES_FORALL___NEW_FV"]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.045626

GUESS_RULES_WEAKEN_FORALL_POINT
proof length: 2
proof time: 0.110455
Statistics
  infstep : 4
  nodes   : 3
  maxdepth: 2
Time: 0.260349
  inferstep time: 0.239679
  node_find time: 0.000235
  node_crea time: 0.014118
    pred time: 0.005446
    thmpred time: 0.0
    mc time: 0.010436
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_REWRITES"), boolLib.FORALL_THM] THEN metisTools.METIS_TAC [DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___EXISTS_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_ONE_CASE___FORALL_GAP", DB.fetch "quantHeuristics" "GUESS_RULES_TWO_CASES", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_RULES_FORALL___NEW_FV", relationTheory.RTC_lifts_reflexive_transitive_relations]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.037621

GUESS_RULES_WEAKEN_EXISTS_GAP
proof length: 1
proof time: 0.00199
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.119256
  inferstep time: 0.108407
  node_find time: 0.000154
  node_crea time: 0.007735
    pred time: 0.002875
    thmpred time: 0.0
    mc time: 0.00507
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "GUESS_REWRITES" ) , boolLib.FORALL_THM ])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.024133

CONJ_NOT_OR_THM
proof length: 1
proof time: 0.076453
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.104181
  inferstep time: 0.092834
  node_find time: 0.000109
  node_crea time: 0.009005
    pred time: 0.003258
    thmpred time: 0.000001
    mc time: 0.005573
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_34 , pred_setTheory.tactictoe_thm_36 , satTheory.OR_DUAL , satTheory.OR_DUAL2 , satTheory.OR_DUAL3 , pred_setTheory.MIN_SET_UNION , relationTheory.WF_DEF , whileTheory.WHILE_RULE , pred_setTheory.MAX_SET_UNION , satTheory.AND_IMP , numTheory.tactictoe_thm_11 , pred_setTheory.INTER_SUBSET_EQN , pred_setTheory.INTER_UNION , whileTheory.WHILE_INDUCTION , pred_setTheory.BIGINTER_INSERT , pred_setTheory.IN_BIGINTER])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.00308

EXISTS_NOT_FORALL_THM
proof length: 1
proof time: 0.003473
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.124011
  inferstep time: 0.108668
  node_find time: 0.000178
  node_crea time: 0.009305
    pred time: 0.00337
    thmpred time: 0.0
    mc time: 0.008305
    inst time: 0.0
Proof found: (BasicProvers.PROVE_TAC [ ( DB.fetch "relation" "RTC_RULES" ) ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.00529

MOVE_EXISTS_IMP_THM
proof length: 1
proof time: 0.005954
Statistics
  infstep : 30
  nodes   : 6
  maxdepth: 2
Time: 0.297764
  inferstep time: 0.225809
  node_find time: 0.00168
  node_crea time: 0.061295
    pred time: 0.022063
    thmpred time: 0.0
    mc time: 0.028788
    inst time: 0.0
Proof found: (BasicProvers.PROVE_TAC [ ( DB.fetch "relation" "RTC_RULES" ) ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.007126

UNWIND_EXISTS_THM
proof length: 1
proof time: 0.017476
Statistics
  infstep : 29
  nodes   : 8
  maxdepth: 2
Time: 0.690615
  inferstep time: 0.592923
  node_find time: 0.001941
  node_crea time: 0.068592
    pred time: 0.029207
    thmpred time: 0.000002
    mc time: 0.026282
    inst time: 0.0
Proof found: (metisLib.METIS_TAC [ ( DB.fetch "pred_set" "SET_CASES" ) ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.005726

LEFT_IMP_AND_INTRO
proof length: 1
proof time: 0.086667
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.101677
  inferstep time: 0.092544
  node_find time: 0.00007
  node_crea time: 0.006747
    pred time: 0.002668
    thmpred time: 0.0
    mc time: 0.004299
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.LIST_REL_def , listTheory.LIST_REL_ind , listTheory.LIST_REL_rules , listTheory.LIST_REL_strongind , listTheory.MAP2_ind , listTheory.tactictoe_thm_3 , listTheory.tactictoe_thm_4 , pred_setTheory.partition_elements_disjoint , listTheory.tactictoe_thm_5 , listTheory.LIST_REL_cases , listTheory.LLEX_def , listTheory.MAP2 , listTheory.tactictoe_thm_1 , listTheory.MAP2_DEF , listTheory.tactictoe_thm_10 , listTheory.tactictoe_thm_8])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.003966

RIGHT_IMP_AND_INTRO
proof length: 1
proof time: 0.086674
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.101946
  inferstep time: 0.092298
  node_find time: 0.00006
  node_crea time: 0.007501
    pred time: 0.003389
    thmpred time: 0.0
    mc time: 0.004218
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "quantHeuristics" "LEFT_IMP_AND_INTRO" , listTheory.LIST_REL_def , listTheory.LIST_REL_ind , listTheory.LIST_REL_rules , listTheory.LIST_REL_strongind , listTheory.MAP2_ind , listTheory.tactictoe_thm_3 , listTheory.tactictoe_thm_4 , pred_setTheory.partition_elements_disjoint , listTheory.tactictoe_thm_5 , listTheory.LIST_REL_cases , listTheory.LLEX_def , listTheory.MAP2 , listTheory.tactictoe_thm_1 , listTheory.MAP2_DEF , listTheory.tactictoe_thm_10])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.003396

LEFT_IMP_OR_INTRO
proof length: 3
proof time: 0.122732
Statistics
  infstep : 6
  nodes   : 5
  maxdepth: 2
Time: 0.329649
  inferstep time: 0.289974
  node_find time: 0.000413
  node_crea time: 0.027265
    pred time: 0.009789
    thmpred time: 0.000001
    mc time: 0.020811
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [] THENL [metisTools.METIS_TAC [listTheory.LLEX_def, ConseqConvTheory.COND_CLAUSES_CT, listTheory.isPREFIX_THM, listTheory.LIST_REL_def, listTheory.tactictoe_thm_5, listTheory.LIST_REL_cases, listTheory.LLEX_THM, DB.fetch "quantHeuristics" "LEFT_IMP_AND_INTRO", DB.fetch "quantHeuristics" "RIGHT_IMP_AND_INTRO", listTheory.LIST_REL_ind, listTheory.LIST_REL_rules, listTheory.LIST_REL_strongind, listTheory.MAP2_ind, listTheory.tactictoe_thm_3, listTheory.tactictoe_thm_4, pred_setTheory.partition_elements_disjoint], metisTools.METIS_TAC [listTheory.LIST_REL_def, listTheory.tactictoe_thm_5, listTheory.LIST_REL_cases, listTheory.LLEX_THM, DB.fetch "quantHeuristics" "LEFT_IMP_AND_INTRO", DB.fetch "quantHeuristics" "RIGHT_IMP_AND_INTRO", listTheory.LLEX_def, listTheory.LIST_REL_ind, listTheory.LIST_REL_rules, listTheory.LIST_REL_strongind, listTheory.MAP2_ind, listTheory.tactictoe_thm_3, listTheory.tactictoe_thm_4, pred_setTheory.partition_elements_disjoint, ConseqConvTheory.COND_CLAUSES_CF, ConseqConvTheory.COND_CLAUSES_CT]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.003529

RIGHT_IMP_OR_INTRO
proof length: 1
proof time: 0.001207
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.117623
  inferstep time: 0.106647
  node_find time: 0.000158
  node_crea time: 0.008064
    pred time: 0.003164
    thmpred time: 0.0
    mc time: 0.005145
    inst time: 0.0
Proof found: (BasicProvers.PROVE_TAC [ ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.008012

IMP_NEG_CONTRA
proof length: 1
proof time: 0.097491
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.106445
  inferstep time: 0.095307
  node_find time: 0.000084
  node_crea time: 0.00795
    pred time: 0.002694
    thmpred time: 0.000001
    mc time: 0.006264
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT" , pred_setTheory.tactictoe_thm_41 , DB.fetch "quantHeuristics" "GUESS_RULES_NEG" , DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE" , DB.fetch "quantHeuristics" "GUESS_REWRITES" , listTheory.splitAtPki_APPEND , DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES" , DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def" , DB.fetch "quantHeuristics" "GUESS_RULES_TRIVIAL_FORALL_POINT" , DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def" , listTheory.MEM_LUPDATE , ind_typeTheory.CONSTR_BOT , ind_typeTheory.ZCONSTR_ZBOT , DB.fetch "quantHeuristics" "GUESSES_NEG_DUALITY" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_EXISTS_POINT" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUIV"])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.003222

DISJ_IMP_INTRO
proof length: 1
proof time: 0.005579
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.123973
  inferstep time: 0.111702
  node_find time: 0.000157
  node_crea time: 0.007811
    pred time: 0.002702
    thmpred time: 0.0
    mc time: 0.006615
    inst time: 0.0
Proof found: (metisLib.METIS_TAC [ ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.002762

SIMPLE_GUESS_EXISTS_ALT_DEF
proof length: 2
proof time: 0.002861
Statistics
  infstep : 10
  nodes   : 4
  maxdepth: 2
Time: 0.28946
  inferstep time: 0.253014
  node_find time: 0.00075
  node_crea time: 0.022476
    pred time: 0.008391
    thmpred time: 0.0
    mc time: 0.019569
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def", combinTheory.K_o_THM, combinTheory.K_THM, listTheory.LIST_IGNORE_BIND_def, listTheory.PAD_LEFT, listTheory.PAD_RIGHT, optionTheory.OPTION_IGNORE_BIND_def, pred_setTheory.FUNSET_DFUNSET, pred_setTheory.K_SUBSET, pred_setTheory.PREIMAGE_K, pred_setTheory.SUBSET_K, DB.fetch "quantHeuristics" "GUESS_RULES_EXISTS___NEW_FV_1", DB.fetch "quantHeuristics" "GUESS_RULES_FORALL___NEW_FV_1", DB.fetch "quantHeuristics" "GUESS_RULES_CONJ", DB.fetch "quantHeuristics" "GUESS_RULES_DISJ", DB.fetch "quantHeuristics" "GUESS_RULES_IMP"] THEN simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_REWRITES"), boolLib.FORALL_THM]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.005304

SIMPLE_GUESS_FORALL_ALT_DEF
proof length: 2
proof time: 0.001751
Statistics
  infstep : 12
  nodes   : 5
  maxdepth: 2
Time: 0.310311
  inferstep time: 0.259981
  node_find time: 0.00087
  node_crea time: 0.040274
    pred time: 0.015843
    thmpred time: 0.000001
    mc time: 0.019774
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "GUESS_REWRITES"), boolLib.FORALL_THM] THEN boolLib.ASM_REWRITE_TAC [DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM3", DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def", listTheory.SET_TO_LIST_IND, numpairTheory.tactictoe_thm_4, optionTheory.option_CLAUSES, pred_setTheory.ITSET_IND]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.011992

SIMPLE_GUESS_FORALL_THM
proof length: 3
proof time: 0.00799
Statistics
  infstep : 13
  nodes   : 8
  maxdepth: 3
Time: 0.538994
  inferstep time: 0.451288
  node_find time: 0.000863
  node_crea time: 0.073611
    pred time: 0.01943
    thmpred time: 0.000002
    mc time: 0.031754
    inst time: 0.0
Proof found: boolLib.ASM_REWRITE_TAC [DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_ALT_DEF", DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM3", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF", DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def", arithmeticTheory.num_case_cong, listTheory.SET_TO_LIST_IND, listTheory.list_case_cong] THEN BasicProvers.SRW_TAC [] [combinTheory.K_THM, DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_ALT_DEF", DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF", combinTheory.K_o_THM, optionTheory.OPTION_IGNORE_BIND_def, DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT", DB.fetch "quantHeuristics" "GUESS_FORALL_POINT_def", DB.fetch "quantHeuristics" "GUESS_FORALL_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_POINT_def"] THEN
  metisLib.METIS_TAC []
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.05643

SIMPLE_GUESS_EXISTS_THM
proof length: 3
proof time: 0.011471
Statistics
  infstep : 15
  nodes   : 7
  maxdepth: 3
Time: 0.622155
  inferstep time: 0.541716
  node_find time: 0.00117
  node_crea time: 0.065674
    pred time: 0.02624
    thmpred time: 0.000002
    mc time: 0.028029
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def"), (DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def")] THEN BasicProvers.RW_TAC numLib.std_ss [boolTheory.EXISTS_DEF] THEN
  metisLib.METIS_TAC []
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.037646

SIMPLE_GUESS_UEXISTS_THM
proof length: 3
proof time: 0.015888
Statistics
  infstep : 23
  nodes   : 11
  maxdepth: 3
Time: 0.898104
  inferstep time: 0.758031
  node_find time: 0.001606
  node_crea time: 0.123062
    pred time: 0.046716
    thmpred time: 0.000002
    mc time: 0.043069
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def"), (DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def")] THEN BasicProvers.RW_TAC BasicProvers.bool_ss [boolLib.EXISTS_UNIQUE_THM] THEN
  metisLib.METIS_TAC []
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.03493

SIMPLE_GUESS_SELECT_THM
Statistics
  infstep : 925
  nodes   : 92
  maxdepth: 5
Time: 10.006481
  inferstep time: 8.62042
  node_find time: 0.103681
  node_crea time: 1.003861
    pred time: 0.277438
    thmpred time: 0.000023
    mc time: 0.427963
    inst time: 0.0
Proof status: Time Out
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.292121

SIMPLE_GUESS_SOME_THM
proof length: 5
proof time: 0.219163
Statistics
  infstep : 15
  nodes   : 10
  maxdepth: 3
Time: 0.699751
  inferstep time: 0.584191
  node_find time: 0.001129
  node_crea time: 0.09463
    pred time: 0.041002
    thmpred time: 0.000003
    mc time: 0.035952
    inst time: 0.0
Proof found: simpLib.SIMP_TAC numLib.std_ss [(DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def"), (DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def")] THEN BasicProvers.SRW_TAC [] [optionTheory.some_def, optionTheory.some_elim, optionTheory.some_intro, optionTheory.some_EQ, optionTheory.some_F, DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM", DB.fetch "quantHeuristics" "GUESS_RULES_COND", listTheory.INDEX_FIND_def, whileTheory.OWHILE_THM, listTheory.FILTER, listTheory.dropWhile_def, whileTheory.ITERATION, whileTheory.WHILE, whileTheory.OLEAST_def, optionTheory.SOME_APPLY_PERMUTE, optionTheory.option_CLAUSES] THENL
  [metisTools.METIS_TAC [DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM", optionTheory.some_def, pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, relationTheory.tactictoe_thm_24, DB.fetch "quantHeuristics" "SIMPLE_GUESS_UEXISTS_THM", DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF", DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_ALT_DEF", pred_setTheory.LINV_OPT_def, listTheory.SET_TO_LIST_primitive_def, relationTheory.the_fun_def, ind_typeTheory.ZBOT, DB.fetch "quantHeuristics" "GUESS_RULES_EQUIV", DB.fetch "quantHeuristics" "GUESSES_NEG_REWRITE", DB.fetch "quantHeuristics" "GUESS_RULES_COND", DB.fetch "quantHeuristics" "GUESS_RULES_EXISTS___NEW_FV_1"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, relationTheory.tactictoe_thm_24, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1", DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM", DB.fetch "quantHeuristics" "SIMPLE_GUESS_UEXISTS_THM", DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF", DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_ALT_DEF"],
  metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_37, relationTheory.tactictoe_thm_24, DB.fetch "quantHeuristics" "GUESS_REWRITES", DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES", DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def", DB.fetch "quantHeuristics" "GUESS_POINT_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def", DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_THM", DB.fetch "quantHeuristics" "GUESS_EXISTS_def", DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_def", DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1", DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM", DB.fetch "quantHeuristics" "SIMPLE_GUESS_UEXISTS_THM", DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF", DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_ALT_DEF"]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.151261

SIMPLE_GUESS_EXISTS_EQ_1
proof length: 1
proof time: 0.000728
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.121112
  inferstep time: 0.110232
  node_find time: 0.000147
  node_crea time: 0.007381
    pred time: 0.002538
    thmpred time: 0.0
    mc time: 0.005551
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SOME_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_UEXISTS_THM" , pairTheory.LEX_DEF , sumTheory.tactictoe_thm_2 , sumTheory.tactictoe_thm_4 , sumTheory.tactictoe_thm_6 , sumTheory.tactictoe_thm_7 , listTheory.EL_LUPDATE , DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_EXISTS_GAP" , sumTheory.IS_SUM_REP , sumTheory.INL_DEF , sumTheory.INR_DEF ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.006437

SIMPLE_GUESS_EXISTS_EQ_2
proof length: 1
proof time: 0.070833
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.08832
  inferstep time: 0.077378
  node_find time: 0.000095
  node_crea time: 0.007861
    pred time: 0.00293
    thmpred time: 0.000001
    mc time: 0.005672
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SOME_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_UEXISTS_THM" , pairTheory.LEX_DEF , sumTheory.tactictoe_thm_2 , sumTheory.tactictoe_thm_4 , sumTheory.tactictoe_thm_6 , sumTheory.tactictoe_thm_7 , listTheory.EL_LUPDATE , DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_EXISTS_GAP" , sumTheory.IS_SUM_REP , sumTheory.INL_DEF])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.00188

SIMPLE_GUESS_EXISTS_EQ_T
proof length: 1
proof time: 0.000787
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.120985
  inferstep time: 0.109863
  node_find time: 0.000144
  node_crea time: 0.007593
    pred time: 0.002546
    thmpred time: 0.0
    mc time: 0.005966
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_2" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SOME_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_UEXISTS_THM" , optionTheory.option_CLAUSES , pred_setTheory.GSPECIFICATION , pred_setTheory.GSPECIFICATION_applied , DB.fetch "quantHeuristics" "GUESS_POINT_THM" , optionTheory.IS_SOME_DEF , optionTheory.IS_NONE_DEF , ConseqConvTheory.AND_CLAUSES_TX , ConseqConvTheory.AND_CLAUSES_XT ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.006926

SIMPLE_GUESS_FORALL_NEG
proof length: 1
proof time: 0.000523
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.124466
  inferstep time: 0.111375
  node_find time: 0.000147
  node_crea time: 0.009086
    pred time: 0.003016
    thmpred time: 0.0
    mc time: 0.007129
    inst time: 0.0
Proof found: (boolLib.ASM_REWRITE_TAC [ DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SOME_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_UEXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_2" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_T" , sumTheory.tactictoe_thm_4 , sumTheory.tactictoe_thm_7 , sumTheory.IS_SUM_REP , sumTheory.INR_DEF ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.006562

SIMPLE_GUESS_EXISTS_NEG
proof length: 1
proof time: 0.00216
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.126848
  inferstep time: 0.114123
  node_find time: 0.000218
  node_crea time: 0.008699
    pred time: 0.002889
    thmpred time: 0.0
    mc time: 0.006764
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SOME_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_UEXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_2" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_T" , sumTheory.tactictoe_thm_4 , sumTheory.tactictoe_thm_7 , sumTheory.IS_SUM_REP ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.005337

SIMPLE_GUESS_FORALL_OR_1
proof length: 1
proof time: 0.002242
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.134842
  inferstep time: 0.118138
  node_find time: 0.000159
  node_crea time: 0.010534
    pred time: 0.003262
    thmpred time: 0.0
    mc time: 0.010186
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_def" , DB.fetch "quantHeuristics" "GUESS_RULES_DISJ" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUIV" , listTheory.EVERY_FILTER , listTheory.EVERY_FILTER_IMP , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" , DB.fetch "quantHeuristics" "GUESS_REWRITES" , DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def" , DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1" , DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM3" , DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES" , DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def" ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.002745

SIMPLE_GUESS_FORALL_OR_2
proof length: 1
proof time: 0.002543
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.146951
  inferstep time: 0.130765
  node_find time: 0.000202
  node_crea time: 0.009551
    pred time: 0.00318
    thmpred time: 0.0
    mc time: 0.009243
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_OR_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_ALT_DEF" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUIV" , listTheory.EVERY_FILTER , listTheory.EVERY_FILTER_IMP , DB.fetch "quantHeuristics" "GUESS_RULES_DISJ" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" , DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def" , DB.fetch "quantHeuristics" "GUESS_REWRITES" , DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM1" , DB.fetch "quantHeuristics" "GUESSES_UEXISTS_THM3" , DB.fetch "quantHeuristics" "GUESS_EXISTS_FORALL_REWRITES" ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.002307

SIMPLE_GUESS_EXISTS_AND_1
proof length: 1
proof time: 0.001862
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.13002
  inferstep time: 0.118804
  node_find time: 0.000134
  node_crea time: 0.007425
    pred time: 0.00238
    thmpred time: 0.0
    mc time: 0.006249
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "GUESS_RULES_CONJ" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_OR_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_OR_2" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUIV" , listTheory.EVERY_FILTER , listTheory.EVERY_FILTER_IMP , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SOME_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_UEXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_2" ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.005713

SIMPLE_GUESS_EXISTS_AND_2
proof length: 1
proof time: 0.00244
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.124489
  inferstep time: 0.113534
  node_find time: 0.000138
  node_crea time: 0.007351
    pred time: 0.002441
    thmpred time: 0.0
    mc time: 0.006009
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_AND_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_NEG" , DB.fetch "quantHeuristics" "GUESS_RULES_CONJ" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_OR_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_OR_2" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUIV" , listTheory.EVERY_FILTER , listTheory.EVERY_FILTER_IMP , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SOME_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_UEXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_1" ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.002104

SIMPLE_GUESS_EXISTS_EXISTS
proof length: 1
proof time: 0.001246
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.135141
  inferstep time: 0.124633
  node_find time: 0.000126
  node_crea time: 0.007435
    pred time: 0.002489
    thmpred time: 0.000001
    mc time: 0.005423
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" ) , ( DB.fetch "quantHeuristics" "GUESS_EXISTS_GAP_def" ) ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.006861

SIMPLE_GUESS_EXISTS_FORALL
proof length: 1
proof time: 0.005211
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.14004
  inferstep time: 0.129675
  node_find time: 0.000123
  node_crea time: 0.007274
    pred time: 0.002638
    thmpred time: 0.0
    mc time: 0.005112
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EXISTS" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SOME_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_UEXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_AND_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_AND_2" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_2" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_T" , listTheory.FOLDL2_ind , listTheory.MAP2_ind ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.019248

SIMPLE_GUESS_FORALL_EXISTS
proof length: 1
proof time: 0.001671
Statistics
  infstep : 3
  nodes   : 2
  maxdepth: 1
Time: 0.159305
  inferstep time: 0.137637
  node_find time: 0.000325
  node_crea time: 0.016288
    pred time: 0.005849
    thmpred time: 0.0
    mc time: 0.010689
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC numLib.std_ss [ ( DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_def" ) , ( DB.fetch "quantHeuristics" "GUESS_FORALL_GAP_def" ) ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.00257

SIMPLE_GUESS_FORALL_FORALL
proof length: 1
proof time: 0.003755
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.129789
  inferstep time: 0.117556
  node_find time: 0.000155
  node_crea time: 0.008769
    pred time: 0.003442
    thmpred time: 0.0
    mc time: 0.005806
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_FORALL" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_EXISTS" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_OR_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_OR_2" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EXISTS" , listTheory.FOLDL2_ind , listTheory.MAP2_ind , numpairTheory.tactictoe_thm_4 , listTheory.EVERY2_LUPDATE_same , pairTheory.LEX_CONG , sumTheory.INR_neq_INL ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.002936

SIMPLE_GUESS_FORALL_IMP_1
proof length: 1
proof time: 0.001718
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.126819
  inferstep time: 0.114627
  node_find time: 0.000153
  node_crea time: 0.008714
    pred time: 0.003146
    thmpred time: 0.000001
    mc time: 0.006204
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "GUESS_RULES_IMP" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_AND_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_AND_2" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_OR_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_OR_2" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_EXISTS" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_FORALL" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_ALT_DEF" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUIV" , listTheory.EVERY_FILTER , listTheory.EVERY_FILTER_IMP ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.002329

SIMPLE_GUESS_FORALL_IMP_2
proof length: 1
proof time: 0.002168
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.13909
  inferstep time: 0.127246
  node_find time: 0.000143
  node_crea time: 0.007915
    pred time: 0.002602
    thmpred time: 0.0
    mc time: 0.006449
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_IMP_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_OR_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_OR_2" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_NEG" , DB.fetch "quantHeuristics" "GUESS_RULES_IMP" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_EXISTS" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_FORALL" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_NEG" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_FORALL_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_AND_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_AND_2" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUIV" , listTheory.EVERY_FILTER , listTheory.EVERY_FILTER_IMP ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.004632

SIMPLE_GUESS_EXISTS_EQ_FUN
proof length: 1
proof time: 0.002218
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.150795
  inferstep time: 0.127314
  node_find time: 0.000223
  node_crea time: 0.015443
    pred time: 0.005602
    thmpred time: 0.000001
    mc time: 0.012891
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EQ_2" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_EXISTS_POINT" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUATION_FORALL_POINT" , DB.fetch "quantHeuristics" "GUESS_RULES_EQUIV" , listTheory.MAP_EQ_EVERY2 , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SELECT_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_SOME_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_UEXISTS_THM" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_EXISTS" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_FORALL" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_ALT_DEF" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_def" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_AND_1" , DB.fetch "quantHeuristics" "SIMPLE_GUESS_EXISTS_AND_2" ])
Org tac number: 0
Original proof time: 0.0
Replaying proof: 0.004559

IS_REMOVABLE_QUANT_FUN___EXISTS_THM
proof length: 2
proof time: 0.007649
Statistics
  infstep : 133
  nodes   : 13
  maxdepth: 2
Time: 1.262975
  inferstep time: 1.079424
  node_find time: 0.011729
  node_crea time: 0.1272
    pred time: 0.042294
    thmpred time: 0.000003
    mc time: 0.055622
    inst time: 0.0
Proof found: boolLib.REWRITE_TAC [DB.fetch "quantHeuristics" "IS_REMOVABLE_QUANT_FUN_def", oneTheory.tactictoe_thm_0, ConseqConvTheory.IMP_CONG_cond, ConseqConvTheory.IMP_CONG_cond_simple, ConseqConvTheory.IMP_CONG_conj_strengthen, ConseqConvTheory.IMP_CONG_conj_weaken, ConseqConvTheory.IMP_CONG_disj_strengthen, ConseqConvTheory.IMP_CONG_disj_weaken, ConseqConvTheory.IMP_CONG_imp_strengthen, ConseqConvTheory.IMP_CONG_imp_weaken, ConseqConvTheory.IMP_CONG_simple_imp_strengthen, ConseqConvTheory.IMP_CONG_simple_imp_weaken, listTheory.SNOC, pred_setTheory.IN_DELETE_EQ, ind_typeTheory.ISO_USAGE, pred_setTheory.BIJ_IFF_INV] THEN metisLib.METIS_TAC []
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.257824

IS_REMOVABLE_QUANT_FUN___FORALL_THM
proof length: 2
proof time: 0.006928
Statistics
  infstep : 4
  nodes   : 3
  maxdepth: 2
Time: 0.24946
  inferstep time: 0.219511
  node_find time: 0.000324
  node_crea time: 0.023584
    pred time: 0.007246
    thmpred time: 0.0
    mc time: 0.016529
    inst time: 0.0
Proof found: boolLib.REWRITE_TAC [DB.fetch "quantHeuristics" "IS_REMOVABLE_QUANT_FUN___EXISTS_THM", DB.fetch "quantHeuristics" "IS_REMOVABLE_QUANT_FUN_def", oneTheory.tactictoe_thm_0, ConseqConvTheory.IMP_CONG_cond, ConseqConvTheory.IMP_CONG_cond_simple, ConseqConvTheory.IMP_CONG_conj_strengthen, ConseqConvTheory.IMP_CONG_conj_weaken, ConseqConvTheory.IMP_CONG_disj_strengthen, ConseqConvTheory.IMP_CONG_disj_weaken, ConseqConvTheory.IMP_CONG_imp_strengthen, ConseqConvTheory.IMP_CONG_imp_weaken, ConseqConvTheory.IMP_CONG_simple_imp_strengthen, ConseqConvTheory.IMP_CONG_simple_imp_weaken, listTheory.SNOC, pred_setTheory.IN_DELETE_EQ, ind_typeTheory.ISO_USAGE] THEN BasicProvers.PROVE_TAC [(DB.fetch "relation" "RTC_RULES")]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.036598

PAIR_EQ_EXPAND
proof length: 2
proof time: 0.002492
Statistics
  infstep : 53
  nodes   : 7
  maxdepth: 3
Time: 0.695795
  inferstep time: 0.545847
  node_find time: 0.004887
  node_crea time: 0.111508
    pred time: 0.043662
    thmpred time: 0.000004
    mc time: 0.059842
    inst time: 0.0
Proof found: BasicProvers.Cases_on [HolKernel.QUOTE " (*#loc 1 59519*)X"] THEN BasicProvers.SRW_TAC [] [pairTheory.FST, pairTheory.SND, arithmeticTheory.DIVMOD_DEF, listTheory.ZIP_MAP, arithmeticTheory.DIVMOD_CALC, listTheory.MAP_ZIP, pairTheory.PAIR_FST_SND_EQ, pred_setTheory.CROSS_DEF, numeralTheory.DIVMOD_NUMERAL_CALC, listTheory.UNZIP, pairTheory.PAIR, pairTheory.PAIR_FUN_THM, pairTheory.PAIR_MAP, pairTheory.SWAP_def, listTheory.UNZIP_MAP, DB.fetch "quantHeuristics" "GUESS_RULES_EXISTS___NEW_FV"]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.025017

PAIR_EQ_SIMPLE_EXPAND
proof length: 2
proof time: 0.005734
Statistics
  infstep : 8
  nodes   : 3
  maxdepth: 2
Time: 0.307675
  inferstep time: 0.271277
  node_find time: 0.000711
  node_crea time: 0.024837
    pred time: 0.007944
    thmpred time: 0.000001
    mc time: 0.018344
    inst time: 0.0
Proof found: BasicProvers.Cases_on [HolKernel.QUOTE " (*#loc 1 59519*)X"] THEN BasicProvers.SRW_TAC [] [DB.fetch "pred_set" "INTER_DEF", DB.fetch "pred_set" "IN_INTER", DB.fetch "pred_set" "INTER_applied", DB.fetch "pred_set" "UNION_DEF", DB.fetch "pred_set" "tactictoe_thm_0", DB.fetch "pred_set" "GSPECIFICATION", DB.fetch "pred_set" "EXTENSION", DB.fetch "pred_set" "IN_UNION", DB.fetch "pred_set" "SUBSET_DEF", DB.fetch "pred_set" "NOT_EQUAL_SETS", DB.fetch "pred_set" "UNION_applied", DB.fetch "pred_set" "SET_MINIMUM", relationTheory.RRESTRICT_DEF, relationTheory.IN_RDOM_RRESTRICT, DB.fetch "pred_set" "NUM_SET_WOP", DB.fetch "pred_set" "EQ_UNIV"]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.037548

IS_SOME_EQ_NOT_NONE
proof length: 4
proof time: 0.000364
Statistics
  infstep : 24
  nodes   : 8
  maxdepth: 3
Time: 0.881408
  inferstep time: 0.764175
  node_find time: 0.002532
  node_crea time: 0.07783
    pred time: 0.031931
    thmpred time: 0.000005
    mc time: 0.050717
    inst time: 0.0
Proof found: boolLib.REPEAT boolLib.STRIP_TAC THEN let
  fun OPTION_CASES_TAC t = boolLib.STRUCT_CASES_TAC ( boolLib.ISPEC t ( ( DB.fetch "option" "option_nchotomy" ) ) )
in
  OPTION_CASES_TAC (Parse.-- [HolKernel.QUOTE " (*#loc 1 5700*)(x :'a option)"] Parse.--) THENL
  [boolLib.REWRITE_TAC [optionTheory.option_CLAUSES, optionTheory.IS_SOME_DEF, optionTheory.NOT_IS_SOME_EQ_NONE, optionTheory.IF_NONE_EQUALS_OPTION, optionTheory.OPTION_MAP2_DEF, optionTheory.IS_SOME_EXISTS, optionTheory.IS_SOME_MAP, optionTheory.option_case_compute, optionTheory.IS_SOME_BIND, optionTheory.NOT_SOME_NONE, optionTheory.NOT_NONE_SOME, optionTheory.IF_EQUALS_OPTION, whileTheory.OWHILE_def, optionTheory.OPTION_GUARD_EQ_THM, optionTheory.some_elim, optionTheory.some_intro],
  boolLib.REWRITE_TAC [optionTheory.option_CLAUSES, optionTheory.IS_SOME_DEF, optionTheory.IF_NONE_EQUALS_OPTION, optionTheory.OPTION_MAP2_DEF, optionTheory.IS_SOME_EXISTS, optionTheory.NOT_IS_SOME_EQ_NONE, optionTheory.IS_SOME_MAP, optionTheory.option_case_compute, optionTheory.IS_SOME_BIND, ConseqConvTheory.IMP_CONG_cond, ConseqConvTheory.IMP_CONG_disj_strengthen, ConseqConvTheory.IMP_CONG_disj_weaken, ConseqConvTheory.IMP_CONG_imp_strengthen, ConseqConvTheory.IMP_CONG_imp_weaken, optionTheory.NOT_SOME_NONE, optionTheory.NOT_NONE_SOME]]
end
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.00548

ISL_exists
proof length: 3
proof time: 0.171578
Statistics
  infstep : 19
  nodes   : 9
  maxdepth: 3
Time: 0.720592
  inferstep time: 0.618478
  node_find time: 0.001502
  node_crea time: 0.070915
    pred time: 0.024407
    thmpred time: 0.000002
    mc time: 0.044564
    inst time: 0.0
Proof found: Q.SPEC_THEN [HolKernel.QUOTE " (*#loc 1 10534*)x"] boolLib.STRUCT_CASES_TAC (DB.fetch "sum" "sum_CASES") THENL [metisTools.METIS_TAC [sumTheory.ISL, sumTheory.INL, sumTheory.SUM_MAP, sumTheory.NOT_ISL_ISR, sumTheory.NOT_ISR_ISL, sumTheory.ISL_OR_ISR, sumTheory.sum_CASES, sumTheory.EXISTS_SUM, sumTheory.sum_Axiom, sumTheory.OUTL, sumTheory.INR_INL_11, sumTheory.FORALL_SUM, sumTheory.SUM_MAP_def, sumTheory.tactictoe_thm_9, optionTheory.SOME_DEF, sumTheory.INL_11], metisTools.METIS_TAC [sumTheory.ISL, sumTheory.SUM_MAP, sumTheory.INL, sumTheory.NOT_ISL_ISR, sumTheory.NOT_ISR_ISL, sumTheory.ISL_OR_ISR, sumTheory.sum_CASES, sumTheory.EXISTS_SUM, sumTheory.sum_Axiom, sumTheory.INR_INL_11, sumTheory.FORALL_SUM, sumTheory.tactictoe_thm_9, sumTheory.SUM_ALL_def, sumTheory.cond_sum_expand, sumTheory.sum_distinct, sumTheory.sum_case_cong]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.028331

ISR_exists
proof length: 3
proof time: 0.181771
Statistics
  infstep : 6
  nodes   : 4
  maxdepth: 2
Time: 0.329817
  inferstep time: 0.276587
  node_find time: 0.000636
  node_crea time: 0.038063
    pred time: 0.014124
    thmpred time: 0.0
    mc time: 0.025626
    inst time: 0.0
Proof found: boolLib.STRIP_ASSUME_TAC (HolKernel.SPEC (Parse.-- [HolKernel.QUOTE " (*#loc 1 8383*)x:('a,'b)sum"] Parse.--) (DB.fetch "sum" "sum_CASES")) THEN (metisTools.METIS_TAC [sumTheory.INR, sumTheory.NOT_ISL_ISR, sumTheory.NOT_ISR_ISL, sumTheory.ISL_OR_ISR, sumTheory.ISR, pred_setTheory.tactictoe_thm_44, pred_setTheory.tactictoe_thm_49, sumTheory.sum_CASES, sumTheory.EXISTS_SUM, sumTheory.sum_Axiom, sumTheory.OUTR, sumTheory.FORALL_SUM, sumTheory.tactictoe_thm_9, sumTheory.INR_11, sumTheory.INR_INL_11, sumTheory.SUM_ALL_def])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.027335

INL_NEQ_ELIM
proof length: 3
proof time: 0.163622
Statistics
  infstep : 4
  nodes   : 4
  maxdepth: 2
Time: 0.315166
  inferstep time: 0.275368
  node_find time: 0.000354
  node_crea time: 0.027062
    pred time: 0.011838
    thmpred time: 0.000001
    mc time: 0.019493
    inst time: 0.0
Proof found: boolLib.REPEAT boolLib.STRIP_TAC THEN (metisTools.METIS_TAC [sumTheory.NOT_ISL_ISR, sumTheory.NOT_ISR_ISL, sumTheory.INR, DB.fetch "quantHeuristics" "ISR_exists", sumTheory.ISL_OR_ISR, sumTheory.ISR, DB.fetch "quantHeuristics" "ISL_exists", sumTheory.sum_distinct, sumTheory.cond_sum_expand, sumTheory.sum_distinct1, sumTheory.ISL, sumTheory.INR_neq_INL, sumTheory.sum_CASES, sumTheory.INR_INL_11, sumTheory.sum_Axiom, sumTheory.FORALL_SUM])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.041704

INR_NEQ_ELIM
proof length: 3
proof time: 0.149012
Statistics
  infstep : 5
  nodes   : 4
  maxdepth: 2
Time: 0.286366
  inferstep time: 0.253998
  node_find time: 0.000343
  node_crea time: 0.019335
    pred time: 0.006886
    thmpred time: 0.000001
    mc time: 0.019021
    inst time: 0.0
Proof found: boolLib.REPEAT boolLib.STRIP_TAC THEN (metisTools.METIS_TAC [sumTheory.SUM_MAP, sumTheory.NOT_ISL_ISR, sumTheory.NOT_ISR_ISL, sumTheory.INL, DB.fetch "quantHeuristics" "ISL_exists", sumTheory.ISL_OR_ISR, sumTheory.ISL, DB.fetch "quantHeuristics" "ISR_exists", sumTheory.sum_distinct, sumTheory.cond_sum_expand, sumTheory.sum_distinct1, sumTheory.ISR, sumTheory.INR_DEF, sumTheory.INR_neq_INL, sumTheory.tactictoe_thm_4, sumTheory.tactictoe_thm_7])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.035271

LENGTH_LE_PLUS
Statistics
  infstep : 560
  nodes   : 127
  maxdepth: 6
Time: 10.07584
  inferstep time: 8.136515
  node_find time: 0.071162
  node_crea time: 1.600562
    pred time: 0.544307
    thmpred time: 0.000032
    mc time: 0.6713
    inst time: 0.0
Proof status: Time Out
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.064992

LENGTH_LE_NUM
proof length: 1
proof time: 0.00285
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.148108
  inferstep time: 0.132427
  node_find time: 0.000163
  node_crea time: 0.009787
    pred time: 0.003328
    thmpred time: 0.0
    mc time: 0.009096
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC ( numLib.arith_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close listSimps.LIST_ss ) [ arithmeticTheory.LESS_EQ_EXISTS , listTheory.LENGTH_EQ_NUM , boolLib.GSYM boolLib.LEFT_EXISTS_AND_THM , boolLib.GSYM boolLib.RIGHT_EXISTS_AND_THM ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.0094

LIST_LENGTH_COMPARE_1
proof length: 6
proof time: 0.011309
Statistics
  infstep : 79
  nodes   : 26
  maxdepth: 4
Time: 2.276054
  inferstep time: 1.643053
  node_find time: 0.00958
  node_crea time: 0.514588
    pred time: 0.124316
    thmpred time: 0.000011
    mc time: 0.326319
    inst time: 0.0
Proof found: boolLib.REWRITE_TAC [(DB.fetch "arithmetic" "GREATER_EQ")] THEN BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL
  [BasicProvers.SRW_TAC [] [listTheory.LENGTH, numeralTheory.numeral_distrib, arithmeticTheory.NOT_GREATER, arithmeticTheory.GREATER_DEF, arithmeticTheory.SUB_LEFT_GREATER, arithmeticTheory.EXISTS_GREATEST, arithmeticTheory.GREATER_OR_EQ, arithmeticTheory.SUB_RIGHT_GREATER, listTheory.LENGTH_EQ_NUM_compute, listTheory.LENGTH_TL, listTheory.DROP_def, listTheory.DROP_compute, listTheory.LUPDATE_compute, listTheory.TAKE_compute, listTheory.TAKE_def, listTheory.list_size_def] THEN
  boolLib.REWRITE_TAC [numeralTheory.numeral_distrib, numeralTheory.numeral_lt, listTheory.TAKE_cons, listTheory.DROP_cons, listTheory.LENGTH_TL, arithmeticTheory.EXP_BASE_LE_IFF, arithmeticTheory.EXP_BASE_LE_MONO, arithmeticTheory.tactictoe_thm_59, arithmeticTheory.tactictoe_thm_60, arithmeticTheory.MULT_INCREASES, arithmeticTheory.DIV_LE_X, arithmeticTheory.X_LT_DIV, arithmeticTheory.LE_LT1, numpairTheory.invtri_unique, numpairTheory.invtri_upper, arithmeticTheory.tactictoe_thm_28],
  BasicProvers.SRW_TAC [numSimps.ARITH_ss] [listTheory.LENGTH, numeralTheory.numeral_distrib, arithmeticTheory.NOT_GREATER, arithmeticTheory.GREATER_DEF, arithmeticTheory.SUB_LEFT_GREATER, arithmeticTheory.EXISTS_GREATEST, arithmeticTheory.GREATER_OR_EQ, arithmeticTheory.SUB_RIGHT_GREATER, listTheory.LENGTH_EQ_NUM_compute, listTheory.DROP_compute, listTheory.TAKE_compute, listTheory.LEN_DEF, listTheory.LUPDATE_compute, listTheory.LENGTH_EQ_NUM, listTheory.DROP_def, listTheory.TAKE_def]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.290017

LIST_LENGTH_COMPARE_SUC
proof length: 3
proof time: 0.027106
Statistics
  infstep : 40
  nodes   : 14
  maxdepth: 3
Time: 1.147827
  inferstep time: 0.899081
  node_find time: 0.003604
  node_crea time: 0.198706
    pred time: 0.088291
    thmpred time: 0.000004
    mc time: 0.08611
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 53169*)l"] THENL [simpLib.SIMP_TAC (numLib.arith_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close listSimps.LIST_ss) [arithmeticTheory.LESS_EQ_EXISTS, listTheory.LENGTH_EQ_NUM, boolLib.GSYM boolLib.LEFT_EXISTS_AND_THM, boolLib.GSYM boolLib.RIGHT_EXISTS_AND_THM], BasicProvers.SRW_TAC [numSimps.ARITH_ss] [(DB.fetch "list" "DROP_def")]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.008758
Replaying proof: 0.000444
Replaying proof: 0.002062
Replaying proof: 0.003512
Replaying proof: 0.005719
Replaying proof: 0.008249
Replaying proof: 0.010804
Replaying proof: 0.014215
Replaying proof: 0.019537
Replaying proof: 0.020949
Replaying proof: 0.00079
Replaying proof: 0.001831
Replaying proof: 0.004873
Replaying proof: 0.006685
Replaying proof: 0.008891
Replaying proof: 0.010143
Replaying proof: 0.014062
Replaying proof: 0.017554
Replaying proof: 0.021081

SOME_THE_EQ
proof length: 3
proof time: 0.166753
Statistics
  infstep : 5
  nodes   : 5
  maxdepth: 2
Time: 0.332323
  inferstep time: 0.286996
  node_find time: 0.000527
  node_crea time: 0.034913
    pred time: 0.012321
    thmpred time: 0.0
    mc time: 0.021717
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THENL [metisTools.METIS_TAC [optionTheory.IS_SOME_EXISTS, optionTheory.option_CLAUSES, optionTheory.NOT_IS_SOME_EQ_NONE, optionTheory.OPTION_MAP2_DEF, optionTheory.option_case_compute, optionTheory.IF_NONE_EQUALS_OPTION, DB.fetch "quantHeuristics" "IS_SOME_EQ_NOT_NONE", optionTheory.IS_SOME_MAP, optionTheory.IS_SOME_BIND, optionTheory.option_nchotomy, optionTheory.FORALL_OPTION, optionTheory.OPTION_ALL_CONG, optionTheory.EXISTS_OPTION, optionTheory.OPTION_ALL_MONO, optionTheory.IS_SOME_DEF, arithmeticTheory.tactictoe_thm_11], metisTools.METIS_TAC [optionTheory.option_CLAUSES, optionTheory.OPTION_MAP2_DEF, optionTheory.option_case_compute, optionTheory.option_nchotomy, optionTheory.THE_DEF, optionTheory.IS_SOME_EXISTS, optionTheory.FORALL_OPTION, optionTheory.OPTION_ALL_CONG, optionTheory.EXISTS_OPTION, pred_setTheory.LINV_LO, pred_setTheory.RINV_LO, optionTheory.OPTION_ALL_MONO, arithmeticTheory.tactictoe_thm_11, optionTheory.option_case_def, optionTheory.SOME_11, optionTheory.NOT_NONE_SOME]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.032016

SOME_THE_EQ_SYM
proof length: 3
proof time: 0.13209
Statistics
  infstep : 5
  nodes   : 4
  maxdepth: 2
Time: 0.345239
  inferstep time: 0.316881
  node_find time: 0.00041
  node_crea time: 0.017659
    pred time: 0.006625
    thmpred time: 0.0
    mc time: 0.01443
    inst time: 0.0
Proof found: BasicProvers.Cases THENL [BasicProvers.SRW_TAC [] [optionTheory.option_CLAUSES, optionTheory.IS_SOME_DEF, optionTheory.OPTION_MAP2_DEF, DB.fetch "quantHeuristics" "SOME_THE_EQ", optionTheory.option_case_compute, optionTheory.THE_DEF, pred_setTheory.LINV_LO, pred_setTheory.RINV_LO, optionTheory.IF_NONE_EQUALS_OPTION, optionTheory.NOT_IS_SOME_EQ_NONE, DB.fetch "quantHeuristics" "IS_SOME_EQ_NOT_NONE", optionTheory.IS_SOME_EXISTS, optionTheory.IS_SOME_MAP, optionTheory.IS_SOME_BIND, optionTheory.option_nchotomy, optionTheory.NOT_NONE_SOME], metisTools.METIS_TAC [optionTheory.option_CLAUSES, optionTheory.THE_DEF, optionTheory.IS_SOME_DEF, optionTheory.OPTION_MAP2_DEF, DB.fetch "quantHeuristics" "SOME_THE_EQ", optionTheory.option_case_compute, pred_setTheory.LINV_LO, pred_setTheory.RINV_LO, optionTheory.IS_SOME_EXISTS, optionTheory.IF_NONE_EQUALS_OPTION, optionTheory.NOT_IS_SOME_EQ_NONE, DB.fetch "quantHeuristics" "IS_SOME_EQ_NOT_NONE", optionTheory.IS_SOME_MAP, optionTheory.IS_SOME_BIND, optionTheory.option_nchotomy, optionTheory.SOME_11]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.04001

FST_PAIR_EQ
proof length: 1
proof time: 0.000275
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.124398
  inferstep time: 0.11023
  node_find time: 0.000169
  node_crea time: 0.009631
    pred time: 0.003044
    thmpred time: 0.0
    mc time: 0.008069
    inst time: 0.0
Proof found: (boolLib.REWRITE_TAC [ DB.fetch "quantHeuristics" "PAIR_EQ_SIMPLE_EXPAND" , listTheory.ZIP_MAP , pairTheory.PAIR , pairTheory.ELIM_PFORALL , pairTheory.ELIM_PEXISTS , pairTheory.LAMBDA_PROD , pairTheory.PAIR_FUN_THM , pairTheory.PAIR_MAP , pred_setTheory.CROSS_DEF , listTheory.UNZIP , pairTheory.SWAP_def , DB.fetch "quantHeuristics" "PAIR_EQ_EXPAND" , pairTheory.PAIR_FST_SND_EQ , pairTheory.PROD_ALL_def , pairTheory.pair_CASE_def , listTheory.MEM_ZIP_MEM_MAP ])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.026313

SND_PAIR_EQ
proof length: 1
proof time: 0.000322
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.157955
  inferstep time: 0.138847
  node_find time: 0.000163
  node_crea time: 0.013576
    pred time: 0.005999
    thmpred time: 0.0
    mc time: 0.009814
    inst time: 0.0
Proof found: (boolLib.REWRITE_TAC [ DB.fetch "quantHeuristics" "PAIR_EQ_SIMPLE_EXPAND" , pairTheory.ELIM_PFORALL , pairTheory.ELIM_PEXISTS , pairTheory.LAMBDA_PROD , listTheory.ZIP_MAP , pred_setTheory.CROSS_DEF , DB.fetch "quantHeuristics" "PAIR_EQ_EXPAND" , pairTheory.PAIR_FUN_THM , pairTheory.PAIR_MAP , DB.fetch "quantHeuristics" "FST_PAIR_EQ" , pairTheory.PAIR , listTheory.UNZIP , pairTheory.SWAP_def , pairTheory.PAIR_FST_SND_EQ , pairTheory.PROD_ALL_def , pairTheory.pair_CASE_def ])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.024724

FST_PAIR_EQ_SYM
proof length: 1
proof time: 0.001443
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.139693
  inferstep time: 0.115599
  node_find time: 0.000276
  node_crea time: 0.018634
    pred time: 0.006498
    thmpred time: 0.000001
    mc time: 0.012775
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "FST_PAIR_EQ" , DB.fetch "quantHeuristics" "PAIR_EQ_SIMPLE_EXPAND" , listTheory.ZIP_MAP , pairTheory.PAIR , pairTheory.ELIM_PFORALL , pairTheory.ELIM_PEXISTS , pairTheory.LAMBDA_PROD , pairTheory.PAIR_FUN_THM , pairTheory.PAIR_MAP , pred_setTheory.CROSS_DEF , DB.fetch "quantHeuristics" "SND_PAIR_EQ" , listTheory.UNZIP , pairTheory.SWAP_def , DB.fetch "quantHeuristics" "PAIR_EQ_EXPAND" , pairTheory.PAIR_FST_SND_EQ , pairTheory.PROD_ALL_def ])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.040097

SND_PAIR_EQ_SYM
proof length: 1
proof time: 0.001198
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.13022
  inferstep time: 0.113129
  node_find time: 0.000216
  node_crea time: 0.010588
    pred time: 0.002897
    thmpred time: 0.000001
    mc time: 0.010997
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "quantHeuristics" "SND_PAIR_EQ" , DB.fetch "quantHeuristics" "PAIR_EQ_SIMPLE_EXPAND" , pairTheory.ELIM_PFORALL , pairTheory.ELIM_PEXISTS , pairTheory.LAMBDA_PROD , listTheory.ZIP_MAP , pred_setTheory.CROSS_DEF , DB.fetch "quantHeuristics" "PAIR_EQ_EXPAND" , pairTheory.PAIR_FUN_THM , pairTheory.PAIR_MAP , DB.fetch "quantHeuristics" "FST_PAIR_EQ" , DB.fetch "quantHeuristics" "FST_PAIR_EQ_SYM" , pairTheory.PAIR , listTheory.UNZIP , pairTheory.SWAP_def , pairTheory.PAIR_FST_SND_EQ ])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.036767
Bad stac: 4
