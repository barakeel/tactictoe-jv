Replaying proof: 0.000033

TAKE
proof length: 1
proof time: 0.001367
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.119857
  inferstep time: 0.109022
  node_find time: 0.000038
  node_crea time: 0.008086
    pred time: 0.003251
    thmpred time: 0.0
    mc time: 0.005731
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ boolLib.EQ_IMP_THM ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.008958

DROP
proof length: 1
proof time: 0.00159
Statistics
  infstep : 3
  nodes   : 2
  maxdepth: 1
Time: 0.123261
  inferstep time: 0.105408
  node_find time: 0.000056
  node_crea time: 0.01415
    pred time: 0.003565
    thmpred time: 0.0
    mc time: 0.006838
    inst time: 0.0
Proof found: (simpLib.SIMP_TAC ( BasicProvers.srw_ss ( ) ) [ ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.003081
Replaying proof: 0.000976

DROP_FUNPOW_TL
Statistics
  infstep : 367
  nodes   : 108
  maxdepth: 6
Time: 10.018269
  inferstep time: 7.832759
  node_find time: 0.028532
  node_crea time: 1.997449
    pred time: 0.638389
    thmpred time: 0.000038
    mc time: 0.933517
    inst time: 0.0
Proof status: Time Out
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.16899

NOT_NULL_SNOC
proof length: 3
proof time: 0.064036
Statistics
  infstep : 4
  nodes   : 4
  maxdepth: 2
Time: 0.215628
  inferstep time: 0.18891
  node_find time: 0.000097
  node_crea time: 0.017166
    pred time: 0.007955
    thmpred time: 0.000001
    mc time: 0.014481
    inst time: 0.0
Proof found: BasicProvers.Cases_on [HolKernel.QUOTE " (*#loc 1 18878*)l"] THENL [metisTools.METIS_TAC [listTheory.SNOC, listTheory.NULL, listTheory.FRONT_CONS_EQ_NIL, listTheory.NULL_DEF, listTheory.NULL_EQ, listTheory.NULL_FILTER, listTheory.CONS, listTheory.MAP_TL, listTheory.NOT_NULL_MEM, listTheory.NULL_LENGTH, listTheory.list_case_compute, listTheory.NULL_GENLIST, listTheory.SNOC_APPEND, listTheory.REVERSE_SNOC_DEF, listTheory.SNOC_Axiom, listTheory.tactictoe_thm_17], metisTools.METIS_TAC [listTheory.SNOC, listTheory.NULL, listTheory.NULL_DEF, listTheory.FRONT_CONS_EQ_NIL, listTheory.CONS, listTheory.NULL_FILTER, listTheory.MAP_TL, listTheory.NOT_NULL_MEM, listTheory.NULL_EQ, listTheory.NULL_LENGTH, listTheory.list_case_compute, listTheory.NULL_GENLIST, listTheory.REVERSE_SNOC_DEF, listTheory.SNOC_APPEND, listTheory.REVERSE_SNOC, listTheory.ALL_DISTINCT_SNOC]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.044983

LASTN
proof length: 1
proof time: 0.01312
Statistics
  infstep : 9
  nodes   : 5
  maxdepth: 2
Time: 0.420184
  inferstep time: 0.368487
  node_find time: 0.000286
  node_crea time: 0.043495
    pred time: 0.022494
    thmpred time: 0.000002
    mc time: 0.018171
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "rich_list" "LASTN_def" , listTheory.SNOC , listTheory.SNOC_Axiom , listTheory.tactictoe_thm_17 , listTheory.SNOC_INDUCT , listTheory.SNOC_APPEND , listTheory.SNOC_CASES , DB.fetch "rich_list" "SUFFIX_DEF" , listTheory.LENGTH_SNOC , listTheory.EL_SNOC , listTheory.ALL_DISTINCT_SNOC , listTheory.EVERY_SNOC , listTheory.EL_LENGTH_SNOC , listTheory.SUM_SNOC , listTheory.REVERSE_SNOC , listTheory.EXISTS_SNOC ])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.024131

BUTLASTN
proof length: 1
proof time: 0.013555
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.142003
  inferstep time: 0.126274
  node_find time: 0.000069
  node_crea time: 0.010459
    pred time: 0.004162
    thmpred time: 0.0
    mc time: 0.008821
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "rich_list" "BUTLASTN_def" , DB.fetch "rich_list" "LASTN" , listTheory.LENGTH_SNOC , listTheory.EL_SNOC , listTheory.SNOC , listTheory.ALL_DISTINCT_SNOC , listTheory.EVERY_SNOC , listTheory.SNOC_Axiom , listTheory.tactictoe_thm_17 , listTheory.SNOC_INDUCT , listTheory.EL_LENGTH_SNOC , listTheory.SUM_SNOC , listTheory.SNOC_APPEND , listTheory.REVERSE_SNOC , listTheory.EXISTS_SNOC , listTheory.FOLDL_SNOC ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.005921
Replaying proof: 0.000961
Replaying proof: 0.002314
Replaying proof: 0.019895

LENGTH_MAP2
proof length: 2
proof time: 0.002075
Statistics
  infstep : 7
  nodes   : 3
  maxdepth: 2
Time: 0.293366
  inferstep time: 0.23998
  node_find time: 0.000221
  node_crea time: 0.038464
    pred time: 0.013014
    thmpred time: 0.000001
    mc time: 0.032962
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [] THEN BasicProvers.SRW_TAC [] [listTheory.MAP2_MAP, listTheory.MAP2_ZIP, listTheory.MAP2_CONG, listTheory.MAP2, listTheory.tactictoe_thm_8, listTheory.tactictoe_thm_9, listTheory.tactictoe_thm_10, listTheory.tactictoe_thm_1, listTheory.MAP2_DEF, listTheory.MAP_ZIP, listTheory.FOLDL2_FOLDL, listTheory.EVERY2_EVERY, listTheory.ALL_DISTINCT_ZIP, listTheory.LENGTH_ZIP, listTheory.EL_ZIP, listTheory.ALL_DISTINCT_ZIP_SWAP]
Org tac number: 21
Original proof time: 0.0
Replaying proof: 0.561259

LENGTH_EQ
proof length: 1
proof time: 0.060482
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.094298
  inferstep time: 0.079058
  node_find time: 0.000032
  node_crea time: 0.008997
    pred time: 0.003041
    thmpred time: 0.0
    mc time: 0.010356
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.LIST_REL_LENGTH , listTheory.SUM_MAP_PLUS_ZIP , listTheory.LUPDATE_LENGTH , listTheory.LUPDATE_SNOC , listTheory.MAP_EQ_EVERY2 , listTheory.MEM_LUPDATE , listTheory.NRC_LRC , listTheory.EL_SNOC , listTheory.LENGTH_EQ_CONS , listTheory.LIST_EQ , listTheory.LIST_EQ_REWRITE , listTheory.ZIP_GENLIST , listTheory.every_zip_fst , listTheory.every_zip_snd , listTheory.lupdate_append , listTheory.MEM_EL])
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.189361

LENGTH_NOT_NULL
proof length: 1
proof time: 0.086682
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.075696
  inferstep time: 0.054397
  node_find time: 0.000065
  node_crea time: 0.016391
    pred time: 0.006415
    thmpred time: 0.000001
    mc time: 0.011799
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.LENGTH_TL , listTheory.splitAtPki_APPEND , listTheory.NOT_NIL_EQ_LENGTH_NOT_0 , listTheory.NULL_LENGTH , listTheory.CONS , listTheory.MAP_TL , listTheory.NOT_NULL_MEM , listTheory.NULL_EQ , listTheory.list_case_compute , listTheory.FRONT_CONS_EQ_NIL , DB.fetch "rich_list" "NOT_NULL_SNOC" , listTheory.NULL_FILTER , listTheory.NULL , listTheory.NULL_GENLIST , listTheory.NULL_DEF , listTheory.MEM_LUPDATE])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.030095

SNOC_EQ_LENGTH_EQ
proof length: 1
proof time: 0.001083
Statistics
  infstep : 6
  nodes   : 2
  maxdepth: 1
Time: 0.161448
  inferstep time: 0.13099
  node_find time: 0.000268
  node_crea time: 0.020728
    pred time: 0.00784
    thmpred time: 0.000001
    mc time: 0.018078
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ boolLib.EQ_IMP_THM ])
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.08106

FOLDR_SNOC
proof length: 3
proof time: 0.134677
Statistics
  infstep : 320
  nodes   : 92
  maxdepth: 5
Time: 4.907477
  inferstep time: 3.450749
  node_find time: 0.021798
  node_crea time: 1.364721
    pred time: 0.361658
    thmpred time: 0.000025
    mc time: 0.695865
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [listTheory.FOLDR, listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDR_CONG, listTheory.SNOC, listTheory.FOLDR_CONS, listTheory.SNOC_Axiom, listTheory.tactictoe_thm_17, listTheory.FOLDL_SNOC, DB.fetch "rich_list" "SUFFIX_DEF", listTheory.SNOC_INDUCT, listTheory.SNOC_APPEND, listTheory.REVERSE_SNOC_DEF, listTheory.SNOC_CASES, DB.fetch "rich_list" "IS_SUFFIX", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "NOT_NIL_SNOC"], metisTools.METIS_TAC [listTheory.FOLDR, listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDR_CONG, listTheory.SNOC, listTheory.FOLDR_CONS, listTheory.SNOC_Axiom, listTheory.tactictoe_thm_17, listTheory.FOLDL_SNOC, listTheory.REVERSE_SNOC_DEF, listTheory.REVERSE_SNOC, listTheory.SNOC_APPEND, DB.fetch "rich_list" "SNOC_REVERSE_CONS", listTheory.MAP_SNOC, listTheory.EVERY_SNOC, listTheory.EXISTS_SNOC, DB.fetch "rich_list" "SUFFIX_DEF"]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.117178

FOLDR_FOLDL
Statistics
  infstep : 831
  nodes   : 233
  maxdepth: 7
Time: 10.001196
  inferstep time: 6.525147
  node_find time: 0.100414
  node_crea time: 3.201959
    pred time: 0.460932
    thmpred time: 0.000032
    mc time: 1.956593
    inst time: 0.0
Proof status: Time Out
Org tac number: 13
Original proof time: 0.0
Replaying proof: 0.361473

LENGTH_FOLDR
proof length: 4
proof time: 0.096838
Statistics
  infstep : 55
  nodes   : 12
  maxdepth: 3
Time: 0.844407
  inferstep time: 0.695981
  node_find time: 0.002389
  node_crea time: 0.103784
    pred time: 0.035294
    thmpred time: 0.000004
    mc time: 0.080914
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [listTheory.LENGTH, listTheory.FOLDR_CONG, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_CONS, listTheory.LENGTH_EQ_NUM_compute, listTheory.FOLDR, DB.fetch "rich_list" "SUFFIX_DEF", listTheory.FOLDL_CONG, listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "FOLDR_SNOC", listTheory.FOLDR_CONS, listTheory.LENGTH_EQ_CONS, listTheory.MEM_DROP, listTheory.LENGTH_NIL, listTheory.LENGTH_EQ_NIL], boolLib.REPEAT boolLib.STRIP_TAC THEN
  BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.118446

LENGTH_FOLDL
proof length: 3
proof time: 0.10639
Statistics
  infstep : 151
  nodes   : 38
  maxdepth: 4
Time: 3.558743
  inferstep time: 3.014646
  node_find time: 0.008019
  node_crea time: 0.460728
    pred time: 0.158988
    thmpred time: 0.000008
    mc time: 0.250634
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.LENGTH, DB.fetch "rich_list" "SUFFIX_DEF", listTheory.FOLDL_CONG, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_CONS, listTheory.LENGTH_EQ_NUM_compute, listTheory.FOLDR_CONG, listTheory.FOLDL2_FOLDL, listTheory.FOLDL, listTheory.SUM_MAP_FOLDL, listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDL_SNOC, DB.fetch "rich_list" "FOLDR_FOLDL", listTheory.FOLDL_UNION_BIGUNION, listTheory.FOLDL_UNION_BIGUNION_paired], BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.LENGTH_SNOC, DB.fetch "rich_list" "SUFFIX_DEF", listTheory.FOLDL_CONG, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_CONS, listTheory.LENGTH_EQ_NUM_compute, listTheory.FOLDL_SNOC, listTheory.FOLDR_CONG, listTheory.FOLDL2_FOLDL, listTheory.FOLDL, listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "FOLDR_FOLDL", listTheory.SUM_MAP_FOLDL, listTheory.FOLDL_UNION_BIGUNION, listTheory.FOLDL_UNION_BIGUNION_paired]]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.171132

MAP_FOLDR
proof length: 1
proof time: 0.001936
Statistics
  infstep : 7
  nodes   : 4
  maxdepth: 2
Time: 0.257305
  inferstep time: 0.217694
  node_find time: 0.00028
  node_crea time: 0.031776
    pred time: 0.014136
    thmpred time: 0.0
    mc time: 0.017683
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ listTheory.FOLDR_CONS , listTheory.GENLIST_AUX , listTheory.MAP , listTheory.FOLDR_CONG , DB.fetch "rich_list" "LENGTH_FOLDR" , listTheory.SINGL_SINGL_APPLY , listTheory.FOLDR , DB.fetch "rich_list" "FOLDR_SNOC" , listTheory.FOLDL_EQ_FOLDR , DB.fetch "rich_list" "FOLDR_FOLDL" , listTheory.LENGTH_EQ_NUM , listTheory.LENGTH_EQ_NUM_compute , listTheory.LENGTH_CONS , DB.fetch "rich_list" "SUFFIX_DEF" , listTheory.FOLDL_CONG , DB.fetch "rich_list" "LENGTH_FOLDL" ])
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.105294

MAP_FOLDL
Statistics
  infstep : 662
  nodes   : 102
  maxdepth: 5
Time: 10.002472
  inferstep time: 7.885035
  node_find time: 0.075151
  node_crea time: 1.838446
    pred time: 0.583185
    thmpred time: 0.000034
    mc time: 0.792626
    inst time: 0.0
Proof status: Time Out
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.221236

FILTER_FOLDR
proof length: 4
proof time: 0.060062
Statistics
  infstep : 25
  nodes   : 8
  maxdepth: 3
Time: 0.599119
  inferstep time: 0.489644
  node_find time: 0.001239
  node_crea time: 0.089845
    pred time: 0.034423
    thmpred time: 0.000003
    mc time: 0.052723
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THEN BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL
  [metisTools.METIS_TAC [listTheory.FILTER, listTheory.FILTER_COND_REWRITE, DB.fetch "rich_list" "MAP_FOLDR", listTheory.FOLDR_CONG, DB.fetch "rich_list" "LENGTH_FOLDR", DB.fetch "rich_list" "SUFFIX_DEF", listTheory.FOLDR, listTheory.FOLDR_CONS, DB.fetch "rich_list" "FOLDR_SNOC", listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "SPLITP", listTheory.INDEX_FIND_def, listTheory.dropWhile_def, DB.fetch "rich_list" "SPLITP_AUX_def", whileTheory.ITERATION],
  BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.090026

FILTER_SNOC
proof length: 7
proof time: 0.178971
Statistics
  infstep : 32
  nodes   : 17
  maxdepth: 4
Time: 1.663028
  inferstep time: 1.430857
  node_find time: 0.001619
  node_crea time: 0.177928
    pred time: 0.073219
    thmpred time: 0.000003
    mc time: 0.092782
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [BasicProvers.SRW_TAC [] [listTheory.SNOC, listTheory.FILTER, listTheory.FILTER_COND_REWRITE, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "SUFFIX_DEF", DB.fetch "rich_list" "SPLITP", listTheory.INDEX_FIND_def, listTheory.dropWhile_def, DB.fetch "rich_list" "SPLITP_AUX_def", whileTheory.ITERATION, whileTheory.WHILE, whileTheory.OWHILE_THM, listTheory.FILTER_EQ_NIL, listTheory.FILTER_NEQ_NIL, listTheory.FILTER_EQ_CONS, listTheory.EVERY_FILTER], BasicProvers.SRW_TAC [] [(DB.fetch "pred_set" "INJ_DEF"), (DB.fetch "pred_set" "SUBSET_DEF")] THENL
  [metisTools.METIS_TAC [listTheory.FILTER_APPEND_DISTRIB, listTheory.FILTER_EQ_CONS, listTheory.SNOC_APPEND, DB.fetch "rich_list" "SPLITP_AUX_def", listTheory.FILTER_EQ_APPEND, DB.fetch "rich_list" "FILTER_FOLDR", listTheory.FILTER_COND_REWRITE, listTheory.FILTER, listTheory.FILTER_EQ_NIL, listTheory.FILTER_NEQ_NIL, listTheory.EVERY_FILTER, listTheory.FILTER_NEQ_ID, listTheory.LIST_TO_SET_FILTER, listTheory.FILTER_EQ_ID, listTheory.ALL_DISTINCT_FILTER_EL_IMP, listTheory.FILTER_REVERSE],
  metisTools.METIS_TAC [listTheory.FILTER_EQ_CONS, listTheory.SNOC_APPEND, DB.fetch "rich_list" "SPLITP_AUX_def", listTheory.FILTER_EQ_APPEND, listTheory.FILTER_APPEND_DISTRIB, DB.fetch "rich_list" "FILTER_FOLDR", listTheory.FILTER_COND_REWRITE, listTheory.FILTER, listTheory.FILTER_EQ_NIL, listTheory.FILTER_NEQ_NIL, listTheory.EVERY_FILTER, listTheory.FILTER_NEQ_ID, listTheory.LIST_TO_SET_FILTER, listTheory.FILTER_EQ_ID, listTheory.ALL_DISTINCT_FILTER_EL_IMP, listTheory.FILTER_REVERSE],
  metisTools.METIS_TAC [listTheory.FILTER_APPEND_DISTRIB, listTheory.FILTER_EQ_CONS, listTheory.SNOC_APPEND, DB.fetch "rich_list" "SPLITP_AUX_def", listTheory.FILTER_EQ_APPEND, DB.fetch "rich_list" "FILTER_FOLDR", listTheory.FILTER_COND_REWRITE, listTheory.FILTER, listTheory.FILTER_EQ_NIL, listTheory.FILTER_NEQ_NIL, listTheory.EVERY_FILTER, listTheory.FILTER_NEQ_ID, listTheory.LIST_TO_SET_FILTER, listTheory.FILTER_EQ_ID, listTheory.ALL_DISTINCT_FILTER_EL_IMP, listTheory.FILTER_REVERSE],
  metisTools.METIS_TAC [listTheory.FILTER_EQ_CONS, listTheory.SNOC_APPEND, DB.fetch "rich_list" "SPLITP_AUX_def", listTheory.FILTER_EQ_APPEND, listTheory.FILTER_APPEND_DISTRIB, DB.fetch "rich_list" "FILTER_FOLDR", listTheory.FILTER_COND_REWRITE, listTheory.FILTER, listTheory.FILTER_EQ_NIL, listTheory.FILTER_NEQ_NIL, listTheory.EVERY_FILTER, listTheory.FILTER_NEQ_ID, listTheory.LIST_TO_SET_FILTER, listTheory.FILTER_EQ_ID, listTheory.ALL_DISTINCT_FILTER_EL_IMP, listTheory.FILTER_REVERSE]]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.113879

FILTER_FOLDL
Statistics
  infstep : 579
  nodes   : 109
  maxdepth: 5
Time: 10.014122
  inferstep time: 7.886367
  node_find time: 0.06564
  node_crea time: 1.807913
    pred time: 0.591091
    thmpred time: 0.000032
    mc time: 0.789463
    inst time: 0.0
Proof status: Time Out
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.165576

FILTER_COMM
proof length: 3
proof time: 0.085693
Statistics
  infstep : 15
  nodes   : 7
  maxdepth: 3
Time: 0.545355
  inferstep time: 0.483295
  node_find time: 0.000699
  node_crea time: 0.044679
    pred time: 0.019306
    thmpred time: 0.000002
    mc time: 0.028697
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [listTheory.FILTER, listTheory.FILTER_COND_REWRITE, listTheory.MAP_EQ_f, listTheory.MAP_APPEND_MAP_EQ, listTheory.MAP_EQ_EVERY2, listTheory.ZIP_MAP, listTheory.tactictoe_thm_16, combinTheory.UPD_SAME_KEY_UNWIND, ind_typeTheory.INJF_INJ, ind_typeTheory.INJP, ind_typeTheory.INJP_INJ, optionTheory.OPTION_BIND_cong, optionTheory.OPTION_MAP2_cong, optionTheory.OPTION_MAP_CONG, pred_setTheory.SUM_IMAGE_CONG, listTheory.FILTER_EQ_NIL], BasicProvers.SRW_TAC [] []]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.154449

FILTER_IDEM
proof length: 3
proof time: 0.055357
Statistics
  infstep : 5
  nodes   : 4
  maxdepth: 2
Time: 0.318392
  inferstep time: 0.272975
  node_find time: 0.000297
  node_crea time: 0.034402
    pred time: 0.016066
    thmpred time: 0.000002
    mc time: 0.019263
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [listTheory.FILTER, listTheory.FILTER_COND_REWRITE, listTheory.FILTER_EQ_NIL, listTheory.FILTER_EQ_CONS, listTheory.FILTER_NEQ_NIL, DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "FILTER_COMM", listTheory.ALL_DISTINCT_FILTER_EL_IMP, listTheory.MEM_FILTER, listTheory.EVERY_FILTER, listTheory.FILTER_EQ_APPEND, listTheory.FILTER_EQ_ID, listTheory.FILTER_NEQ_ID, listTheory.FILTER_REVERSE, listTheory.FILTER_APPEND_DISTRIB], BasicProvers.SRW_TAC [] []]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.124107

FILTER_MAP
proof length: 4
proof time: 0.007699
Statistics
  infstep : 29
  nodes   : 8
  maxdepth: 3
Time: 0.943132
  inferstep time: 0.852099
  node_find time: 0.001705
  node_crea time: 0.066346
    pred time: 0.028413
    thmpred time: 0.000003
    mc time: 0.039146
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM], simpLib.ASM_SIMP_TAC (boolSimps.bool_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.ARITH_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.REDUCE_ss) [(DB.fetch "list" "GENLIST"), (DB.fetch "list" "MAP_SNOC"), (DB.fetch "list" "MAP"), combinTheory.o_THM] THEN
  BasicProvers.SRW_TAC [] [(DB.fetch "pred_set" "SUM_IMAGE_THM"), (DB.fetch "pred_set" "IMAGE_FINITE")]]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.132153

LENGTH_FILTER_LEQ
proof length: 5
proof time: 0.039859
Statistics
  infstep : 33
  nodes   : 13
  maxdepth: 4
Time: 1.065738
  inferstep time: 0.944587
  node_find time: 0.001732
  node_crea time: 0.090718
    pred time: 0.036833
    thmpred time: 0.000005
    mc time: 0.053169
    inst time: 0.0
Proof found: boolLib.STRIP_TAC THEN Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL
  [metisTools.METIS_TAC [listTheory.LENGTH, listTheory.FILTER, listTheory.FILTER_COND_REWRITE, listTheory.LENGTH_FILTER_LEQ_MONO, listTheory.ALL_DISTINCT_FILTER_EL_IMP, listTheory.FILTER_EQ_NIL, listTheory.FILTER_EQ_CONS, listTheory.FILTER_NEQ_NIL, DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "FILTER_FOLDR", listTheory.MEM_FILTER, listTheory.EVERY_FILTER, listTheory.EVERY_FILTER_IMP, listTheory.FILTER_ALL_DISTINCT, listTheory.FILTER_EQ_APPEND, listTheory.FILTER_EQ_ID],
  BasicProvers.SRW_TAC [] [(DB.fetch "pred_set" "INJ_DEF"), (DB.fetch "pred_set" "SUBSET_DEF")] THEN
  simpLib.FULL_SIMP_TAC (boolSimps.bool_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.ARITH_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.REDUCE_ss) []]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.03135
Replaying proof: 0.004944
Replaying proof: 0.006522

FILTER_EQ
Statistics
  infstep : 479
  nodes   : 115
  maxdepth: 6
Time: 10.007739
  inferstep time: 7.760617
  node_find time: 0.0489
  node_crea time: 1.919625
    pred time: 0.561278
    thmpred time: 0.000029
    mc time: 0.751544
    inst time: 0.0
Proof status: Time Out
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.296963

LENGTH_SEG
Statistics
  infstep : 497
  nodes   : 99
  maxdepth: 5
Time: 10.007803
  inferstep time: 7.711121
  node_find time: 0.072093
  node_crea time: 1.983291
    pred time: 0.560976
    thmpred time: 0.000031
    mc time: 1.09159
    inst time: 0.0
Proof status: Time Out
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.1867

APPEND_NIL
proof length: 1
proof time: 0.000755
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.125904
  inferstep time: 0.107503
  node_find time: 0.000185
  node_crea time: 0.010214
    pred time: 0.003535
    thmpred time: 0.000001
    mc time: 0.011473
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ boolLib.FUN_EQ_THM , boolLib.IN_DEF ])
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.076802

APPEND_FOLDR
proof length: 3
proof time: 0.138511
Statistics
  infstep : 17
  nodes   : 6
  maxdepth: 2
Time: 0.573109
  inferstep time: 0.524804
  node_find time: 0.000872
  node_crea time: 0.03449
    pred time: 0.013949
    thmpred time: 0.000003
    mc time: 0.02257
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [metisTools.METIS_TAC [listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", listTheory.FOLDR_CONS, listTheory.FOLDR, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDR_CONG, DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "FOLDR_SNOC", DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.FILTER_EQ_CONS, listTheory.el_append3, listTheory.lupdate_append2], metisTools.METIS_TAC [listTheory.APPEND, listTheory.FOLDR_CONS, listTheory.FOLDR, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDR_CONG, DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "FOLDR_SNOC", DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.FILTER_EQ_CONS, listTheory.LAST_APPEND_CONS, listTheory.APPEND_EQ_CONS, listTheory.MEM_SPLIT]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.028623

APPEND_FOLDL
Statistics
  infstep : 642
  nodes   : 90
  maxdepth: 5
Time: 10.097719
  inferstep time: 8.434554
  node_find time: 0.077209
  node_crea time: 1.392743
    pred time: 0.541048
    thmpred time: 0.000022
    mc time: 0.488145
    inst time: 0.0
Proof status: Time Out
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.234174

FOLDR_APPEND
proof length: 3
proof time: 0.156205
Statistics
  infstep : 156
  nodes   : 42
  maxdepth: 5
Time: 2.869015
  inferstep time: 2.380574
  node_find time: 0.015059
  node_crea time: 0.395033
    pred time: 0.125574
    thmpred time: 0.00001
    mc time: 0.189855
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 16676*)l1"] THENL [metisTools.METIS_TAC [listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", listTheory.FOLDR, listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "FOLDR_FOLDL", listTheory.FOLDR_CONG, DB.fetch "rich_list" "FOLDR_SNOC", DB.fetch "rich_list" "APPEND_FOLDR", listTheory.FOLDR_CONS, DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.APPEND_EQ_APPEND_MID, listTheory.APPEND_EQ_SING, listTheory.ALL_DISTINCT_APPEND, listTheory.MEM_APPEND], metisTools.METIS_TAC [listTheory.APPEND, listTheory.FOLDR, listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "FOLDR_FOLDL", listTheory.FOLDR_CONG, DB.fetch "rich_list" "FOLDR_SNOC", DB.fetch "rich_list" "APPEND_FOLDR", listTheory.FOLDR_CONS, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.FILTER_EQ_CONS, listTheory.LAST_APPEND_CONS, listTheory.APPEND_EQ_CONS]]
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.203451

FOLDL_APPEND
proof length: 3
proof time: 0.122434
Statistics
  infstep : 100
  nodes   : 18
  maxdepth: 3
Time: 1.647526
  inferstep time: 1.374995
  node_find time: 0.008637
  node_crea time: 0.220769
    pred time: 0.081186
    thmpred time: 0.000002
    mc time: 0.107849
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 16676*)l1"] THENL [metisTools.METIS_TAC [listTheory.FOLDL, listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDL_SNOC, DB.fetch "rich_list" "FOLDR_FOLDL", listTheory.FOLDL_ZIP_SAME, listTheory.FOLDL_CONG, DB.fetch "rich_list" "APPEND_FOLDL", listTheory.SUM_MAP_FOLDL, listTheory.FOLDL2_FOLDL, DB.fetch "rich_list" "MAP_FOLDL", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "SUFFIX_DEF", listTheory.FOLDL_UNION_BIGUNION, listTheory.FOLDL_UNION_BIGUNION_paired], metisTools.METIS_TAC [listTheory.APPEND, listTheory.FOLDL, listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDL_SNOC, DB.fetch "rich_list" "FOLDR_FOLDL", listTheory.FOLDL_ZIP_SAME, listTheory.FOLDL_CONG, DB.fetch "rich_list" "APPEND_FOLDL", listTheory.FOLDL2_FOLDL, listTheory.SUM_MAP_FOLDL, listTheory.FOLDL_UNION_BIGUNION, listTheory.FOLDL_UNION_BIGUNION_paired, listTheory.ITSET_eq_FOLDL_SET_TO_LIST, DB.fetch "rich_list" "MAP_FOLDL", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "LENGTH_FOLDL"]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.080712

CONS_APPEND
proof length: 1
proof time: 0.000853
Statistics
  infstep : 3
  nodes   : 2
  maxdepth: 1
Time: 0.169083
  inferstep time: 0.155534
  node_find time: 0.00022
  node_crea time: 0.009055
    pred time: 0.003626
    thmpred time: 0.000001
    mc time: 0.006753
    inst time: 0.0
Proof found: (let fun fs l = simpLib.FULL_SIMP_TAC ( BasicProvers.srw_ss ( ) ) l in fs end [ ])
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.101176

ASSOC_APPEND
proof length: 2
proof time: 0.055168
Statistics
  infstep : 3
  nodes   : 3
  maxdepth: 2
Time: 0.188409
  inferstep time: 0.166486
  node_find time: 0.000227
  node_crea time: 0.015816
    pred time: 0.006562
    thmpred time: 0.000001
    mc time: 0.010364
    inst time: 0.0
Proof found: simpLib.FULL_SIMP_TAC boolSimps.bool_ss [boolLib.RIGHT_FORALL_IMP_THM, combinTheory.COMM_DEF, combinTheory.ASSOC_DEF] THEN metisTools.METIS_TAC [listTheory.APPEND_ASSOC, listTheory.APPEND_SNOC, listTheory.length_nub_append, listTheory.lupdate_append, listTheory.nub_append, DB.fetch "rich_list" "APPEND_FOLDL", listTheory.ALL_DISTINCT_APPEND, listTheory.APPEND, listTheory.MEM_APPEND, listTheory.APPEND_11, listTheory.APPEND_eq_NIL, listTheory.APPEND_11_LENGTH, listTheory.LENGTH_APPEND, listTheory.APPEND_LENGTH_EQ, listTheory.APPEND_EQ_SELF, listTheory.EL_APPEND_EQN]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.005839
Replaying proof: 0.000055
Replaying proof: 0.000054

MONOID_APPEND_NIL
proof length: 2
proof time: 0.001485
Statistics
  infstep : 6
  nodes   : 4
  maxdepth: 2
Time: 0.252906
  inferstep time: 0.217796
  node_find time: 0.000466
  node_crea time: 0.024883
    pred time: 0.010461
    thmpred time: 0.0
    mc time: 0.015596
    inst time: 0.0
Proof found: boolLib.REWRITE_TAC [(DB.fetch "combin" "MONOID_DEF"), boolLib.DISJ_ASSOC, (DB.fetch "combin" "LEFT_ID_DEF"), (DB.fetch "combin" "ASSOC_DEF"), (DB.fetch "combin" "RIGHT_ID_DEF")] THEN BasicProvers.SRW_TAC [] [listTheory.APPEND_ASSOC, DB.fetch "rich_list" "APPEND_NIL", listTheory.APPEND, listTheory.APPEND_NIL, listTheory.APPEND_eq_NIL, listTheory.APPEND_EQ_SELF, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.APPEND_EQ_APPEND_MID, listTheory.APPEND_EQ_CONS, listTheory.APPEND_EQ_SING, listTheory.APPEND_SNOC, listTheory.length_nub_append, listTheory.lupdate_append, listTheory.nub_append, DB.fetch "rich_list" "APPEND_FOLDL"]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.007468

FLAT_SNOC
proof length: 5
proof time: 0.095119
Statistics
  infstep : 21
  nodes   : 8
  maxdepth: 3
Time: 0.802238
  inferstep time: 0.676446
  node_find time: 0.001802
  node_crea time: 0.100067
    pred time: 0.039907
    thmpred time: 0.000002
    mc time: 0.054496
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL
  [metisTools.METIS_TAC [listTheory.FLAT, listTheory.FLAT_compute, listTheory.FLAT_APPEND, listTheory.FLAT_EQ_NIL, listTheory.MEM_FLAT, listTheory.LIST_BIND_ID, listTheory.LIST_BIND_def, listTheory.MAP_FLAT, listTheory.ALL_DISTINCT_FLAT_REVERSE, listTheory.LIST_TO_SET_FLAT, listTheory.SNOC_APPEND, listTheory.APPEND_SNOC, DB.fetch "rich_list" "APPEND_FOLDL", listTheory.SNOC, listTheory.REVERSE_SNOC_DEF, listTheory.SNOC_Axiom],
  metisTools.METIS_TAC [listTheory.FLAT, listTheory.FLAT_compute, listTheory.FLAT_APPEND, listTheory.FLAT_EQ_NIL, listTheory.MEM_FLAT, listTheory.LIST_BIND_def, listTheory.LIST_BIND_ID, listTheory.MAP_FLAT, listTheory.ALL_DISTINCT_FLAT_REVERSE, listTheory.LIST_TO_SET_FLAT, listTheory.SNOC_APPEND, listTheory.SNOC, listTheory.REVERSE_SNOC_DEF, listTheory.APPEND_SNOC, DB.fetch "rich_list" "APPEND_FOLDL", listTheory.REVERSE_SNOC]], simpLib.FULL_SIMP_TAC (BasicProvers.srw_ss ()) [(DB.fetch "list" "MEM_FLAT"), boolLib.PULL_EXISTS]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.037616

FLAT_FOLDR
proof length: 3
proof time: 0.075532
Statistics
  infstep : 4
  nodes   : 4
  maxdepth: 2
Time: 0.231975
  inferstep time: 0.191342
  node_find time: 0.000327
  node_crea time: 0.027456
    pred time: 0.012542
    thmpred time: 0.000001
    mc time: 0.019208
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.FLAT, listTheory.FLAT_compute, DB.fetch "rich_list" "FLAT_SNOC", listTheory.FLAT_APPEND, listTheory.FOLDR_CONS, DB.fetch "rich_list" "APPEND_FOLDR", DB.fetch "rich_list" "FOLDR_APPEND", listTheory.FLAT_EQ_NIL, listTheory.FOLDR, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", listTheory.MEM_FLAT, listTheory.LIST_BIND_ID, listTheory.LIST_BIND_def, listTheory.MAP_FLAT, listTheory.ALL_DISTINCT_FLAT_REVERSE], metisTools.METIS_TAC [listTheory.FLAT, listTheory.FLAT_compute, listTheory.FOLDR_CONS, DB.fetch "rich_list" "APPEND_FOLDR", DB.fetch "rich_list" "FLAT_SNOC", listTheory.FOLDR, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "FOLDR_APPEND", listTheory.FLAT_APPEND, DB.fetch "rich_list" "MAP_FOLDR", listTheory.FLAT_EQ_NIL, DB.fetch "rich_list" "FOLDR_SNOC", listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDR_CONG, DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "LENGTH_FOLDR"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.031302

FLAT_FOLDL
proof length: 3
proof time: 0.062429
Statistics
  infstep : 84
  nodes   : 20
  maxdepth: 4
Time: 1.802552
  inferstep time: 1.515967
  node_find time: 0.007516
  node_crea time: 0.216193
    pred time: 0.073311
    thmpred time: 0.000007
    mc time: 0.12496
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.FLAT, listTheory.FLAT_compute, DB.fetch "rich_list" "FLAT_FOLDR", DB.fetch "rich_list" "FLAT_SNOC", listTheory.FLAT_APPEND, listTheory.FLAT_EQ_NIL, listTheory.MEM_FLAT, listTheory.LIST_BIND_ID, listTheory.LIST_BIND_def, listTheory.MAP_FLAT, listTheory.ALL_DISTINCT_FLAT_REVERSE, listTheory.LIST_TO_SET_FLAT, DB.fetch "rich_list" "APPEND_FOLDL", DB.fetch "rich_list" "FOLDL_APPEND", listTheory.FOLDL, DB.fetch "rich_list" "FILTER_FOLDL"], metisTools.METIS_TAC [DB.fetch "rich_list" "FLAT_SNOC", DB.fetch "rich_list" "APPEND_FOLDL", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "SUFFIX_DEF", listTheory.FOLDL_SNOC, DB.fetch "rich_list" "FLAT_FOLDR", listTheory.FLAT, listTheory.FLAT_APPEND, listTheory.FLAT_EQ_NIL, listTheory.FLAT_compute, listTheory.MEM_FLAT, listTheory.LIST_BIND_ID, listTheory.LIST_BIND_def, listTheory.MAP_FLAT, listTheory.ALL_DISTINCT_FLAT_REVERSE, listTheory.LIST_TO_SET_FLAT]]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.086873

LENGTH_FLAT
proof length: 3
proof time: 0.002817
Statistics
  infstep : 37
  nodes   : 13
  maxdepth: 3
Time: 1.045577
  inferstep time: 0.838826
  node_find time: 0.003301
  node_crea time: 0.174324
    pred time: 0.06474
    thmpred time: 0.000005
    mc time: 0.090736
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [BasicProvers.SRW_TAC [] [listTheory.FLAT, listTheory.FLAT_compute, listTheory.SUM_MAP_PLUS_ZIP, listTheory.SUM_MAP_FOLDL, listTheory.SUM_MAP_PLUS, listTheory.SUM_IMAGE_eq_SUM_MAP_SET_TO_LIST, listTheory.SUM_IMAGE_LIST_TO_SET_upper_bound, listTheory.SUM_MAP_MEM_bound, listTheory.MAP_FLAT, listTheory.LIST_TO_SET_FLAT, listTheory.LIST_BIND_def, listTheory.SUM, listTheory.SUM_SNOC, listTheory.SUM_ACC_SUM_LEM, listTheory.SUM_APPEND, listTheory.SUM_SUM_ACC], simpLib.ASM_SIMP_TAC (BasicProvers.srw_ss ()) [(DB.fetch "list" "MAP_APPEND")]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.119684

REVERSE_FOLDR
proof length: 3
proof time: 0.193921
Statistics
  infstep : 12
  nodes   : 7
  maxdepth: 3
Time: 0.446691
  inferstep time: 0.335231
  node_find time: 0.001446
  node_crea time: 0.076572
    pred time: 0.03139
    thmpred time: 0.000003
    mc time: 0.054842
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.REVERSE_SNOC_DEF, listTheory.REVERSE_DEF, DB.fetch "rich_list" "FOLDR_SNOC", listTheory.FOLDR, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "FLAT_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDR_CONG, DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.FOLDR_CONS, DB.fetch "rich_list" "APPEND_FOLDR", DB.fetch "rich_list" "FOLDR_APPEND", listTheory.REVERSE_SNOC, DB.fetch "rich_list" "SNOC_REVERSE_CONS"], metisTools.METIS_TAC [listTheory.REVERSE_SNOC_DEF, listTheory.REVERSE_DEF, DB.fetch "rich_list" "FOLDR_SNOC", listTheory.FOLDR, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "FLAT_FOLDR", listTheory.FOLDR_CONS, DB.fetch "rich_list" "APPEND_FOLDR", listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDR_CONG, DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "LENGTH_FOLDR", DB.fetch "rich_list" "FOLDR_APPEND", listTheory.REVERSE_SNOC, DB.fetch "rich_list" "SNOC_REVERSE_CONS"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.039392

REVERSE_FOLDL
Statistics
  infstep : 650
  nodes   : 116
  maxdepth: 6
Time: 10.010983
  inferstep time: 7.668405
  node_find time: 0.119513
  node_crea time: 1.965459
    pred time: 0.657132
    thmpred time: 0.000038
    mc time: 0.701852
    inst time: 0.0
Proof status: Time Out
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.28744

ALL_EL_MAP
proof length: 1
proof time: 0.087987
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.100593
  inferstep time: 0.083485
  node_find time: 0.000106
  node_crea time: 0.011688
    pred time: 0.004252
    thmpred time: 0.0
    mc time: 0.008941
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.EVERY_MAP , listTheory.MAP_MAP_o , listTheory.LIST_BIND_MAP , DB.fetch "rich_list" "FILTER_MAP" , listTheory.LIST_REL_MAP1 , listTheory.MAP_o , listTheory.MAP_GENLIST , listTheory.NOT_EVERY , listTheory.EVERY_CONJ , listTheory.EVERY_EL , listTheory.EVERY_FILTER , listTheory.EVERY_MEM , listTheory.EVERY_NOT_EXISTS , listTheory.EVERY_SNOC , listTheory.FILTER_EQ_ID , listTheory.EVERY_FILTER_IMP])
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.113179

MEM_EXISTS
proof length: 1
proof time: 0.001032
Statistics
  infstep : 18
  nodes   : 7
  maxdepth: 2
Time: 0.687475
  inferstep time: 0.620031
  node_find time: 0.001309
  node_crea time: 0.053059
    pred time: 0.022128
    thmpred time: 0.000001
    mc time: 0.026045
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ listTheory.EXISTS_MEM , listTheory.EXISTS_CONG , listTheory.EVERY_NOT_EXISTS , listTheory.EXISTS_MAP , listTheory.EXISTS_NOT_EVERY , listTheory.EXISTS_SNOC , listTheory.MONO_EXISTS , listTheory.EXISTS_SIMP , listTheory.NOT_EVERY , listTheory.NOT_EXISTS , listTheory.EXISTS_DEF , listTheory.EXISTS_APPEND , listTheory.EXISTS_GENLIST , listTheory.dropWhile_APPEND_EXISTS , DB.fetch "rich_list" "OR_EL_DEF" , listTheory.HD_dropWhile ])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.026481

SUM_FOLDR
proof length: 3
proof time: 0.075459
Statistics
  infstep : 9
  nodes   : 7
  maxdepth: 3
Time: 0.367071
  inferstep time: 0.316136
  node_find time: 0.000659
  node_crea time: 0.035422
    pred time: 0.011262
    thmpred time: 0.000001
    mc time: 0.026019
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.SUM, listTheory.FOLDR, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "FLAT_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "REVERSE_FOLDR", listTheory.SUM_MAP_FOLDL, listTheory.SUM_SNOC, listTheory.SUM_ACC_SUM_LEM, listTheory.SUM_APPEND, listTheory.SUM_MAP_PLUS, listTheory.SUM_MAP_PLUS_ZIP, listTheory.SUM_SUM_ACC, listTheory.SUM_eq_0, DB.fetch "rich_list" "LENGTH_FOLDR", DB.fetch "rich_list" "LENGTH_FLAT"], metisTools.METIS_TAC [listTheory.SUM, arithmeticTheory.tactictoe_thm_11, listTheory.SUM_MAP_PLUS_ZIP, listTheory.FOLDR, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", listTheory.SUM_SNOC, listTheory.FOLDR_CONS, DB.fetch "rich_list" "APPEND_FOLDR", DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.SUM_MAP_FOLDL, DB.fetch "rich_list" "LENGTH_FLAT", listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDR_CONG, DB.fetch "rich_list" "FLAT_FOLDR", DB.fetch "rich_list" "FOLDR_FOLDL"]]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.182778

SUM_FOLDL
proof length: 3
proof time: 0.0337
Statistics
  infstep : 74
  nodes   : 16
  maxdepth: 4
Time: 1.477895
  inferstep time: 1.254898
  node_find time: 0.00788
  node_crea time: 0.154765
    pred time: 0.058697
    thmpred time: 0.000006
    mc time: 0.091237
    inst time: 0.0
Proof found: boolLib.HO_MATCH_MP_TAC (DB.fetch "list" "SNOC_INDUCT") THEN BasicProvers.SRW_TAC [] [DB.fetch "list" "SUM", DB.fetch "list" "SUM_eq_0", DB.fetch "list" "SUM_MAP_PLUS_ZIP", DB.fetch "list" "SUM_MAP_MEM_bound", DB.fetch "list" "SUM_IMAGE_LIST_TO_SET_upper_bound", DB.fetch "list" "EL_LENGTH_SNOC", DB.fetch "list" "EL_SNOC", DB.fetch "list" "LENGTH_SNOC", DB.fetch "list" "SNOC", DB.fetch "list" "ALL_DISTINCT_SNOC", DB.fetch "list" "SNOC_APPEND", DB.fetch "list" "EVERY_SNOC", DB.fetch "list" "EXISTS_SNOC", DB.fetch "list" "FOLDL_SNOC", DB.fetch "list" "FRONT_SNOC", DB.fetch "list" "LAST_SNOC"] THEN
  metisTools.METIS_TAC [listTheory.SNOC_APPEND, arithmeticTheory.tactictoe_thm_11, listTheory.SUM_MAP_FOLDL, listTheory.SUM_APPEND, listTheory.SUM, DB.fetch "rich_list" "SUM_FOLDR", listTheory.SUM_SNOC, DB.fetch "rich_list" "LENGTH_FLAT", listTheory.SUM_MAP_PLUS, listTheory.SUM_MAP_PLUS_ZIP, listTheory.SUM_ACC_SUM_LEM, listTheory.SUM_eq_0, listTheory.SUM_SUM_ACC, listTheory.SUM_MAP_MEM_bound, listTheory.SUM_IMAGE_eq_SUM_MAP_SET_TO_LIST, listTheory.SUM_IMAGE_LIST_TO_SET_upper_bound]
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.189513

IS_PREFIX_APPEND
Statistics
  infstep : 704
  nodes   : 155
  maxdepth: 7
Time: 10.043497
  inferstep time: 8.121626
  node_find time: 0.100831
  node_crea time: 1.577766
    pred time: 0.47548
    thmpred time: 0.000036
    mc time: 0.696939
    inst time: 0.0
Proof status: Time Out
Org tac number: 15
Original proof time: 0.0
Replaying proof: 0.398901

IS_SUFFIX_APPEND
Statistics
  infstep : 637
  nodes   : 184
  maxdepth: 7
Time: 10.077188
  inferstep time: 7.75471
  node_find time: 0.101057
  node_crea time: 1.92235
    pred time: 0.551456
    thmpred time: 0.000029
    mc time: 0.948865
    inst time: 0.0
Proof status: Time Out
Org tac number: 17
Original proof time: 0.0
Replaying proof: 0.419994
Replaying proof: 0.000232

IS_SUBLIST_APPEND
Statistics
  infstep : 457
  nodes   : 109
  maxdepth: 5
Time: 10.007747
  inferstep time: 8.17034
  node_find time: 0.07058
  node_crea time: 1.569487
    pred time: 0.594234
    thmpred time: 0.00003
    mc time: 0.531512
    inst time: 0.0
Proof status: Time Out
Org tac number: 35
Original proof time: 0.0
Replaying proof: 0.863736

IS_PREFIX_IS_SUBLIST
proof length: 5
proof time: 0.222058
Statistics
  infstep : 8
  nodes   : 7
  maxdepth: 3
Time: 0.587348
  inferstep time: 0.505304
  node_find time: 0.000758
  node_crea time: 0.059802
    pred time: 0.02877
    thmpred time: 0.0
    mc time: 0.035538
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL
  [metisTools.METIS_TAC [DB.fetch "rich_list" "IS_SUBLIST", DB.fetch "rich_list" "IS_PREFIX", listTheory.isPREFIX_THM, listTheory.isPREFIX, DB.fetch "rich_list" "IS_SUBLIST_APPEND", DB.fetch "rich_list" "IS_PREFIX_APPEND", listTheory.list_induction, listTheory.list_INDUCT, listTheory.LIST_REL_def, listTheory.LIST_REL_strongind, listTheory.ZIP_EQ_NIL, listTheory.list_INDUCT0, listTheory.SNOC_INDUCT, listTheory.ALL_DISTINCT_FILTER, listTheory.SET_TO_LIST_THM, listTheory.APPEND_FRONT_LAST],
  metisTools.METIS_TAC [DB.fetch "rich_list" "IS_SUBLIST", listTheory.isPREFIX_THM, DB.fetch "rich_list" "IS_PREFIX", listTheory.isPREFIX, DB.fetch "rich_list" "IS_SUBLIST_APPEND", DB.fetch "rich_list" "IS_PREFIX_APPEND", listTheory.APPEND, listTheory.FILTER_EQ_CONS, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.APPEND_EQ_CONS, DB.fetch "rich_list" "tactictoe_thm_2", listTheory.LAST_APPEND_CONS, listTheory.list_INDUCT, listTheory.FILTER_COND_REWRITE, listTheory.FORALL_LIST]], metisTools.METIS_TAC [DB.fetch "rich_list" "IS_SUBLIST", DB.fetch "rich_list" "IS_SUBLIST_APPEND", DB.fetch "rich_list" "IS_PREFIX", listTheory.isPREFIX, listTheory.isPREFIX_THM, DB.fetch "rich_list" "IS_PREFIX_APPEND", listTheory.APPEND, listTheory.FILTER_EQ_CONS, listTheory.LAST_APPEND_CONS, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.APPEND_EQ_CONS, DB.fetch "rich_list" "tactictoe_thm_2", listTheory.EQ_LIST, listTheory.LIST_NOT_EQ, listTheory.NOT_EQ_LIST]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.142066

IS_SUFFIX_IS_SUBLIST
Statistics
  infstep : 523
  nodes   : 113
  maxdepth: 5
Time: 10.074786
  inferstep time: 8.117269
  node_find time: 0.08111
  node_crea time: 1.501202
    pred time: 0.537141
    thmpred time: 0.000031
    mc time: 0.727583
    inst time: 0.0
Proof status: Time Out
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.115351
Replaying proof: 0.000238

IS_PREFIX_REVERSE
proof length: 3
proof time: 0.057724
Statistics
  infstep : 20
  nodes   : 11
  maxdepth: 3
Time: 0.860448
  inferstep time: 0.70283
  node_find time: 0.002397
  node_crea time: 0.131399
    pred time: 0.054858
    thmpred time: 0.000001
    mc time: 0.059143
    inst time: 0.0
Proof found: boolLib.REPEAT boolLib.GEN_TAC THEN boolLib.ONCE_ASM_REWRITE_TAC [DB.fetch "rich_list" "IS_SUFFIX", DB.fetch "rich_list" "IS_SUFFIX_APPEND", DB.fetch "rich_list" "IS_SUFFIX_IS_SUBLIST", DB.fetch "rich_list" "IS_PREFIX", DB.fetch "rich_list" "IS_PREFIX_APPEND", DB.fetch "rich_list" "IS_SUBLIST", DB.fetch "rich_list" "IS_PREFIX_IS_SUBLIST", listTheory.isPREFIX_THM, listTheory.isPREFIX, listTheory.REVERSE_11, listTheory.REVERSE_APPEND, listTheory.SWAP_REVERSE, listTheory.SWAP_REVERSE_SYM, listTheory.EVERY2_REVERSE, listTheory.REVERSE_REVERSE, listTheory.REVERSE_DEF] THEN
  metisTools.METIS_TAC [listTheory.REV_REVERSE_LEM, listTheory.REVERSE_APPEND, listTheory.REVERSE_DEF, listTheory.REVERSE_11, listTheory.SWAP_REVERSE, listTheory.SWAP_REVERSE_SYM, listTheory.EVERY2_REVERSE, listTheory.REVERSE_REVERSE, listTheory.LENGTH_REVERSE, listTheory.EL_REVERSE, listTheory.MEM_REVERSE, listTheory.ALL_DISTINCT_REVERSE, listTheory.FILTER_REVERSE, listTheory.REVERSE_SNOC, listTheory.REVERSE_EQ_NIL, listTheory.REVERSE_SNOC_DEF]
Org tac number: 20
Original proof time: 0.0
Replaying proof: 0.62739

IS_SUFFIX_CONS2_E
proof length: 3
proof time: 0.005863
Statistics
  infstep : 26
  nodes   : 12
  maxdepth: 3
Time: 1.007658
  inferstep time: 0.833707
  node_find time: 0.003258
  node_crea time: 0.148345
    pred time: 0.055221
    thmpred time: 0.000007
    mc time: 0.073259
    inst time: 0.0
Proof found: boolLib.ONCE_ASM_REWRITE_TAC [DB.fetch "rich_list" "IS_SUFFIX_IS_SUBLIST", DB.fetch "rich_list" "IS_SUFFIX_APPEND", DB.fetch "rich_list" "IS_PREFIX_REVERSE", DB.fetch "rich_list" "IS_SUFFIX", DB.fetch "rich_list" "IS_SUFFIX_REVERSE", listTheory.splitAtPki_def, listTheory.FORALL_LIST, listTheory.list_INDUCT, listTheory.LRC_MEM_right, listTheory.NULL_DEF, listTheory.MEM, listTheory.LRC_def, listTheory.ALL_DISTINCT, listTheory.DROP_compute, listTheory.EVERY_DEF, listTheory.EVERYi_def] THEN BasicProvers.SRW_TAC [] [listTheory.LAST_APPEND_CONS, listTheory.MEM_SPLIT, listTheory.LUPDATE_LENGTH, DB.fetch "rich_list" "tactictoe_thm_3", listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.APPEND_EQ_CONS, listTheory.APPEND, listTheory.APPEND_EQ_APPEND_MID, listTheory.APPEND_EQ_SING, DB.fetch "rich_list" "APPEND_FOLDR", DB.fetch "rich_list" "IS_SUFFIX_APPEND", DB.fetch "rich_list" "IS_SUBLIST_APPEND", listTheory.LENGTH_EQ_SUM, listTheory.APPEND_SNOC, listTheory.APPEND_eq_NIL] THEN
  BasicProvers.PROVE_TAC []
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.080618

IS_SUFFIX_REFL
proof length: 1
proof time: 0.041251
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.085014
  inferstep time: 0.069083
  node_find time: 0.000312
  node_crea time: 0.012045
    pred time: 0.003055
    thmpred time: 0.0
    mc time: 0.009725
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "IS_SUFFIX" , DB.fetch "rich_list" "IS_SUFFIX_APPEND" , DB.fetch "rich_list" "IS_PREFIX_REVERSE" , DB.fetch "rich_list" "IS_SUFFIX_CONS2_E" , DB.fetch "rich_list" "IS_SUFFIX_IS_SUBLIST" , DB.fetch "rich_list" "IS_SUFFIX_REVERSE" , listTheory.LAST_SNOC , listTheory.FRONT_SNOC , listTheory.SNOC_Axiom , DB.fetch "rich_list" "NOT_NULL_SNOC" , listTheory.NULL_EQ , listTheory.SNOC_INDUCT , DB.fetch "rich_list" "APPEND_NIL" , listTheory.APPEND , listTheory.REVERSE_SNOC_DEF , listTheory.REVERSE_SNOC])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.037155

IS_SUBLIST_REVERSE
Statistics
  infstep : 369
  nodes   : 96
  maxdepth: 6
Time: 10.096294
  inferstep time: 7.841312
  node_find time: 0.072219
  node_crea time: 1.869469
    pred time: 0.630477
    thmpred time: 0.000034
    mc time: 0.870106
    inst time: 0.0
Proof status: Time Out
Org tac number: 11
Original proof time: 0.0
Replaying proof: 0.285065

PREFIX_FOLDR
proof length: 5
proof time: 0.067273
Statistics
  infstep : 39
  nodes   : 13
  maxdepth: 3
Time: 1.181887
  inferstep time: 0.961216
  node_find time: 0.004102
  node_crea time: 0.145619
    pred time: 0.048557
    thmpred time: 0.000003
    mc time: 0.117451
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "PREFIX_DEF", DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "SUFFIX_DEF", DB.fetch "rich_list" "MAP_FOLDR", listTheory.FOLDR_CONG, DB.fetch "rich_list" "LENGTH_FOLDR", DB.fetch "rich_list" "SPLITP", listTheory.FILTER, listTheory.INDEX_FIND_def, listTheory.dropWhile_def, DB.fetch "rich_list" "SPLITP_AUX_def", DB.fetch "rich_list" "FILTER_SNOC", whileTheory.ITERATION, whileTheory.WHILE, whileTheory.OWHILE_THM], BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "PREFIX_DEF", DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "SUFFIX_DEF", DB.fetch "rich_list" "MAP_FOLDR", listTheory.FOLDR_CONG, DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.FILTER, listTheory.INDEX_FIND_def, listTheory.dropWhile_def, DB.fetch "rich_list" "SPLITP_AUX_def", DB.fetch "rich_list" "SPLITP", DB.fetch "rich_list" "FILTER_SNOC", whileTheory.ITERATION, whileTheory.WHILE, whileTheory.OWHILE_THM] THENL
  [metisTools.METIS_TAC [listTheory.MEM, satTheory.AND_INV_IMP, satTheory.OR_DUAL2, satTheory.OR_DUAL3, satTheory.AND_INV2, DB.fetch "rich_list" "IS_SUBLIST", listTheory.LLEX_def, numeralTheory.numeral_distrib, numeralTheory.numeral_lte, DB.fetch "rich_list" "IS_PREFIX", listTheory.isPREFIX_THM, listTheory.NULL_DEF, listTheory.isPREFIX, listTheory.EXISTS_DEF, numeralTheory.numeral_lt, listTheory.LIST_TO_SET_DEF],
  metisTools.METIS_TAC [DB.fetch "rich_list" "PREFIX_DEF", DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "SPLITP", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "SUFFIX_DEF", DB.fetch "rich_list" "MAP_FOLDR", listTheory.FOLDR_CONG, DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.INDEX_FIND_def, DB.fetch "rich_list" "SPLITP_AUX_def", listTheory.FILTER, listTheory.dropWhile_def, DB.fetch "rich_list" "FILTER_SNOC", whileTheory.ITERATION, whileTheory.WHILE, whileTheory.OWHILE_THM]]]
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.209875

PREFIX
proof length: 2
proof time: 0.005841
Statistics
  infstep : 3
  nodes   : 3
  maxdepth: 2
Time: 0.170924
  inferstep time: 0.125142
  node_find time: 0.000361
  node_crea time: 0.032396
    pred time: 0.008868
    thmpred time: 0.0
    mc time: 0.024524
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "PREFIX_DEF", DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "SUFFIX_DEF", DB.fetch "rich_list" "MAP_FOLDR", listTheory.FOLDR_CONG, DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.FILTER, listTheory.INDEX_FIND_def, listTheory.dropWhile_def, DB.fetch "rich_list" "SPLITP_AUX_def", DB.fetch "rich_list" "SPLITP", DB.fetch "rich_list" "FILTER_SNOC", whileTheory.ITERATION, whileTheory.WHILE, whileTheory.OWHILE_THM] THEN metisTools.METIS_TAC [pred_setTheory.tactictoe_thm_33, satTheory.AND_INV_IMP, satTheory.OR_DUAL2, satTheory.OR_DUAL3, satTheory.AND_INV2, listTheory.LLEX_def, numeralTheory.numeral_distrib, numeralTheory.numeral_lte, DB.fetch "rich_list" "IS_PREFIX", listTheory.isPREFIX_THM, DB.fetch "rich_list" "IS_SUBLIST", listTheory.NULL_DEF, listTheory.isPREFIX, listTheory.EXISTS_DEF, numeralTheory.numeral_lt, listTheory.LIST_TO_SET_DEF]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.085692

IS_PREFIX_PREFIX
proof length: 4
proof time: 0.089941
Statistics
  infstep : 7
  nodes   : 6
  maxdepth: 3
Time: 0.425901
  inferstep time: 0.352515
  node_find time: 0.000731
  node_crea time: 0.052563
    pred time: 0.022793
    thmpred time: 0.000001
    mc time: 0.034407
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "PREFIX", DB.fetch "rich_list" "PREFIX_FOLDR", DB.fetch "rich_list" "PREFIX_DEF", listTheory.isPREFIX, DB.fetch "rich_list" "IS_PREFIX", DB.fetch "rich_list" "IS_SUBLIST", listTheory.isPREFIX_THM, DB.fetch "rich_list" "IS_PREFIX_APPEND", DB.fetch "rich_list" "IS_PREFIX_IS_SUBLIST", DB.fetch "rich_list" "IS_PREFIX_REVERSE", DB.fetch "rich_list" "IS_SUFFIX_REVERSE", listTheory.FOLDR, listTheory.list_INDUCT, DB.fetch "rich_list" "SPLITP", listTheory.APPEND, listTheory.list_induction], BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "PREFIX_DEF", DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "SUFFIX_DEF", DB.fetch "rich_list" "MAP_FOLDR", listTheory.FOLDR_CONG, DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.FILTER, listTheory.INDEX_FIND_def, listTheory.dropWhile_def, DB.fetch "rich_list" "SPLITP_AUX_def", DB.fetch "rich_list" "SPLITP", DB.fetch "rich_list" "FILTER_SNOC", whileTheory.ITERATION, whileTheory.WHILE, whileTheory.OWHILE_THM] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "PREFIX_DEF", DB.fetch "rich_list" "SPLITR_def", DB.fetch "rich_list" "SPLITP", listTheory.NOT_EVERY, listTheory.NOT_EXISTS, listTheory.isPREFIX, DB.fetch "rich_list" "IS_PREFIX", listTheory.isPREFIX_THM, DB.fetch "rich_list" "IS_PREFIX_APPEND", DB.fetch "rich_list" "IS_SUBLIST", DB.fetch "rich_list" "IS_PREFIX_IS_SUBLIST", DB.fetch "rich_list" "IS_PREFIX_REVERSE", DB.fetch "rich_list" "IS_SUFFIX_REVERSE", listTheory.UNZIP, listTheory.mem_exists_set, DB.fetch "rich_list" "UNZIP_FST_DEF"]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.111828

LENGTH_SCANL
Statistics
  infstep : 1166
  nodes   : 117
  maxdepth: 5
Time: 10.026943
  inferstep time: 7.816684
  node_find time: 0.190921
  node_crea time: 1.480208
    pred time: 0.460934
    thmpred time: 0.000016
    mc time: 0.746317
    inst time: 0.0
Proof status: Time Out
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.10209

LENGTH_SCANR
proof length: 4
proof time: 0.099408
Statistics
  infstep : 163
  nodes   : 26
  maxdepth: 4
Time: 2.891626
  inferstep time: 2.336246
  node_find time: 0.021919
  node_crea time: 0.420228
    pred time: 0.169583
    thmpred time: 0.000008
    mc time: 0.196815
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 26611*)l"] THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "SCANR", listTheory.LENGTH, DB.fetch "rich_list" "LENGTH_SCANL", listTheory.LUPDATE_SEM, DB.fetch "rich_list" "LIST_ELEM_COUNT_DEF", listTheory.LUPDATE_def, DB.fetch "rich_list" "SCANL", listTheory.FOLDL, listTheory.FOLDR, listTheory.SNOC_Axiom, listTheory.tactictoe_thm_17, listTheory.LUPDATE_compute, listTheory.APPEND_EQ_APPEND_MID, listTheory.MEM_SPLIT_APPEND_first, listTheory.MEM_SPLIT_APPEND_last, listTheory.REVERSE_EQ_SING], boolLib.POP_ASSUM boolLib.MP_TAC THEN
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "SCANR", listTheory.LENGTH, DB.fetch "rich_list" "LENGTH_SCANL", listTheory.LENGTH_SNOC, listTheory.tactictoe_thm_14, listTheory.LENGTH_CONS, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.LRC_MEM_right, listTheory.LUPDATE_SEM, listTheory.SUM_MAP_PLUS_ZIP, listTheory.LUPDATE_def, listTheory.LENGTH_EQ_CONS, DB.fetch "rich_list" "SCANL", listTheory.FOLDL, listTheory.FOLDR]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.125861
Replaying proof: 0.000397
Replaying proof: 0.00045

FCOMM_FOLDR_APPEND
proof length: 5
proof time: 0.084779
Statistics
  infstep : 45
  nodes   : 24
  maxdepth: 4
Time: 1.777346
  inferstep time: 1.39967
  node_find time: 0.006533
  node_crea time: 0.321832
    pred time: 0.095781
    thmpred time: 0.000003
    mc time: 0.13786
    inst time: 0.0
Proof found: boolLib.REWRITE_TAC [combinTheory.LEFT_ID_DEF, combinTheory.MONOID_DEF, combinTheory.FCOMM_DEF, combinTheory.FCOMM_ASSOC, DB.fetch "rich_list" "FOLDR_APPEND", listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "COMM_MONOID_FOLDR", DB.fetch "rich_list" "FOLDR_FOLDL", listTheory.FOLDR, listTheory.FOLDR_CONG, DB.fetch "rich_list" "FOLDR_SNOC", DB.fetch "rich_list" "APPEND_FOLDR", listTheory.FOLDR_CONS, DB.fetch "rich_list" "FLAT_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "FILTER_FOLDR"] THEN BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THEN
  BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 16676*)l1"] THENL
  [metisTools.METIS_TAC [DB.fetch "rich_list" "FOLDR_APPEND", listTheory.FOLDR, listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "COMM_MONOID_FOLDR", DB.fetch "rich_list" "FOLDR_FOLDL", listTheory.FOLDR_CONG, DB.fetch "rich_list" "FOLDR_SNOC", DB.fetch "rich_list" "APPEND_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "FLAT_FOLDR", DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "PREFIX_FOLDR", DB.fetch "rich_list" "REVERSE_FOLDR", listTheory.FOLDR_CONS, DB.fetch "rich_list" "LENGTH_FOLDR", DB.fetch "rich_list" "SUM_FOLDR"],
  metisTools.METIS_TAC [DB.fetch "rich_list" "FOLDR_APPEND", listTheory.FOLDR, listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "COMM_MONOID_FOLDR", DB.fetch "rich_list" "FOLDR_FOLDL", listTheory.FOLDR_CONG, DB.fetch "rich_list" "FOLDR_SNOC", DB.fetch "rich_list" "APPEND_FOLDR", DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "PREFIX_FOLDR", listTheory.FOLDR_CONS, DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "FLAT_FOLDR", DB.fetch "rich_list" "LENGTH_FOLDR", DB.fetch "rich_list" "REVERSE_FOLDR", DB.fetch "rich_list" "SUM_FOLDR"]]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.159047

FCOMM_FOLDL_APPEND
Statistics
  infstep : 592
  nodes   : 171
  maxdepth: 6
Time: 10.009504
  inferstep time: 6.843137
  node_find time: 0.13584
  node_crea time: 2.731742
    pred time: 0.565079
    thmpred time: 0.00004
    mc time: 1.097719
    inst time: 0.0
Proof status: Time Out
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.199141

FOLDL_SINGLE
proof length: 1
proof time: 0.047408
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.379908
  inferstep time: 0.366198
  node_find time: 0.000106
  node_crea time: 0.008474
    pred time: 0.002859
    thmpred time: 0.000001
    mc time: 0.007489
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.FOLDL , listTheory.FOLDL_ZIP_SAME , DB.fetch "rich_list" "COMM_MONOID_FOLDL" , listTheory.FOLDL_SNOC , listTheory.FOLDL_EQ_FOLDR , DB.fetch "rich_list" "FCOMM_FOLDL_APPEND" , DB.fetch "rich_list" "FOLDL_APPEND" , DB.fetch "rich_list" "FOLDR_FOLDL" , listTheory.FOLDL_CONG , listTheory.SUM_MAP_FOLDL , DB.fetch "rich_list" "REVERSE_FOLDL" , DB.fetch "rich_list" "MAP_FOLDL" , DB.fetch "rich_list" "FILTER_FOLDL" , DB.fetch "rich_list" "SUFFIX_DEF" , DB.fetch "rich_list" "FLAT_FOLDL" , listTheory.FOLDL_UNION_BIGUNION_paired])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.005544

FOLDR_SINGLE
proof length: 1
proof time: 0.050103
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.058192
  inferstep time: 0.046333
  node_find time: 0.000104
  node_crea time: 0.008659
    pred time: 0.003373
    thmpred time: 0.0
    mc time: 0.005561
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.FOLDR , DB.fetch "rich_list" "FOLDR_SNOC" , DB.fetch "rich_list" "COMM_MONOID_FOLDR" , listTheory.FOLDL_EQ_FOLDR , DB.fetch "rich_list" "FCOMM_FOLDR_APPEND" , DB.fetch "rich_list" "FOLDR_APPEND" , DB.fetch "rich_list" "FOLDR_FOLDL" , listTheory.FOLDR_CONG , DB.fetch "rich_list" "FILTER_FOLDR" , DB.fetch "rich_list" "PREFIX_FOLDR" , DB.fetch "rich_list" "MAP_FOLDR" , listTheory.FOLDR_CONS , DB.fetch "rich_list" "APPEND_FOLDR" , DB.fetch "rich_list" "FLAT_FOLDR" , DB.fetch "rich_list" "REVERSE_FOLDR" , DB.fetch "rich_list" "LENGTH_FOLDR"])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.004124

FOLDR_CONS_NIL
proof length: 3
proof time: 0.069164
Statistics
  infstep : 12
  nodes   : 7
  maxdepth: 3
Time: 0.409882
  inferstep time: 0.34001
  node_find time: 0.001759
  node_crea time: 0.041891
    pred time: 0.010503
    thmpred time: 0.000002
    mc time: 0.033154
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "APPEND_FOLDR", listTheory.FOLDR, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "PREFIX_FOLDR", DB.fetch "rich_list" "FOLDR_SINGLE", listTheory.FOLDR_CONS, DB.fetch "rich_list" "FLAT_FOLDR", DB.fetch "rich_list" "REVERSE_FOLDR", listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDR_CONG, DB.fetch "rich_list" "COMM_MONOID_FOLDR", DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "FOLDR_SNOC", DB.fetch "rich_list" "LENGTH_FOLDR", DB.fetch "rich_list" "SUM_FOLDR"], metisTools.METIS_TAC [DB.fetch "rich_list" "APPEND_FOLDR", listTheory.FOLDR, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "PREFIX_FOLDR", DB.fetch "rich_list" "FOLDR_SINGLE", DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "FLAT_FOLDR", DB.fetch "rich_list" "REVERSE_FOLDR", listTheory.FOLDR_CONS, listTheory.FOLDL_EQ_FOLDR, listTheory.FOLDR_CONG, DB.fetch "rich_list" "COMM_MONOID_FOLDR", DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "FOLDR_SNOC", DB.fetch "rich_list" "LENGTH_FOLDR", DB.fetch "rich_list" "SUM_FOLDR"]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.022619

FOLDL_SNOC_NIL
proof length: 4
proof time: 0.061386
Statistics
  infstep : 363
  nodes   : 57
  maxdepth: 4
Time: 5.398957
  inferstep time: 4.246039
  node_find time: 0.061902
  node_crea time: 0.835546
    pred time: 0.260781
    thmpred time: 0.000012
    mc time: 0.368815
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "APPEND_FOLDL", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "SUFFIX_DEF", listTheory.FOLDL_SNOC, DB.fetch "rich_list" "MAP_FOLDL", listTheory.SNOC, listTheory.SNOC_APPEND, listTheory.SNOC_Axiom, listTheory.tactictoe_thm_17, listTheory.SNOC_CASES, DB.fetch "rich_list" "IS_SUFFIX", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "NOT_NIL_SNOC", DB.fetch "rich_list" "NOT_SNOC_NIL", DB.fetch "rich_list" "tactictoe_thm_4", listTheory.SNOC_INDUCT], boolLib.REWRITE_TAC [(DB.fetch "rich_list" "FILTER_SNOC"), listTheory.FOLDL_SNOC] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "APPEND_FOLDL", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "SUFFIX_DEF", listTheory.FOLDL_SNOC, DB.fetch "rich_list" "MAP_FOLDL", listTheory.SNOC, listTheory.SNOC_APPEND, listTheory.SNOC_Axiom, listTheory.tactictoe_thm_17, listTheory.SNOC_CASES, DB.fetch "rich_list" "IS_SUFFIX", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "NOT_NIL_SNOC", DB.fetch "rich_list" "NOT_SNOC_NIL", listTheory.SNOC_INDUCT, DB.fetch "rich_list" "tactictoe_thm_4"]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.091444

FOLDR_FOLDL_REVERSE
Statistics
  infstep : 887
  nodes   : 202
  maxdepth: 7
Time: 10.021535
  inferstep time: 7.24029
  node_find time: 0.177417
  node_crea time: 2.003616
    pred time: 0.449189
    thmpred time: 0.000033
    mc time: 1.209516
    inst time: 0.0
Proof status: Time Out
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.087004

FOLDL_FOLDR_REVERSE
proof length: 4
proof time: 0.101395
Statistics
  infstep : 58
  nodes   : 19
  maxdepth: 4
Time: 1.403822
  inferstep time: 1.101985
  node_find time: 0.013951
  node_crea time: 0.230191
    pred time: 0.07504
    thmpred time: 0.000007
    mc time: 0.121416
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 30146*)l"] THENL [metisTools.METIS_TAC [listTheory.FOLDL, listTheory.REVERSE_SNOC_DEF, listTheory.REVERSE_DEF, DB.fetch "rich_list" "FOLDR_FOLDL_REVERSE", listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "FOLDL_SINGLE", listTheory.FOLDL_ZIP_SAME, DB.fetch "rich_list" "COMM_MONOID_FOLDL", listTheory.FOLDL_SNOC, DB.fetch "rich_list" "FCOMM_FOLDL_APPEND", DB.fetch "rich_list" "FOLDL_APPEND", listTheory.FOLDL_CONG, combinTheory.C_DEF, pairTheory.LET2_RAND, pairTheory.LET2_RATOR], boolLib.ASM_REWRITE_TAC [listTheory.FOLDR, listTheory.FOLDL, listTheory.REVERSE_SNOC_DEF, listTheory.FOLDL_SNOC] THEN
  metisTools.METIS_TAC [listTheory.REVERSE_SNOC_DEF, DB.fetch "rich_list" "FOLDR_FOLDL_REVERSE", pred_setTheory.tactictoe_thm_25, pred_setTheory.tactictoe_thm_26, combinTheory.C_DEF, pairTheory.LET2_RAND, pairTheory.LET2_RATOR, pairTheory.PEXISTS_THM, pairTheory.PFORALL_THM, listTheory.LIST_REL_MAP2, combinTheory.W_DEF, listTheory.LIST_REL_CONJ, DB.fetch "rich_list" "REVERSE_FOLDR", DB.fetch "rich_list" "FOLDR_SNOC", combinTheory.C_ABS_L, listTheory.REVERSE_SNOC]]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.146547

FOLDR_REVERSE
proof length: 4
proof time: 0.076214
Statistics
  infstep : 26
  nodes   : 9
  maxdepth: 3
Time: 0.727055
  inferstep time: 0.544096
  node_find time: 0.004222
  node_crea time: 0.14045
    pred time: 0.059373
    thmpred time: 0.000001
    mc time: 0.070795
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 30146*)l"] THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "FOLDR_FOLDL_REVERSE", listTheory.REVERSE_SNOC_DEF, listTheory.REVERSE_DEF, listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "FOLDL_FOLDR_REVERSE", DB.fetch "rich_list" "FOLDR_SINGLE", listTheory.FOLDR, DB.fetch "rich_list" "FOLDR_SNOC", DB.fetch "rich_list" "COMM_MONOID_FOLDR", DB.fetch "rich_list" "FCOMM_FOLDR_APPEND", DB.fetch "rich_list" "FOLDR_APPEND", listTheory.FOLDR_CONG, combinTheory.C_DEF, pairTheory.LET2_RAND, pairTheory.LET2_RATOR], boolLib.ASM_REWRITE_TAC [listTheory.FOLDR, listTheory.FOLDL, listTheory.REVERSE_SNOC_DEF, listTheory.FOLDL_SNOC] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "FOLDR_FOLDL_REVERSE", listTheory.REVERSE_SNOC_DEF, DB.fetch "rich_list" "FOLDL_FOLDR_REVERSE", DB.fetch "rich_list" "FOLDR_SNOC", listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "FOLDR_FOLDL", listTheory.FOLDR, DB.fetch "rich_list" "COMM_MONOID_FOLDR", DB.fetch "rich_list" "FOLDR_SINGLE", DB.fetch "rich_list" "FCOMM_FOLDR_APPEND", DB.fetch "rich_list" "FOLDR_APPEND", pred_setTheory.tactictoe_thm_25, pred_setTheory.tactictoe_thm_26, listTheory.FOLDR_CONG, combinTheory.C_DEF, pairTheory.LET2_RAND]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.004413

FOLDL_REVERSE
proof length: 1
proof time: 0.050952
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.080128
  inferstep time: 0.057499
  node_find time: 0.000137
  node_crea time: 0.013695
    pred time: 0.003566
    thmpred time: 0.000001
    mc time: 0.01414
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "FOLDL_FOLDR_REVERSE" , DB.fetch "rich_list" "FOLDR_FOLDL_REVERSE" , DB.fetch "rich_list" "FOLDR_REVERSE" , listTheory.FOLDL_EQ_FOLDR , DB.fetch "rich_list" "FOLDR_FOLDL" , listTheory.FOLDL , DB.fetch "rich_list" "COMM_MONOID_FOLDL" , listTheory.FOLDL_SNOC , DB.fetch "rich_list" "FOLDL_SINGLE" , listTheory.FOLDL_ZIP_SAME , DB.fetch "rich_list" "FCOMM_FOLDL_APPEND" , DB.fetch "rich_list" "FOLDL_APPEND" , listTheory.FOLDL_CONG , combinTheory.C_DEF , pairTheory.LET2_RAND , pairTheory.LET2_RATOR])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.004051

FOLDR_MAP
proof length: 4
proof time: 0.072213
Statistics
  infstep : 88
  nodes   : 18
  maxdepth: 3
Time: 1.835094
  inferstep time: 1.541428
  node_find time: 0.01172
  node_crea time: 0.212422
    pred time: 0.081116
    thmpred time: 0.000002
    mc time: 0.098496
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [boolSimps.CONJ_ss] [(DB.fetch "list" "LIST_REL_EL_EQN"), (DB.fetch "list" "EL_MAP"), (DB.fetch "list" "LENGTH_MAP")] THEN BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 30146*)l"] THENL
  [metisTools.METIS_TAC [listTheory.EVERY2_MAP, listTheory.MAP, DB.fetch "rich_list" "FCOMM_FOLDR_APPEND", listTheory.FOLDR, DB.fetch "rich_list" "FOLDR_SINGLE", DB.fetch "rich_list" "FOLDR_FOLDL_REVERSE", DB.fetch "rich_list" "FOLDR_REVERSE", DB.fetch "rich_list" "FOLDR_SNOC", DB.fetch "rich_list" "COMM_MONOID_FOLDR", listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "FOLDR_APPEND", listTheory.FOLDR_CONG, listTheory.tactictoe_thm_17, prim_recTheory.num_Axiom_old, listTheory.list_Axiom_old],
  BasicProvers.SRW_TAC [boolSimps.CONJ_ss] [(DB.fetch "list" "LIST_REL_EL_EQN"), (DB.fetch "list" "EL_MAP"), (DB.fetch "list" "LENGTH_MAP")]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.087925

FOLDL_MAP
Statistics
  infstep : 586
  nodes   : 116
  maxdepth: 5
Time: 10.014379
  inferstep time: 7.761573
  node_find time: 0.116034
  node_crea time: 1.767717
    pred time: 0.555375
    thmpred time: 0.000034
    mc time: 0.754427
    inst time: 0.0
Proof status: Time Out
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.114288

EVERY_FOLDR
proof length: 3
proof time: 0.003857
Statistics
  infstep : 28
  nodes   : 9
  maxdepth: 3
Time: 0.866841
  inferstep time: 0.749711
  node_find time: 0.003792
  node_crea time: 0.074821
    pred time: 0.030628
    thmpred time: 0.000001
    mc time: 0.045739
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [BasicProvers.SRW_TAC [] [listTheory.EVERY_DEF, listTheory.EVERY_CONJ, pred_setTheory.GSPEC_AND, whileTheory.WHILE_RULE, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "PREFIX_FOLDR", listTheory.FOLDR_CONG, DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.dropWhile_eq_nil, listTheory.EVERY_SNOC, listTheory.EVERY_CONG, listTheory.EVERY_MEM_MONO, listTheory.EVERY_NOT_EXISTS, listTheory.EVERY_FILTER, listTheory.EVERY_MAP], BasicProvers.SRW_TAC [] [(DB.fetch "pred_set" "INJ_DEF"), (DB.fetch "pred_set" "SUBSET_DEF")]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.089671

EVERY_FOLDL
Statistics
  infstep : 526
  nodes   : 107
  maxdepth: 5
Time: 10.023127
  inferstep time: 7.881883
  node_find time: 0.119532
  node_crea time: 1.567064
    pred time: 0.456032
    thmpred time: 0.000031
    mc time: 0.745825
    inst time: 0.0
Proof status: Time Out
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.13788

EXISTS_FOLDR
proof length: 4
proof time: 0.003652
Statistics
  infstep : 106
  nodes   : 34
  maxdepth: 4
Time: 2.737971
  inferstep time: 2.215701
  node_find time: 0.017794
  node_crea time: 0.415829
    pred time: 0.136653
    thmpred time: 0.000004
    mc time: 0.183432
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [boolLib.REWRITE_TAC [listTheory.EXISTS_DEF, pred_setTheory.GSPEC_OR, listTheory.EXISTS_SNOC, listTheory.EXISTS_APPEND, listTheory.EXISTS_NOT_EVERY, listTheory.EXISTS_CONG, listTheory.EXISTS_MAP, listTheory.MONO_EXISTS, listTheory.EXISTS_MEM, listTheory.EXISTS_GENLIST, listTheory.NOT_EXISTS, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "PREFIX_FOLDR", listTheory.FOLDR_CONG, DB.fetch "rich_list" "EVERY_FOLDR"] THEN
  BasicProvers.SRW_TAC [] [pred_setTheory.GSPEC_OR, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "PREFIX_FOLDR", listTheory.FOLDR_CONG, DB.fetch "rich_list" "EVERY_FOLDR", DB.fetch "rich_list" "LENGTH_FOLDR", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "MAP_FOLDL", DB.fetch "rich_list" "SUFFIX_DEF", DB.fetch "rich_list" "REVERSE_FOLDL", listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.FOLDL_CONG, DB.fetch "rich_list" "EVERY_FOLDL", DB.fetch "rich_list" "APPEND_FOLDL"], BasicProvers.SRW_TAC [] [listTheory.EXISTS_DEF, pred_setTheory.GSPEC_OR, listTheory.EXISTS_SNOC, listTheory.EXISTS_APPEND, listTheory.EXISTS_NOT_EVERY, listTheory.EXISTS_MAP, listTheory.MONO_EXISTS, listTheory.EXISTS_MEM, listTheory.NOT_EXISTS, listTheory.EXISTS_CONG, listTheory.EXISTS_GENLIST, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "PREFIX_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", listTheory.FOLDR_CONG, DB.fetch "rich_list" "EVERY_FOLDR"]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.080012

EXISTS_FOLDL
Statistics
  infstep : 498
  nodes   : 119
  maxdepth: 5
Time: 10.043477
  inferstep time: 7.683204
  node_find time: 0.114534
  node_crea time: 1.841472
    pred time: 0.500391
    thmpred time: 0.000035
    mc time: 0.863151
    inst time: 0.0
Proof status: Time Out
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.211869

EVERY_FOLDR_MAP
proof length: 3
proof time: 0.003869
Statistics
  infstep : 6
  nodes   : 4
  maxdepth: 2
Time: 0.399358
  inferstep time: 0.352038
  node_find time: 0.000924
  node_crea time: 0.025933
    pred time: 0.009931
    thmpred time: 0.000002
    mc time: 0.024462
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [BasicProvers.SRW_TAC [] [listTheory.EVERY_DEF, listTheory.MAP, DB.fetch "rich_list" "EVERY_FOLDR", listTheory.EVERY_MAP, DB.fetch "rich_list" "ALL_EL_MAP", DB.fetch "rich_list" "EVERY_FOLDL", listTheory.dropWhile_eq_nil, listTheory.EVERY_SNOC, listTheory.EVERY_CONJ, listTheory.EVERY_APPEND, listTheory.EVERY_CONG, listTheory.EVERY_MEM_MONO, listTheory.IMP_EVERY_LUPDATE, listTheory.EVERY_EL, listTheory.EVERY_MEM, listTheory.EVERY_NOT_EXISTS], BasicProvers.SRW_TAC [] [listTheory.EVERY_DEF, listTheory.MAP, DB.fetch "rich_list" "EVERY_FOLDR", listTheory.EVERY_MAP, DB.fetch "rich_list" "ALL_EL_MAP", DB.fetch "rich_list" "EVERY_FOLDL", listTheory.IMP_EVERY_LUPDATE, listTheory.EVERY_SNOC, listTheory.EVERY_CONJ, listTheory.EVERY_MEM_MONO, listTheory.EVERY_EL, listTheory.EVERY_MEM, listTheory.EVERY_NOT_EXISTS, listTheory.FILTER_EQ_ID, listTheory.NOT_EVERY, listTheory.EVERY_FILTER]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.004253

EVERY_FOLDL_MAP
proof length: 2
proof time: 0.079678
Statistics
  infstep : 37
  nodes   : 18
  maxdepth: 3
Time: 1.624051
  inferstep time: 1.380751
  node_find time: 0.005522
  node_crea time: 0.169084
    pred time: 0.064696
    thmpred time: 0.000003
    mc time: 0.083356
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "EVERY_FOLDR_MAP", DB.fetch "rich_list" "EVERY_FOLDL", DB.fetch "rich_list" "EVERY_FOLDR", listTheory.EVERY_DEF, listTheory.EVERY_SNOC, listTheory.EVERY_CONJ, listTheory.EVERY_MEM_MONO, listTheory.EVERY_EL, listTheory.EVERY_MEM, listTheory.EVERY_NOT_EXISTS, listTheory.FILTER_EQ_ID, listTheory.NOT_EVERY, listTheory.EVERY_FILTER_IMP, listTheory.EVERY_MONOTONIC, listTheory.MONO_EVERY, listTheory.EVERY_APPEND] THEN metisTools.METIS_TAC [DB.fetch "rich_list" "EVERY_FOLDR_MAP", DB.fetch "rich_list" "FOLDR_MAP", DB.fetch "rich_list" "MAP_FOLDR", listTheory.FOLDR_CONS, DB.fetch "rich_list" "FOLDL_MAP", DB.fetch "rich_list" "MAP_FOLDL", listTheory.SUM_MAP_FOLDL, listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "FOLDL_FOLDR_REVERSE", DB.fetch "rich_list" "FOLDL_REVERSE", DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "FOLDR_FOLDL_REVERSE", DB.fetch "rich_list" "FOLDR_REVERSE", DB.fetch "rich_list" "EVERY_FOLDR", DB.fetch "rich_list" "EVERY_FOLDL", listTheory.MAP_EQ_NIL]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.005917

EXISTS_FOLDR_MAP
proof length: 1
proof time: 0.077118
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.101675
  inferstep time: 0.087067
  node_find time: 0.000138
  node_crea time: 0.011142
    pred time: 0.004449
    thmpred time: 0.0
    mc time: 0.006106
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "EXISTS_FOLDR" , DB.fetch "rich_list" "EXISTS_FOLDL" , listTheory.EXISTS_DEF , listTheory.EXISTS_SNOC , listTheory.EXISTS_APPEND , listTheory.EXISTS_MEM , listTheory.EXISTS_NOT_EVERY , listTheory.NOT_EXISTS , listTheory.MONO_EXISTS , listTheory.EXISTS_CONG , listTheory.EXISTS_MAP , listTheory.EXISTS_GENLIST , DB.fetch "rich_list" "EVERY_FOLDR_MAP" , DB.fetch "rich_list" "FOLDR_MAP" , DB.fetch "rich_list" "MAP_FOLDR" , listTheory.FOLDR_CONS])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.004643

EXISTS_FOLDL_MAP
proof length: 1
proof time: 0.076654
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.123419
  inferstep time: 0.107401
  node_find time: 0.000137
  node_crea time: 0.0093
    pred time: 0.003217
    thmpred time: 0.000001
    mc time: 0.008493
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "EXISTS_FOLDR_MAP" , DB.fetch "rich_list" "EXISTS_FOLDL" , DB.fetch "rich_list" "EXISTS_FOLDR" , listTheory.EXISTS_DEF , listTheory.EXISTS_SNOC , listTheory.EXISTS_APPEND , listTheory.EXISTS_MEM , listTheory.EXISTS_NOT_EVERY , listTheory.NOT_EXISTS , listTheory.MONO_EXISTS , listTheory.EXISTS_CONG , listTheory.EXISTS_MAP , listTheory.EXISTS_GENLIST , DB.fetch "rich_list" "EVERY_FOLDL_MAP" , DB.fetch "rich_list" "FOLDL_MAP" , DB.fetch "rich_list" "MAP_FOLDL"])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.004521

FOLDR_FILTER
proof length: 3
proof time: 0.05465
Statistics
  infstep : 6
  nodes   : 4
  maxdepth: 2
Time: 0.412235
  inferstep time: 0.347123
  node_find time: 0.001081
  node_crea time: 0.044379
    pred time: 0.019431
    thmpred time: 0.000002
    mc time: 0.028215
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [listTheory.FILTER, listTheory.FILTER_COND_REWRITE, DB.fetch "rich_list" "FOLDR_SINGLE", listTheory.FOLDR, DB.fetch "rich_list" "FOLDR_FOLDL_REVERSE", DB.fetch "rich_list" "FOLDR_REVERSE", DB.fetch "rich_list" "FOLDR_SNOC", DB.fetch "rich_list" "FOLDR_MAP", DB.fetch "rich_list" "COMM_MONOID_FOLDR", listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "FCOMM_FOLDR_APPEND", DB.fetch "rich_list" "FOLDR_APPEND", listTheory.FOLDR_CONG, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "FILTER_FOLDL"], BasicProvers.SRW_TAC [] []]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.163909

FOLDL_FILTER
proof length: 3
proof time: 0.047635
Statistics
  infstep : 5
  nodes   : 4
  maxdepth: 2
Time: 0.38489
  inferstep time: 0.306939
  node_find time: 0.000805
  node_crea time: 0.050506
    pred time: 0.021076
    thmpred time: 0.0
    mc time: 0.039205
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "FOLDR_FILTER", listTheory.FILTER, listTheory.FILTER_COND_REWRITE, listTheory.FOLDL, DB.fetch "rich_list" "FOLDL_SINGLE", DB.fetch "rich_list" "FOLDL_FOLDR_REVERSE", DB.fetch "rich_list" "FOLDL_REVERSE", DB.fetch "rich_list" "FOLDL_MAP", listTheory.FOLDL_ZIP_SAME, DB.fetch "rich_list" "COMM_MONOID_FOLDL", listTheory.FOLDL_SNOC, listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "FCOMM_FOLDL_APPEND", DB.fetch "rich_list" "FOLDL_APPEND", listTheory.FOLDL_CONG], BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM]]
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.224128

ASSOC_FOLDR_FLAT
Statistics
  infstep : 776
  nodes   : 180
  maxdepth: 6
Time: 10.094619
  inferstep time: 6.834802
  node_find time: 0.213745
  node_crea time: 2.56471
    pred time: 0.50106
    thmpred time: 0.000021
    mc time: 1.100318
    inst time: 0.0
Proof status: Time Out
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.215788

ASSOC_FOLDL_FLAT
Statistics
  infstep : 821
  nodes   : 197
  maxdepth: 7
Time: 10.00408
  inferstep time: 6.555552
  node_find time: 0.228237
  node_crea time: 2.711638
    pred time: 0.440698
    thmpred time: 0.000024
    mc time: 1.267514
    inst time: 0.0
Proof status: Time Out
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.247238

MAP_FLAT
proof length: 1
proof time: 0.036741
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.061853
  inferstep time: 0.043417
  node_find time: 0.000157
  node_crea time: 0.010185
    pred time: 0.003254
    thmpred time: 0.0
    mc time: 0.009375
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.MAP_FLAT , DB.fetch "rich_list" "ASSOC_FOLDL_FLAT" , DB.fetch "rich_list" "ASSOC_FOLDR_FLAT" , DB.fetch "rich_list" "LENGTH_FLAT" , listTheory.LIST_TO_SET_FLAT , DB.fetch "rich_list" "FLAT_SNOC" , listTheory.MEM_FLAT , DB.fetch "rich_list" "FLAT_FOLDL" , DB.fetch "rich_list" "FLAT_FOLDR" , listTheory.LIST_BIND_ID , listTheory.FLAT , listTheory.ALL_DISTINCT_FLAT_REVERSE , listTheory.FLAT_APPEND , listTheory.FLAT_EQ_NIL , listTheory.FLAT_compute , listTheory.LIST_BIND_def])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.025729

FILTER_FLAT
proof length: 4
proof time: 0.055344
Statistics
  infstep : 266
  nodes   : 54
  maxdepth: 4
Time: 4.128771
  inferstep time: 3.120401
  node_find time: 0.058388
  node_crea time: 0.718087
    pred time: 0.248458
    thmpred time: 0.000008
    mc time: 0.294795
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [BasicProvers.SRW_TAC [] [listTheory.FLAT, listTheory.FLAT_compute, DB.fetch "rich_list" "ASSOC_FOLDL_FLAT", DB.fetch "rich_list" "ASSOC_FOLDR_FLAT", DB.fetch "rich_list" "LENGTH_FLAT", DB.fetch "rich_list" "MAP_FLAT", listTheory.LIST_TO_SET_FLAT, listTheory.LIST_BIND_def, listTheory.MAP_FLAT, DB.fetch "rich_list" "FLAT_FOLDL", DB.fetch "rich_list" "FLAT_FOLDR", listTheory.FLAT_EQ_NIL, DB.fetch "rich_list" "FLAT_SNOC", listTheory.MEM_FLAT, listTheory.ALL_DISTINCT_FLAT_REVERSE, listTheory.FLAT_APPEND], simpLib.ASM_SIMP_TAC (BasicProvers.srw_ss ()) [(DB.fetch "list" "MAP_APPEND")] THEN
  metisTools.METIS_TAC [listTheory.FLAT, listTheory.FILTER_APPEND_DISTRIB, listTheory.FLAT_APPEND, DB.fetch "rich_list" "ASSOC_FOLDL_FLAT", DB.fetch "rich_list" "ASSOC_FOLDR_FLAT", DB.fetch "rich_list" "LENGTH_FLAT", DB.fetch "rich_list" "MAP_FLAT", listTheory.MAP_FLAT, listTheory.LIST_TO_SET_FLAT, listTheory.FLAT_compute, DB.fetch "rich_list" "FLAT_SNOC", DB.fetch "rich_list" "FLAT_FOLDL", DB.fetch "rich_list" "FLAT_FOLDR", listTheory.MEM_FLAT, listTheory.LIST_BIND_ID, listTheory.ALL_DISTINCT_FLAT_REVERSE]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.035859

EXISTS_DISJ
proof length: 5
proof time: 0.012541
Statistics
  infstep : 185
  nodes   : 67
  maxdepth: 5
Time: 5.749867
  inferstep time: 4.752161
  node_find time: 0.037264
  node_crea time: 0.75676
    pred time: 0.250223
    thmpred time: 0.000018
    mc time: 0.318145
    inst time: 0.0
Proof found: boolLib.REWRITE_TAC [pred_setTheory.GSPEC_OR, DB.fetch "rich_list" "EXISTS_FOLDR", listTheory.MONO_EXISTS, listTheory.EXISTS_SNOC, DB.fetch "rich_list" "EXISTS_FOLDL", DB.fetch "rich_list" "EXISTS_FOLDL_MAP", DB.fetch "rich_list" "EXISTS_FOLDR_MAP", listTheory.EXISTS_DEF, listTheory.EXISTS_APPEND, listTheory.EXISTS_NOT_EVERY, listTheory.EXISTS_MEM, listTheory.NOT_EXISTS, listTheory.EXISTS_CONG, listTheory.EXISTS_MAP, listTheory.EXISTS_GENLIST, listTheory.EVERY_NOT_EXISTS] THEN BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL
  [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "EXISTS_FOLDR", pred_setTheory.GSPEC_OR, DB.fetch "rich_list" "EXISTS_FOLDL", DB.fetch "rich_list" "EXISTS_FOLDR_MAP", listTheory.FOLDR, DB.fetch "rich_list" "FOLDR_MAP", listTheory.EXISTS_DEF, listTheory.MEM, DB.fetch "rich_list" "IS_SUBLIST", listTheory.LIST_TO_SET_DEF, DB.fetch "rich_list" "EXISTS_FOLDL_MAP", satTheory.OR_DUAL2, satTheory.OR_DUAL3, listTheory.LLEX_def, listTheory.NULL_DEF, numeralTheory.numeral_distrib],
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "EXISTS_FOLDR", pred_setTheory.GSPEC_OR, DB.fetch "rich_list" "EXISTS_FOLDL", DB.fetch "rich_list" "EXISTS_FOLDR_MAP", listTheory.FOLDR, listTheory.EXISTS_DEF, listTheory.MEM, listTheory.LIST_TO_SET_DEF, DB.fetch "rich_list" "FOLDR_MAP", listTheory.NULL_DEF, DB.fetch "rich_list" "IS_SUBLIST", listTheory.LLEX_def, DB.fetch "rich_list" "EXISTS_FOLDL_MAP", satTheory.OR_DUAL2, satTheory.OR_DUAL3, numeralTheory.numeral_distrib] THEN
  BasicProvers.PROVE_TAC []]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.091021

MEM_FOLDR
proof length: 3
proof time: 0.00207
Statistics
  infstep : 42
  nodes   : 10
  maxdepth: 3
Time: 1.109342
  inferstep time: 0.882919
  node_find time: 0.008036
  node_crea time: 0.152691
    pred time: 0.050449
    thmpred time: 0.000005
    mc time: 0.090891
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [BasicProvers.SRW_TAC [] [listTheory.MEM, pred_setTheory.INSERT_DEF, listTheory.LIST_TO_SET_DEF, listTheory.LIST_TO_SET, listTheory.LIST_TO_SET_THM, DB.fetch "rich_list" "EXISTS_FOLDR", listTheory.FOLDR_CONG, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "PREFIX_FOLDR", DB.fetch "rich_list" "EVERY_FOLDR", DB.fetch "rich_list" "LENGTH_FOLDR", DB.fetch "rich_list" "EXISTS_FOLDL", listTheory.FOLDL_CONG, listTheory.isPREFIX, listTheory.LLEX_def], BasicProvers.SRW_TAC [] [listTheory.MEM, pred_setTheory.INSERT_DEF, listTheory.LIST_TO_SET_DEF, listTheory.LIST_TO_SET, listTheory.LIST_TO_SET_THM, DB.fetch "rich_list" "EXISTS_FOLDR", listTheory.FOLDR_CONG, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "PREFIX_FOLDR", DB.fetch "rich_list" "MAP_FOLDR", DB.fetch "rich_list" "EVERY_FOLDR", DB.fetch "rich_list" "LENGTH_FOLDR", DB.fetch "rich_list" "EXISTS_FOLDL", listTheory.isPREFIX, listTheory.LENGTH_CONS, listTheory.LENGTH_EQ_NUM]]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.056067

MEM_FOLDL
proof length: 2
proof time: 0.105182
Statistics
  infstep : 11
  nodes   : 5
  maxdepth: 2
Time: 0.516955
  inferstep time: 0.45907
  node_find time: 0.001691
  node_crea time: 0.032263
    pred time: 0.011314
    thmpred time: 0.000001
    mc time: 0.026296
    inst time: 0.0
Proof found: boolLib.STRIP_TAC THEN metisTools.METIS_TAC [DB.fetch "rich_list" "EXISTS_FOLDL", DB.fetch "rich_list" "MEM_FOLDR", listTheory.FOLDL_CONG, listTheory.FOLDR_CONG, DB.fetch "rich_list" "EVERY_FOLDL", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "MAP_FOLDL", DB.fetch "rich_list" "REVERSE_FOLDL", DB.fetch "rich_list" "SUFFIX_DEF", DB.fetch "rich_list" "LENGTH_FOLDL", DB.fetch "rich_list" "APPEND_FOLDL", DB.fetch "rich_list" "EXISTS_FOLDR", listTheory.isPREFIX, listTheory.LLEX_def, whileTheory.OLEAST_EQNS, DB.fetch "rich_list" "EVERY_FOLDR"]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.062574

NULL_FOLDR
proof length: 4
proof time: 0.002345
Statistics
  infstep : 138
  nodes   : 37
  maxdepth: 4
Time: 1.873521
  inferstep time: 1.292944
  node_find time: 0.033515
  node_crea time: 0.399567
    pred time: 0.100674
    thmpred time: 0.000004
    mc time: 0.214253
    inst time: 0.0
Proof found: BasicProvers.Cases_on [HolKernel.QUOTE " (*#loc 1 18878*)l"] THENL [boolLib.REWRITE_TAC [listTheory.NULL_DEF, listTheory.NULL, whileTheory.OLEAST_EQNS, optionTheory.some_F, pred_setTheory.EMPTY_DEF, listTheory.NULL_EQ, listTheory.FRONT_CONS_EQ_NIL, listTheory.CONS, listTheory.MAP_TL, listTheory.NOT_NULL_MEM, listTheory.NULL_LENGTH, listTheory.list_case_compute, DB.fetch "rich_list" "LENGTH_NOT_NULL", listTheory.NULL_FILTER, listTheory.NULL_GENLIST, DB.fetch "rich_list" "NOT_NULL_SNOC"] THEN
  BasicProvers.SRW_TAC [] [whileTheory.OLEAST_EQNS, optionTheory.some_F, pred_setTheory.EMPTY_DEF, DB.fetch "rich_list" "EVERY_FOLDR", DB.fetch "rich_list" "EVERY_FOLDR_MAP", DB.fetch "rich_list" "EXISTS_FOLDR", DB.fetch "rich_list" "EXISTS_FOLDR_MAP", DB.fetch "rich_list" "MEM_FOLDR", listTheory.NULL_DEF, listTheory.isPREFIX, DB.fetch "rich_list" "IS_PREFIX", listTheory.isPREFIX_THM, DB.fetch "rich_list" "IS_SUBLIST", DB.fetch "rich_list" "IS_SUFFIX", listTheory.LLEX_def, numeralTheory.iSUB_DEF], BasicProvers.SRW_TAC [] [listTheory.NULL_DEF, listTheory.NULL, whileTheory.OLEAST_EQNS, optionTheory.some_F, pred_setTheory.EMPTY_DEF, listTheory.FRONT_CONS_EQ_NIL, listTheory.CONS, listTheory.MAP_TL, listTheory.NOT_NULL_MEM, listTheory.NULL_EQ, listTheory.NULL_LENGTH, listTheory.list_case_compute, DB.fetch "rich_list" "LENGTH_NOT_NULL", listTheory.NULL_FILTER, listTheory.NULL_GENLIST, DB.fetch "rich_list" "NOT_NULL_SNOC"]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.018036

NULL_FOLDL
Statistics
  infstep : 643
  nodes   : 118
  maxdepth: 5
Time: 10.00997
  inferstep time: 7.696971
  node_find time: 0.184493
  node_crea time: 1.481077
    pred time: 0.414568
    thmpred time: 0.000039
    mc time: 0.714935
    inst time: 0.0
Proof status: Time Out
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.033233

MAP_REVERSE
proof length: 3
proof time: 0.033096
Statistics
  infstep : 15
  nodes   : 6
  maxdepth: 2
Time: 0.491417
  inferstep time: 0.381328
  node_find time: 0.00297
  node_crea time: 0.080378
    pred time: 0.036328
    thmpred time: 0.0
    mc time: 0.036168
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 30146*)l"] THENL [metisTools.METIS_TAC [listTheory.MAP, listTheory.REVERSE_SNOC_DEF, listTheory.REVERSE_DEF, DB.fetch "rich_list" "REVERSE_FOLDL", DB.fetch "rich_list" "REVERSE_FOLDR", listTheory.HD_REVERSE, listTheory.LAST_REVERSE, listTheory.REVERSE_REV, listTheory.REVERSE_EQ_NIL, listTheory.REVERSE_EQ_SING, DB.fetch "rich_list" "FOLDL_FOLDR_REVERSE", DB.fetch "rich_list" "FOLDL_REVERSE", DB.fetch "rich_list" "FOLDR_FOLDL_REVERSE", DB.fetch "rich_list" "FOLDR_REVERSE", listTheory.LENGTH_o_REVERSE, listTheory.REVERSE_GENLIST], BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.065593

SEG_LENGTH_ID
proof length: 3
proof time: 0.148846
Statistics
  infstep : 6
  nodes   : 5
  maxdepth: 2
Time: 0.432469
  inferstep time: 0.336471
  node_find time: 0.001336
  node_crea time: 0.069816
    pred time: 0.029024
    thmpred time: 0.000002
    mc time: 0.041506
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [metisTools.METIS_TAC [listTheory.LENGTH, DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG", listTheory.LENGTH_EQ_NIL, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_NIL, listTheory.LENGTH_EQ_NUM_compute, listTheory.LENGTH_NIL_SYM, listTheory.NOT_NIL_EQ_LENGTH_NOT_0, listTheory.DROP_LENGTH_TOO_LONG, listTheory.splitAtPki_EQN, listTheory.DROP_NIL, listTheory.LAST_EL, listTheory.ZIP_EQ_NIL, listTheory.el_append3, listTheory.lupdate_append2], metisTools.METIS_TAC [listTheory.LENGTH, DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "LENGTH_SEG", listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.LENGTH_CONS, listTheory.DROP_compute, listTheory.TAKE_compute, listTheory.APPEND, listTheory.FILTER_COND_REWRITE, listTheory.FILTER_EQ_CONS, listTheory.FORALL_LIST, listTheory.isPREFIX, listTheory.list_CASES, listTheory.list_INDUCT, listTheory.splitAtPki_def]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.039253

SEG_SUC_CONS
proof length: 5
proof time: 0.197223
Statistics
  infstep : 7
  nodes   : 6
  maxdepth: 2
Time: 0.700625
  inferstep time: 0.538617
  node_find time: 0.001827
  node_crea time: 0.097732
    pred time: 0.035987
    thmpred time: 0.000003
    mc time: 0.075091
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  boolLib.REPEAT INDUCT_TAC
end THENL [boolLib.REWRITE_TAC [DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "LENGTH_SEG", numeralTheory.numeral_distrib, arithmeticTheory.SUB_LEFT_SUC, arithmeticTheory.BIT1, arithmeticTheory.BIT2, arithmeticTheory.ONE, DB.fetch "rich_list" "TAKE", DB.fetch "rich_list" "DROP", listTheory.LUPDATE_def, listTheory.LENGTH_EQ_NUM, DB.fetch "rich_list" "COUNT_LIST_AUX_def", listTheory.EL_restricted, listTheory.LENGTH_EQ_CONS, listTheory.LENGTH_CONS], metisTools.METIS_TAC [DB.fetch "rich_list" "SEG", pred_setTheory.tactictoe_thm_45, DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "LENGTH_SEG", numeralTheory.iiSUC, arithmeticTheory.LESS_EXP_SUC_MONO, DB.fetch "rich_list" "TAKE", DB.fetch "rich_list" "DROP", listTheory.LUPDATE_def, listTheory.LENGTH_EQ_NUM, DB.fetch "rich_list" "COUNT_LIST_AUX_def", listTheory.EL_restricted, listTheory.LENGTH_EQ_CONS, listTheory.LENGTH_CONS, listTheory.INDEX_FIND_def, listTheory.LENGTH], metisTools.METIS_TAC [DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "LENGTH_SEG", pred_setTheory.tactictoe_thm_45, numeralTheory.numeral_distrib, arithmeticTheory.SUB_LEFT_SUC, arithmeticTheory.BIT1, arithmeticTheory.BIT2, arithmeticTheory.ONE, DB.fetch "rich_list" "TAKE", DB.fetch "rich_list" "DROP", listTheory.LUPDATE_def, listTheory.LENGTH_EQ_NUM, DB.fetch "rich_list" "COUNT_LIST_AUX_def", listTheory.EL_restricted, listTheory.LENGTH_EQ_CONS], metisTools.METIS_TAC [DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", pred_setTheory.tactictoe_thm_45, arithmeticTheory.LESS_EXP_SUC_MONO, numeralTheory.iiSUC, DB.fetch "rich_list" "TAKE", DB.fetch "rich_list" "DROP", listTheory.LENGTH_EQ_CONS, listTheory.LUPDATE_def, listTheory.LENGTH_CONS, listTheory.LENGTH_EQ_NUM, DB.fetch "rich_list" "COUNT_LIST_AUX_def", listTheory.EL_restricted, listTheory.INDEX_FIND_def, listTheory.LENGTH]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.064718

SEG_0_SNOC
proof length: 6
proof time: 0.09458
Statistics
  infstep : 79
  nodes   : 19
  maxdepth: 4
Time: 2.388893
  inferstep time: 1.762725
  node_find time: 0.01975
  node_crea time: 0.459407
    pred time: 0.168388
    thmpred time: 0.000004
    mc time: 0.240626
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  boolLib.REPEAT INDUCT_TAC
end THENL [boolLib.REWRITE_TAC [DB.fetch "rich_list" "SEG", numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "SEG_SUC_CONS", listTheory.EL_SNOC, listTheory.EL_LENGTH_SNOC, listTheory.LENGTH_SNOC, listTheory.LUPDATE_SNOC, DB.fetch "rich_list" "SNOC_EQ_LENGTH_EQ", DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "LASTN", listTheory.SNOC_INDUCT, listTheory.SUM_SNOC, listTheory.SNOC], BasicProvers.Induct THENL
  [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "SEG", listTheory.SNOC, listTheory.LENGTH, DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "SEG_SUC_CONS", arithmeticTheory.NOT_SUC_LESS_EQ_0, numeralTheory.tactictoe_thm_12, numeralTheory.tactictoe_thm_16, numeralTheory.tactictoe_thm_2, numeralTheory.tactictoe_thm_3, numeralTheory.tactictoe_thm_11, numeralTheory.tactictoe_thm_15, numeralTheory.tactictoe_thm_21, numeralTheory.tactictoe_thm_24, arithmeticTheory.LESS_EQ_MONO],
  boolLib.REWRITE_TAC [listTheory.LENGTH, (DB.fetch "rich_list" "SEG"), boolLib.GSYM arithmeticTheory.ADD_SUC, arithmeticTheory.LESS_EQ_MONO] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "SEG", listTheory.SNOC, DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "SEG_LENGTH_ID", listTheory.LENGTH_TAKE, listTheory.LLEX_EL_THM, listTheory.TAKE_APPEND1, listTheory.ZIP_DROP, listTheory.LENGTH_TAKE_EQ, listTheory.LENGTH_SNOC, listTheory.EL_SNOC, listTheory.EL_LENGTH_SNOC, listTheory.LUPDATE_SNOC, DB.fetch "rich_list" "SNOC_EQ_LENGTH_EQ", listTheory.REVERSE_SNOC_DEF]]]
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.261422

BUTLASTN_SEG
Statistics
  infstep : 421
  nodes   : 100
  maxdepth: 5
Time: 10.031852
  inferstep time: 7.811212
  node_find time: 0.106698
  node_crea time: 1.645099
    pred time: 0.553623
    thmpred time: 0.00003
    mc time: 0.725761
    inst time: 0.0
Proof status: Time Out
Org tac number: 10
Original proof time: 0.0
Replaying proof: 0.387151

LASTN_CONS
proof length: 1
proof time: 0.003596
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.128088
  inferstep time: 0.112178
  node_find time: 0.000316
  node_crea time: 0.009866
    pred time: 0.003085
    thmpred time: 0.0
    mc time: 0.007325
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "rich_list" "LASTN" , DB.fetch "rich_list" "LASTN_def" , listTheory.LENGTH_TAKE , DB.fetch "rich_list" "BUTLASTN_SEG" , DB.fetch "rich_list" "SEG_0_SNOC" , listTheory.LLEX_EL_THM , listTheory.TAKE_APPEND1 , listTheory.ZIP_DROP , listTheory.LENGTH_TAKE_EQ , listTheory.LENGTH_EQ_CONS , listTheory.LENGTH_CONS , listTheory.LENGTH_EQ_NUM , listTheory.LENGTH_EQ_NUM_compute , listTheory.LENGTH_FRONT_CONS , listTheory.LUPDATE_LENGTH , listTheory.LENGTH ])
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.211707

LENGTH_LASTN
proof length: 1
proof time: 0.001908
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.145618
  inferstep time: 0.129462
  node_find time: 0.000327
  node_crea time: 0.00901
    pred time: 0.002609
    thmpred time: 0.000001
    mc time: 0.008623
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "rich_list" "LASTN_CONS" , DB.fetch "rich_list" "LASTN" , DB.fetch "rich_list" "LASTN_def" , listTheory.LENGTH_TAKE , DB.fetch "rich_list" "BUTLASTN_SEG" , DB.fetch "rich_list" "SEG_0_SNOC" , listTheory.LLEX_EL_THM , listTheory.TAKE_APPEND1 , listTheory.ZIP_DROP , listTheory.LENGTH_TAKE_EQ , listTheory.TAKE_LENGTH_TOO_LONG , listTheory.DROP_LENGTH_TOO_LONG , DB.fetch "rich_list" "LENGTH_SEG" , DB.fetch "rich_list" "LENGTH_FILTER_LEQ" , listTheory.EL_LENGTH_dropWhile_REVERSE , listTheory.LENGTH_dropWhile_LESS_EQ ])
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.244787

LASTN_LENGTH_ID
proof length: 2
proof time: 0.003728
Statistics
  infstep : 14
  nodes   : 9
  maxdepth: 3
Time: 0.609325
  inferstep time: 0.501041
  node_find time: 0.002389
  node_crea time: 0.08226
    pred time: 0.030821
    thmpred time: 0.000001
    mc time: 0.042335
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "LASTN_def", listTheory.LENGTH_SNOC, listTheory.ALL_DISTINCT_EL_IMP, listTheory.EL_ALL_DISTINCT_EL_EQ, listTheory.ALL_DISTINCT_FILTER_EL_IMP, listTheory.MEM_EL, listTheory.DROP_LENGTH_TOO_LONG, listTheory.EL_LENGTH_SNOC, listTheory.EL_MAP, listTheory.EL_REVERSE, listTheory.EL_SNOC, listTheory.EVERY_EL, listTheory.LENGTH_CONS] THEN BasicProvers.SRW_TAC [] [listTheory.TAKE_LENGTH_ID, DB.fetch "rich_list" "LASTN_def", listTheory.LENGTH_TAKE, listTheory.TAKE_LENGTH_ID_rwt, listTheory.TAKE_LENGTH_TOO_LONG, listTheory.splitAtPki_EQN, listTheory.LLEX_EL_THM, listTheory.TAKE_APPEND1, listTheory.TAKE_APPEND2, listTheory.LENGTH_TAKE_EQ, DB.fetch "rich_list" "TAKE", listTheory.TAKE_0, listTheory.MAP_TAKE, listTheory.TAKE_DROP, listTheory.TAKE_SUM, listTheory.TAKE_compute]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.112554

LASTN_LASTN
Statistics
  infstep : 548
  nodes   : 98
  maxdepth: 5
Time: 10.027572
  inferstep time: 7.526162
  node_find time: 0.1486
  node_crea time: 1.79954
    pred time: 0.501636
    thmpred time: 0.000033
    mc time: 0.759244
    inst time: 0.0
Proof status: Time Out
Org tac number: 12
Original proof time: 0.0
Replaying proof: 0.323876

TAKE_SNOC
proof length: 4
proof time: 0.065358
Statistics
  infstep : 9
  nodes   : 6
  maxdepth: 3
Time: 0.590363
  inferstep time: 0.440488
  node_find time: 0.002083
  node_crea time: 0.079516
    pred time: 0.026599
    thmpred time: 0.000002
    mc time: 0.085697
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 53169*)l"] THENL [metisTools.METIS_TAC [listTheory.SNOC, listTheory.LENGTH, listTheory.TAKE_def, listTheory.TAKE_nil, listTheory.LENGTH_TAKE, listTheory.LLEX_EL_THM, listTheory.TAKE_APPEND1, listTheory.LENGTH_TAKE_EQ, listTheory.splitAtPki_EQN, listTheory.TAKE_LENGTH_TOO_LONG, listTheory.TAKE_APPEND2, listTheory.TAKE_LENGTH_ID_rwt, DB.fetch "rich_list" "TAKE", listTheory.TAKE_cons, listTheory.MAP_TAKE, listTheory.TAKE_DROP], BasicProvers.SRW_TAC [] [listTheory.SNOC, listTheory.LENGTH, listTheory.TAKE_cons, listTheory.TAKE_def, listTheory.LENGTH_TAKE, listTheory.LLEX_EL_THM, listTheory.TAKE_APPEND1, listTheory.LENGTH_TAKE_EQ, DB.fetch "rich_list" "TAKE", listTheory.TAKE_LENGTH_TOO_LONG, listTheory.TAKE_LENGTH_ID_rwt, listTheory.splitAtPki_EQN, listTheory.TAKE_APPEND2, listTheory.MAP_TAKE, listTheory.TAKE_DROP, listTheory.TAKE_SUM] THEN
  BasicProvers.SRW_TAC [numSimps.ARITH_ss] [listTheory.TAKE_def, listTheory.TAKE_cons, listTheory.SNOC_APPEND, listTheory.el_append3, listTheory.lupdate_append2, listTheory.DROP_def, listTheory.DROP_cons, arithmeticTheory.PRE_SUB1, listTheory.TAKE_APPEND2, listTheory.TAKE_compute, listTheory.TAKE_APPEND1, listTheory.TAKE_DROP, listTheory.TAKE_SUM, DB.fetch "rich_list" "TAKE", listTheory.TAKE_0, listTheory.splitAtPki_EQN]]
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.201496

BUTLASTN_LENGTH_NIL
proof length: 2
proof time: 0.078449
Statistics
  infstep : 3
  nodes   : 3
  maxdepth: 2
Time: 0.261849
  inferstep time: 0.230989
  node_find time: 0.000629
  node_crea time: 0.022343
    pred time: 0.008639
    thmpred time: 0.000001
    mc time: 0.01248
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "BUTLASTN_def", listTheory.DROP_LENGTH_TOO_LONG, listTheory.LENGTH_EQ_NIL, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_NIL, listTheory.LENGTH_EQ_NUM_compute, listTheory.LENGTH_NIL_SYM, listTheory.splitAtPki_EQN, listTheory.LENGTH, listTheory.DROP_NIL, listTheory.LAST_EL, listTheory.ZIP_EQ_NIL, listTheory.el_append3, listTheory.lupdate_append2] THEN metisTools.METIS_TAC [DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "LENGTH_SEG", listTheory.LENGTH_EQ_NIL, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_NIL, listTheory.LENGTH_EQ_NUM_compute, listTheory.LENGTH_NIL_SYM, listTheory.TAKE_0, listTheory.LUPDATE_def, DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "TAKE", listTheory.DROP_compute, listTheory.LUPDATE_compute]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.031892

BUTLASTN_SUC_FRONT
proof length: 4
proof time: 0.035942
Statistics
  infstep : 152
  nodes   : 41
  maxdepth: 5
Time: 4.086093
  inferstep time: 3.168867
  node_find time: 0.040385
  node_crea time: 0.666573
    pred time: 0.258048
    thmpred time: 0.000034
    mc time: 0.291771
    inst time: 0.0
Proof found: boolLib.STRIP_TAC THEN Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL
  [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "BUTLASTN", listTheory.LENGTH, DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "ELL", listTheory.APPEND_FRONT_LAST, listTheory.FRONT_CONS, listTheory.FRONT_DEF, listTheory.FRONT_CONS_EQ_NIL, DB.fetch "rich_list" "ELL_compute", listTheory.FRONT_SNOC, listTheory.MEM_DROP, listTheory.LENGTH_EQ_NUM, listTheory.splitAtPki_EQN],
  metisTools.METIS_TAC [DB.fetch "rich_list" "BUTLASTN", listTheory.FRONT_SNOC, listTheory.LENGTH_SNOC, DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.APPEND_FRONT_LAST, listTheory.FRONT_CONS, listTheory.FRONT_CONS_EQ_NIL, listTheory.FRONT_DEF, listTheory.EL_SNOC, DB.fetch "rich_list" "TAKE_SNOC", DB.fetch "rich_list" "SEG_0_SNOC"]]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.065318

BUTLASTN_FRONT
proof length: 7
proof time: 0.098093
Statistics
  infstep : 218
  nodes   : 65
  maxdepth: 5
Time: 5.188291
  inferstep time: 3.896401
  node_find time: 0.057719
  node_crea time: 0.975961
    pred time: 0.287413
    thmpred time: 0.000018
    mc time: 0.466991
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  INDUCT_TAC
end THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.APPEND_FRONT_LAST, listTheory.FRONT_DEF, listTheory.LENGTH_TL, DB.fetch "rich_list" "LENGTH_NOT_NULL", listTheory.splitAtPki_APPEND, listTheory.NOT_NIL_EQ_LENGTH_NOT_0, DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", DB.fetch "rich_list" "BUTLASTN_def", listTheory.LENGTH_FRONT_CONS, listTheory.FRONT_SNOC, listTheory.FRONT_CONS], Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL
  [BasicProvers.SRW_TAC [] [listTheory.LENGTH, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "BUTLASTN", arithmeticTheory.tactictoe_thm_11, DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "BUTLASTN_def", listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "ELL", listTheory.APPEND_FRONT_LAST, listTheory.FRONT_CONS, listTheory.FRONT_DEF, listTheory.FRONT_CONS_EQ_NIL, DB.fetch "rich_list" "ELL_compute", listTheory.FRONT_SNOC, arithmeticTheory.LESS_NOT_SUC],
  boolLib.REWRITE_TAC [DB.fetch "rich_list" "BUTLASTN", listTheory.FRONT_SNOC, listTheory.LENGTH_SNOC, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", arithmeticTheory.tactictoe_thm_11, DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", DB.fetch "rich_list" "BUTLASTN_def", listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.APPEND_FRONT_LAST, listTheory.FRONT_CONS, listTheory.FRONT_CONS_EQ_NIL, listTheory.FRONT_DEF, arithmeticTheory.LESS_NOT_SUC] THEN
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "BUTLASTN_def", listTheory.MEM_DROP, DB.fetch "rich_list" "DROP", arithmeticTheory.tactictoe_thm_11, listTheory.LENGTH_SNOC, DB.fetch "rich_list" "LENGTH_SCANL", DB.fetch "rich_list" "LENGTH_SCANR", listTheory.LENGTH, listTheory.tactictoe_thm_14, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.APPEND_FRONT_LAST, listTheory.FRONT_SNOC, listTheory.FRONT_CONS] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "DROP", listTheory.MEM_DROP, arithmeticTheory.tactictoe_thm_11, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.FRONT_SNOC, listTheory.APPEND_FRONT_LAST, listTheory.LENGTH_FRONT_CONS, listTheory.FRONT_CONS, listTheory.FRONT_DEF, listTheory.FRONT_CONS_EQ_NIL, listTheory.last_drop, listTheory.DROP_LENGTH_TOO_LONG, listTheory.LENGTH_DROP]]]
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.21155

LENGTH_BUTLASTN
proof length: 2
proof time: 0.002982
Statistics
  infstep : 39
  nodes   : 11
  maxdepth: 2
Time: 0.986859
  inferstep time: 0.757841
  node_find time: 0.010214
  node_crea time: 0.170468
    pred time: 0.061762
    thmpred time: 0.000002
    mc time: 0.075561
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "BUTLASTN_def", listTheory.EL_REVERSE, listTheory.LENGTH_DROP, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", listTheory.LENGTH_TL, DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", listTheory.LENGTH_TAKE, DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "TAKE_SNOC", DB.fetch "rich_list" "SEG_0_SNOC", listTheory.LLEX_EL_THM] THEN BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "BUTLASTN_SEG", listTheory.EL_REVERSE, listTheory.LENGTH_DROP, listTheory.LENGTH_TL, DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG", listTheory.LENGTH_EQ_NUM_compute, listTheory.TAKE_APPEND2, listTheory.EL_APPEND_EQN, listTheory.PAD_LEFT, listTheory.PAD_RIGHT, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_NIL_SYM, listTheory.LENGTH_NIL]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.158953

BUTLASTN_BUTLASTN
Statistics
  infstep : 357
  nodes   : 93
  maxdepth: 5
Time: 10.0028
  inferstep time: 7.844806
  node_find time: 0.094696
  node_crea time: 1.654021
    pred time: 0.504064
    thmpred time: 0.000032
    mc time: 0.692034
    inst time: 0.0
Proof status: Time Out
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.171045

APPEND_BUTLASTN_LASTN
Statistics
  infstep : 605
  nodes   : 91
  maxdepth: 5
Time: 10.013155
  inferstep time: 7.633797
  node_find time: 0.176773
  node_crea time: 1.57969
    pred time: 0.517473
    thmpred time: 0.000032
    mc time: 0.701769
    inst time: 0.0
Proof status: Time Out
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.250589

APPEND_TAKE_LASTN
proof length: 5
proof time: 0.096441
Statistics
  infstep : 255
  nodes   : 81
  maxdepth: 5
Time: 9.38217
  inferstep time: 7.013289
  node_find time: 0.081355
  node_crea time: 1.732691
    pred time: 0.530222
    thmpred time: 0.000028
    mc time: 0.929936
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [listTheory.LENGTH, listTheory.TAKE_def, listTheory.TAKE_nil, DB.fetch "rich_list" "LASTN_def", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "LASTN_LENGTH_ID", listTheory.TAKE_SUM, listTheory.TAKE_APPEND1, listTheory.TAKE_APPEND2, listTheory.TAKE_DROP, listTheory.splitAtPki_EQN, listTheory.TAKE_LENGTH_ID_rwt], BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LASTN_CONS", listTheory.LENGTH, listTheory.TAKE_cons, listTheory.TAKE_def, DB.fetch "rich_list" "LASTN_def", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "LASTN_LENGTH_ID", listTheory.TAKE_SUM, listTheory.TAKE_APPEND1, listTheory.TAKE_APPEND2, listTheory.TAKE_DROP, DB.fetch "rich_list" "TAKE", listTheory.TAKE_LENGTH_ID_rwt] THEN
  simpLib.FULL_SIMP_TAC (boolSimps.bool_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.ARITH_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.REDUCE_ss) [listTheory.REVERSE_DEF, listTheory.TAKE_def, listTheory.TAKE_cons, listTheory.REVERSE_APPEND, listTheory.REV_REVERSE_LEM, DB.fetch "rich_list" "LASTN_def", listTheory.TAKE_APPEND2, listTheory.TAKE_SUM, listTheory.TAKE_DROP, listTheory.TAKE_APPEND1, DB.fetch "rich_list" "TAKE", listTheory.DROP_def, listTheory.splitAtPki_EQN, listTheory.DROP_cons, listTheory.TAKE_nil, listTheory.TAKE_LENGTH_ID_rwt] THEN
  BasicProvers.SRW_TAC [numSimps.ARITH_ss] [listTheory.TAKE_def, listTheory.TAKE_cons, listTheory.SNOC_APPEND, listTheory.el_append3, listTheory.lupdate_append2, listTheory.DROP_def, listTheory.DROP_cons, arithmeticTheory.PRE_SUB1, listTheory.TAKE_APPEND2, listTheory.TAKE_compute, listTheory.TAKE_APPEND1, listTheory.TAKE_DROP, listTheory.TAKE_SUM, DB.fetch "rich_list" "TAKE", listTheory.TAKE_0, listTheory.splitAtPki_EQN]]
Org tac number: 17
Original proof time: 0.0
Replaying proof: 0.422628

BUTLASTN_APPEND2
Statistics
  infstep : 495
  nodes   : 87
  maxdepth: 5
Time: 10.057651
  inferstep time: 7.525891
  node_find time: 0.149881
  node_crea time: 1.805287
    pred time: 0.622159
    thmpred time: 0.000045
    mc time: 0.7053
    inst time: 0.0
Proof status: Time Out
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.120154

LASTN_LENGTH_APPEND
proof length: 2
proof time: 0.0044
Statistics
  infstep : 4
  nodes   : 3
  maxdepth: 2
Time: 0.256981
  inferstep time: 0.231996
  node_find time: 0.000727
  node_crea time: 0.015739
    pred time: 0.006176
    thmpred time: 0.0
    mc time: 0.009392
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LASTN_LENGTH_ID", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "LASTN_def", listTheory.APPEND_11_LENGTH, listTheory.LENGTH_APPEND, listTheory.APPEND_LENGTH_EQ, listTheory.EL_APPEND_EQN, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_SUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.TAKE_APPEND1] THEN BasicProvers.SRW_TAC [] [listTheory.TAKE_LENGTH_ID, DB.fetch "rich_list" "LASTN_def", listTheory.TAKE_APPEND1, listTheory.TAKE_APPEND2, listTheory.LLEX_EL_THM, DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "TAKE_SNOC", listTheory.LENGTH_TAKE, listTheory.TAKE_LENGTH_ID_rwt, listTheory.TAKE_LENGTH_TOO_LONG, listTheory.LENGTH_REVERSE, listTheory.EL_REVERSE, DB.fetch "rich_list" "TAKE", listTheory.TAKE_def, listTheory.TAKE_0, listTheory.TAKE_cons]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.05595

BUTLASTN_CONS
proof length: 6
proof time: 0.098888
Statistics
  infstep : 160
  nodes   : 30
  maxdepth: 4
Time: 3.753519
  inferstep time: 2.916683
  node_find time: 0.04003
  node_crea time: 0.55375
    pred time: 0.178114
    thmpred time: 0.000012
    mc time: 0.30343
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  INDUCT_TAC
end THENL [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "BUTLASTN", numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_APPEND2", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", DB.fetch "rich_list" "BUTLASTN_LENGTH_APPEND", DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "LASTN_CONS", listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute], Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL
  [BasicProvers.SRW_TAC [] [listTheory.LENGTH, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_APPEND2", DB.fetch "rich_list" "BUTLASTN_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_LENGTH_APPEND", DB.fetch "rich_list" "BUTLASTN_def", arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.NOT_LEQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.LESS_EQ],
  boolLib.REWRITE_TAC [listTheory.LENGTH_SNOC, boolLib.GSYM (HolKernel.CONJUNCT2 listTheory.SNOC), arithmeticTheory.LESS_EQ_MONO] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "BUTLASTN", listTheory.SNOC, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_APPEND2", DB.fetch "rich_list" "TAKE_SNOC", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "BUTLASTN_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", DB.fetch "rich_list" "BUTLASTN_LENGTH_APPEND", DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "LASTN_CONS", listTheory.LENGTH_TAKE]]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.082221

LAST_LASTN_LAST
proof length: 5
proof time: 0.103393
Statistics
  infstep : 42
  nodes   : 18
  maxdepth: 3
Time: 1.525688
  inferstep time: 1.131812
  node_find time: 0.009181
  node_crea time: 0.286601
    pred time: 0.084869
    thmpred time: 0.000003
    mc time: 0.187091
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  INDUCT_TAC
end THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "LASTN", numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, listTheory.last_drop, listTheory.LAST_EL, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.APPEND_FRONT_LAST, listTheory.LAST_MAP, listTheory.HD_REVERSE, listTheory.LAST_DEF, listTheory.LAST_CONS_cond, DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LENGTH_LASTN"], Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL
  [BasicProvers.SRW_TAC [] [arithmeticTheory.tactictoe_thm_11, DB.fetch "rich_list" "LASTN", prim_recTheory.LESS_0, listTheory.LENGTH, DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "LASTN_LENGTH_ID", DB.fetch "rich_list" "LASTN_LENGTH_APPEND", DB.fetch "rich_list" "LASTN_def", listTheory.LAST_EL, listTheory.last_drop, DB.fetch "rich_list" "ELL", listTheory.APPEND_FRONT_LAST],
  metisTools.METIS_TAC [DB.fetch "rich_list" "LASTN", arithmeticTheory.tactictoe_thm_11, listTheory.LAST_SNOC, listTheory.LENGTH_SNOC, prim_recTheory.LESS_0, DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "LASTN_LENGTH_ID", DB.fetch "rich_list" "LASTN_LENGTH_APPEND", DB.fetch "rich_list" "LASTN_def", listTheory.last_drop, listTheory.LAST_EL, DB.fetch "rich_list" "ELL"]]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.084344
Replaying proof: 0.000047

LASTN_BUTLASTN
proof length: 13
proof time: 0.183614
Statistics
  infstep : 217
  nodes   : 68
  maxdepth: 5
Time: 7.040889
  inferstep time: 5.648586
  node_find time: 0.051939
  node_crea time: 1.020938
    pred time: 0.350487
    thmpred time: 0.000019
    mc time: 0.452725
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  boolLib.REPEAT INDUCT_TAC
end THENL [Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL
  [boolLib.REWRITE_TAC [listTheory.LENGTH, arithmeticTheory.ADD, arithmeticTheory.ADD_0, (DB.fetch "rich_list" "BUTLASTN")],
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "BUTLASTN", listTheory.LENGTH_SNOC, numeralTheory.numeral_distrib, arithmeticTheory.ADD, arithmeticTheory.ADD_CLAUSES, DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "LASTN_LENGTH_ID", DB.fetch "rich_list" "LASTN_LENGTH_APPEND", DB.fetch "rich_list" "LASTN_def"]], boolLib.ASM_REWRITE_TAC [(DB.fetch "arithmetic" "ADD_CLAUSES"), (DB.fetch "arithmetic" "SUB_0"), (DB.fetch "arithmetic" "SUB_MONO_EQ"), (DB.fetch "arithmetic" "ZERO_LESS_EQ"), (DB.fetch "arithmetic" "NOT_SUC_LESS_EQ_0"), (DB.fetch "arithmetic" "LESS_EQ_MONO")] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "LASTN_LENGTH_ID", DB.fetch "rich_list" "LASTN_LENGTH_APPEND", DB.fetch "rich_list" "LASTN_def", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "BUTLASTN_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_CONS"], metisTools.METIS_TAC [DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", arithmeticTheory.ADD, arithmeticTheory.ADD_CLAUSES, DB.fetch "rich_list" "tactictoe_thm_5", arithmeticTheory.SUC_ADD_SYM, DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "LASTN_LENGTH_ID", DB.fetch "rich_list" "LASTN_LENGTH_APPEND", DB.fetch "rich_list" "LASTN_def"], Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL
  [boolLib.REWRITE_TAC [listTheory.LENGTH, (DB.fetch "rich_list" "SEG"), boolLib.GSYM arithmeticTheory.ADD_SUC, arithmeticTheory.LESS_EQ_MONO] THEN
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", arithmeticTheory.ADD, arithmeticTheory.ADD_CLAUSES, DB.fetch "rich_list" "tactictoe_thm_5", arithmeticTheory.SUC_ADD_SYM, DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "LASTN_def", DB.fetch "rich_list" "LASTN_LENGTH_ID"],
  boolLib.REWRITE_TAC [listTheory.LENGTH, arithmeticTheory.ADD, arithmeticTheory.ADD_0, (DB.fetch "rich_list" "BUTLASTN")] THEN
  boolLib.REWRITE_TAC [listTheory.LENGTH_SNOC, arithmeticTheory.LESS_EQ_MONO, (DB.fetch "rich_list" "tactictoe_thm_5")] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", arithmeticTheory.ADD, DB.fetch "rich_list" "tactictoe_thm_5", arithmeticTheory.SUC_ADD_SYM, arithmeticTheory.ADD_CLAUSES, DB.fetch "rich_list" "BUTLASTN_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_CONS", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_APPEND2", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL"]]]
Org tac number: 10
Original proof time: 0.0
Replaying proof: 0.263607

BUTLASTN_LASTN
proof length: 9
proof time: 0.167328
Statistics
  infstep : 69
  nodes   : 26
  maxdepth: 3
Time: 2.554601
  inferstep time: 1.930719
  node_find time: 0.016433
  node_crea time: 0.423412
    pred time: 0.137523
    thmpred time: 0.000007
    mc time: 0.248354
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  boolLib.REPEAT INDUCT_TAC
end THENL [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "BUTLASTN", numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, arithmeticTheory.SUB_0, arithmeticTheory.SUB, DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "LASTN_LENGTH_ID", DB.fetch "rich_list" "LASTN_LENGTH_APPEND"], Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL
  [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "BUTLASTN", listTheory.LENGTH, numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", arithmeticTheory.SUB_LEFT_SUC, arithmeticTheory.SUB, numeralTheory.tactictoe_thm_14, numeralTheory.tactictoe_thm_17, numeralTheory.tactictoe_thm_20, numeralTheory.tactictoe_thm_23, numeralTheory.tactictoe_thm_26, arithmeticTheory.SUB_MONO_EQ],
  metisTools.METIS_TAC [DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "BUTLASTN", listTheory.LENGTH_SNOC, numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", arithmeticTheory.SUB_LEFT_SUC, arithmeticTheory.SUB, numeralTheory.tactictoe_thm_14, numeralTheory.tactictoe_thm_17, numeralTheory.tactictoe_thm_20, numeralTheory.tactictoe_thm_23, numeralTheory.tactictoe_thm_26, arithmeticTheory.SUB_MONO_EQ]], BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", arithmeticTheory.NOT_SUC_LESS_EQ_0, numeralTheory.numeral_distrib, DB.fetch "rich_list" "BUTLASTN", arithmeticTheory.ZERO_LESS_EQ, arithmeticTheory.SUB, arithmeticTheory.SUB_0, DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "APPEND_TAKE_LASTN"], Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL
  [BasicProvers.SRW_TAC [] [arithmeticTheory.SUB_MONO_EQ, DB.fetch "rich_list" "LASTN", listTheory.LENGTH, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "BUTLASTN", arithmeticTheory.LESS_EQ_MONO, pred_setTheory.tactictoe_thm_28, DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", arithmeticTheory.SUB_LEFT_SUC, arithmeticTheory.SUB, numeralTheory.tactictoe_thm_14, numeralTheory.tactictoe_thm_17, numeralTheory.tactictoe_thm_20, numeralTheory.tactictoe_thm_23],
  metisTools.METIS_TAC [DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "BUTLASTN", arithmeticTheory.SUB_MONO_EQ, listTheory.LENGTH_SNOC, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", arithmeticTheory.LESS_EQ_MONO, pred_setTheory.tactictoe_thm_28, DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", arithmeticTheory.SUB_LEFT_SUC, arithmeticTheory.SUB, numeralTheory.tactictoe_thm_14, numeralTheory.tactictoe_thm_17, numeralTheory.tactictoe_thm_20, numeralTheory.tactictoe_thm_23]]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.122433

LASTN_1
proof length: 3
proof time: 0.03739
Statistics
  infstep : 117
  nodes   : 45
  maxdepth: 4
Time: 3.937462
  inferstep time: 2.926108
  node_find time: 0.031462
  node_crea time: 0.802633
    pred time: 0.234138
    thmpred time: 0.000012
    mc time: 0.445108
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LASTN_def", DB.fetch "rich_list" "LASTN_LENGTH_ID", DB.fetch "rich_list" "LASTN_LENGTH_APPEND", DB.fetch "rich_list" "ELL_compute", listTheory.APPEND_FRONT_LAST, listTheory.LAST_CONS], BasicProvers.SRW_TAC [] [listTheory.LAST_SNOC, DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LASTN_LENGTH_ID", DB.fetch "rich_list" "LASTN_def", DB.fetch "rich_list" "LASTN_LENGTH_APPEND", DB.fetch "rich_list" "ELL_compute", listTheory.APPEND_FRONT_LAST]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.117907

BUTLASTN_1
proof length: 4
proof time: 0.035644
Statistics
  infstep : 44
  nodes   : 16
  maxdepth: 3
Time: 1.422352
  inferstep time: 0.978051
  node_find time: 0.014783
  node_crea time: 0.335426
    pred time: 0.095567
    thmpred time: 0.000005
    mc time: 0.203213
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "ELL_compute", listTheory.APPEND_FRONT_LAST, listTheory.FRONT_CONS, listTheory.FRONT_DEF, listTheory.FRONT_CONS_EQ_NIL, DB.fetch "rich_list" "ELL", listTheory.LENGTH_FRONT_CONS, listTheory.FRONT_SNOC, DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", DB.fetch "rich_list" "BUTLASTN_LENGTH_CONS", DB.fetch "rich_list" "BUTLASTN_CONS", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_BUTLASTN"], boolLib.REWRITE_TAC [DB.fetch "rich_list" "BUTLASTN", listTheory.FRONT_SNOC, listTheory.LENGTH_SNOC, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", arithmeticTheory.tactictoe_thm_11, DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", DB.fetch "rich_list" "BUTLASTN_def", listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.APPEND_FRONT_LAST, listTheory.FRONT_CONS, listTheory.FRONT_CONS_EQ_NIL, listTheory.FRONT_DEF, arithmeticTheory.LESS_NOT_SUC] THEN
  BasicProvers.SRW_TAC [] [listTheory.REVERSE_SNOC, DB.fetch "rich_list" "BUTLASTN_def", listTheory.DROP_compute, listTheory.DROP_def, listTheory.DROP_cons, listTheory.SNOC_INDUCT, DB.fetch "rich_list" "LASTN", listTheory.SNOC, DB.fetch "rich_list" "SEG_0_SNOC", listTheory.LENGTH_SNOC, DB.fetch "rich_list" "BUTLASTN", listTheory.FRONT_SNOC, listTheory.LAST_SNOC, listTheory.APPEND_SNOC, listTheory.DROP_nil, DB.fetch "rich_list" "DROP"]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.12259

BUTLASTN_APPEND1
Statistics
  infstep : 302
  nodes   : 77
  maxdepth: 5
Time: 10.067711
  inferstep time: 7.61564
  node_find time: 0.105556
  node_crea time: 1.91827
    pred time: 0.706684
    thmpred time: 0.000033
    mc time: 0.733894
    inst time: 0.0
Proof status: Time Out
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.145207

LASTN_APPEND2
proof length: 1
proof time: 0.002996
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.143666
  inferstep time: 0.124032
  node_find time: 0.000385
  node_crea time: 0.011868
    pred time: 0.004029
    thmpred time: 0.0
    mc time: 0.009577
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN" , DB.fetch "rich_list" "BUTLASTN_LASTN" , DB.fetch "rich_list" "BUTLASTN_LASTN_NIL" , DB.fetch "rich_list" "LENGTH_LASTN" , DB.fetch "rich_list" "LASTN_CONS" , DB.fetch "rich_list" "LASTN_LASTN" , DB.fetch "rich_list" "LAST_LASTN_LAST" , DB.fetch "rich_list" "APPEND_TAKE_LASTN" , DB.fetch "rich_list" "LASTN" , DB.fetch "rich_list" "LASTN_def" , DB.fetch "rich_list" "LASTN_BUTLASTN" , DB.fetch "rich_list" "LASTN_LENGTH_APPEND" , listTheory.TAKE_APPEND1 , DB.fetch "rich_list" "BUTLASTN_APPEND2" , DB.fetch "rich_list" "LASTN_LENGTH_ID" , DB.fetch "rich_list" "LASTN_1" ])
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.183208

LASTN_APPEND1
Statistics
  infstep : 423
  nodes   : 93
  maxdepth: 5
Time: 10.016168
  inferstep time: 7.372865
  node_find time: 0.147324
  node_crea time: 1.986152
    pred time: 0.648387
    thmpred time: 0.000039
    mc time: 0.841357
    inst time: 0.0
Proof status: Time Out
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.207437

LASTN_MAP
proof length: 2
proof time: 0.068164
Statistics
  infstep : 3
  nodes   : 3
  maxdepth: 2
Time: 0.37825
  inferstep time: 0.311675
  node_find time: 0.000891
  node_crea time: 0.040281
    pred time: 0.014059
    thmpred time: 0.000001
    mc time: 0.03492
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LASTN_APPEND2", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "LASTN_def", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "LASTN_APPEND1", DB.fetch "rich_list" "LASTN_LENGTH_ID", DB.fetch "rich_list" "LASTN_LENGTH_APPEND", DB.fetch "rich_list" "LASTN_1"] THEN metisTools.METIS_TAC [DB.fetch "rich_list" "LASTN_def", DB.fetch "rich_list" "MAP_REVERSE", listTheory.MAP_TAKE, DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "TAKE", DB.fetch "rich_list" "TAKE_SNOC", listTheory.LENGTH_TAKE, listTheory.TAKE_LENGTH_TOO_LONG, listTheory.TAKE_LENGTH_ID_rwt, listTheory.splitAtPki_EQN, listTheory.TAKE_def, listTheory.LLEX_EL_THM, listTheory.TAKE_nil, listTheory.TAKE_cons, listTheory.TAKE_APPEND1, listTheory.LENGTH_TAKE_EQ]
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.195495

BUTLASTN_MAP
proof length: 6
proof time: 0.005767
Statistics
  infstep : 187
  nodes   : 33
  maxdepth: 4
Time: 3.688617
  inferstep time: 2.865704
  node_find time: 0.045895
  node_crea time: 0.51271
    pred time: 0.194595
    thmpred time: 0.000006
    mc time: 0.255877
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  boolLib.REPEAT INDUCT_TAC
end THENL [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "BUTLASTN", numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_CONS", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_BUTLASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "BUTLASTN_APPEND2", DB.fetch "rich_list" "BUTLASTN_APPEND1", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL"], Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL
  [BasicProvers.SRW_TAC [] [listTheory.MAP, listTheory.LENGTH, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", DB.fetch "rich_list" "BUTLASTN_LENGTH_CONS", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_CONS", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_APPEND2", DB.fetch "rich_list" "BUTLASTN_BUTLASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_APPEND1"],
  boolLib.ASM_REWRITE_TAC [DB.fetch "rich_list" "BUTLASTN", listTheory.MAP_SNOC, listTheory.LENGTH_SNOC, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "BUTLASTN_CONS", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_BUTLASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "BUTLASTN_APPEND2", DB.fetch "rich_list" "BUTLASTN_APPEND1", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_LENGTH_CONS"] THEN
  BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM]]]
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.174467

EVERY_LASTN
Statistics
  infstep : 554
  nodes   : 107
  maxdepth: 5
Time: 10.116937
  inferstep time: 7.631903
  node_find time: 0.160389
  node_crea time: 1.833037
    pred time: 0.548655
    thmpred time: 0.000026
    mc time: 0.649461
    inst time: 0.0
Proof status: Time Out
Org tac number: 15
Original proof time: 0.0
Replaying proof: 0.39673

EVERY_BUTLASTN
Statistics
  infstep : 771
  nodes   : 105
  maxdepth: 5
Time: 10.085061
  inferstep time: 7.015673
  node_find time: 0.281745
  node_crea time: 2.038757
    pred time: 0.583722
    thmpred time: 0.000026
    mc time: 0.714438
    inst time: 0.0
Proof status: Time Out
Org tac number: 16
Original proof time: 0.0
Replaying proof: 0.460852

TAKE_TAKE
proof length: 4
proof time: 0.041542
Statistics
  infstep : 97
  nodes   : 26
  maxdepth: 4
Time: 2.610158
  inferstep time: 1.989592
  node_find time: 0.02769
  node_crea time: 0.434703
    pred time: 0.152412
    thmpred time: 0.000003
    mc time: 0.207697
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [listTheory.TAKE_def, listTheory.TAKE_nil, listTheory.LENGTH_TAKE, DB.fetch "rich_list" "TAKE_SNOC", listTheory.LLEX_EL_THM, listTheory.TAKE_APPEND1, listTheory.LENGTH_TAKE_EQ, DB.fetch "rich_list" "TAKE", listTheory.splitAtPki_EQN, listTheory.TAKE_LENGTH_TOO_LONG, DB.fetch "rich_list" "APPEND_TAKE_LASTN", listTheory.TAKE_SUM, listTheory.TAKE_LENGTH_ID_rwt, listTheory.TAKE_APPEND2, listTheory.TAKE_cons, listTheory.MAP_TAKE], let
  fun simp l = simpLib.ASM_SIMP_TAC ( BasicProvers.srw_ss ( ) hhs_infixl0_open simpLib.++ hhs_infixl0_close boolSimps.LET_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.ARITH_ss ) l
in
  simp [(DB.fetch "list" "TAKE_def")] THEN
  BasicProvers.SRW_TAC [numSimps.ARITH_ss] [listTheory.TAKE_def, listTheory.TAKE_cons, listTheory.SNOC_APPEND, listTheory.el_append3, listTheory.lupdate_append2, listTheory.DROP_def, listTheory.DROP_cons, arithmeticTheory.PRE_SUB1, listTheory.TAKE_APPEND2, listTheory.TAKE_compute, listTheory.TAKE_APPEND1, listTheory.TAKE_DROP, listTheory.TAKE_SUM, DB.fetch "rich_list" "TAKE", listTheory.TAKE_0, listTheory.splitAtPki_EQN]
end]
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.324069

TAKE_TAKE
proof length: 1
proof time: 0.054809
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.069479
  inferstep time: 0.054044
  node_find time: 0.000208
  node_crea time: 0.01011
    pred time: 0.003165
    thmpred time: 0.0
    mc time: 0.006942
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "TAKE_TAKE" , listTheory.LENGTH_TAKE , DB.fetch "rich_list" "TAKE_SNOC" , listTheory.LLEX_EL_THM , listTheory.TAKE_APPEND1 , listTheory.LENGTH_TAKE_EQ , listTheory.TAKE_LENGTH_TOO_LONG , DB.fetch "rich_list" "APPEND_TAKE_LASTN" , listTheory.TAKE_LENGTH_ID_rwt , listTheory.splitAtPki_EQN , listTheory.TAKE_SUM , DB.fetch "rich_list" "TAKE" , listTheory.MAP_TAKE , listTheory.TAKE_DROP , listTheory.TAKE_splitAtPki , listTheory.TAKE_APPEND2])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.011081

DROP_LENGTH_NIL
proof length: 3
proof time: 0.071548
Statistics
  infstep : 4
  nodes   : 4
  maxdepth: 2
Time: 0.24664
  inferstep time: 0.209189
  node_find time: 0.000861
  node_crea time: 0.023049
    pred time: 0.008656
    thmpred time: 0.000001
    mc time: 0.014978
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [listTheory.LENGTH, listTheory.DROP_LENGTH_TOO_LONG, listTheory.splitAtPki_EQN, listTheory.DROP_NIL, listTheory.LENGTH_DROP, listTheory.last_drop, listTheory.MEM_DROP, listTheory.ZIP_DROP, listTheory.DROP_nil, listTheory.DROP_def, listTheory.DROP_compute, listTheory.DROP_cons, listTheory.DROP_0, listTheory.TAKE_DROP, listTheory.TAKE_SUM, DB.fetch "rich_list" "DROP"], metisTools.METIS_TAC [listTheory.LENGTH, listTheory.DROP_compute, listTheory.DROP_def, DB.fetch "rich_list" "DROP", listTheory.DROP_cons, listTheory.DROP_LENGTH_TOO_LONG, listTheory.splitAtPki_EQN, listTheory.DROP_NIL, listTheory.LENGTH_DROP, listTheory.last_drop, listTheory.MEM_DROP, listTheory.ZIP_DROP, listTheory.DROP_nil, listTheory.TAKE_DROP, listTheory.TAKE_SUM, DB.fetch "rich_list" "DROP_FUNPOW_TL"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.034031

BUTLASTN_LENGTH_NIL
proof length: 1
proof time: 0.045922
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.168413
  inferstep time: 0.150307
  node_find time: 0.000199
  node_crea time: 0.012622
    pred time: 0.003957
    thmpred time: 0.000001
    mc time: 0.007943
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL" , DB.fetch "rich_list" "BUTLASTN_LENGTH_CONS" , DB.fetch "rich_list" "BUTLASTN_LENGTH_APPEND" , DB.fetch "rich_list" "BUTLASTN_LASTN_NIL" , DB.fetch "rich_list" "BUTLASTN_CONS" , DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN" , DB.fetch "rich_list" "BUTLASTN_BUTLASTN" , DB.fetch "rich_list" "BUTLASTN_FRONT" , DB.fetch "rich_list" "BUTLASTN_SUC_FRONT" , DB.fetch "rich_list" "BUTLASTN_LASTN" , DB.fetch "rich_list" "BUTLASTN_MAP" , DB.fetch "rich_list" "BUTLASTN_SEG" , DB.fetch "rich_list" "LASTN_BUTLASTN" , DB.fetch "rich_list" "LENGTH_BUTLASTN" , DB.fetch "rich_list" "EVERY_BUTLASTN" , DB.fetch "rich_list" "BUTLASTN_APPEND2"])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.054633

DROP_APPEND
proof length: 6
proof time: 0.088446
Statistics
  infstep : 99
  nodes   : 33
  maxdepth: 4
Time: 3.618314
  inferstep time: 2.673892
  node_find time: 0.031977
  node_crea time: 0.708062
    pred time: 0.274261
    thmpred time: 0.000008
    mc time: 0.309849
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 16676*)l1"] THENL [BasicProvers.SRW_TAC [] [listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", listTheory.LENGTH, listTheory.DROP_def, listTheory.DROP_nil, listTheory.DROP_cons, listTheory.TAKE_DROP, listTheory.TAKE_SUM, listTheory.LENGTH_DROP, listTheory.DROP_LENGTH_TOO_LONG, listTheory.DROP_NIL, listTheory.splitAtPki_EQN, listTheory.MEM_DROP, listTheory.ZIP_DROP, listTheory.last_drop, DB.fetch "rich_list" "DROP"], BasicProvers.SRW_TAC [numSimps.ARITH_ss] [DB.fetch "list" "APPEND", DB.fetch "list" "LENGTH", DB.fetch "list" "TAKE_APPEND1", DB.fetch "list" "TAKE_cons", DB.fetch "list" "TAKE_def", DB.fetch "list" "LENGTH_TAKE", DB.fetch "list" "MAP_TAKE", DB.fetch "list" "TAKE_nil", DB.fetch "list" "TAKE_LENGTH_ID", DB.fetch "list" "TAKE_0", DB.fetch "list" "LENGTH_EQ_NUM_compute", DB.fetch "list" "LENGTH_EQ_NUM", DB.fetch "list" "EL_APPEND_EQN", DB.fetch "list" "APPEND_11_LENGTH", DB.fetch "list" "APPEND_LENGTH_EQ", DB.fetch "list" "LENGTH_EQ_SUM"] THEN
  BasicProvers.Cases_on [HolKernel.QUOTE " (*#loc 1 13265*)n"] THENL
  [simpLib.SIMP_TAC (BasicProvers.srw_ss ()) [],
  metisTools.METIS_TAC [DB.fetch "rich_list" "DROP", listTheory.APPEND, listTheory.MEM_DROP, listTheory.LENGTH, listTheory.LENGTH_SNOC, arithmeticTheory.SUB_MONO_EQ, arithmeticTheory.SUC_SUB1, arithmeticTheory.SUB, arithmeticTheory.SUB_LEFT_SUC, listTheory.DROP_compute, listTheory.DROP_def, listTheory.DROP_cons, listTheory.LENGTH_DROP, listTheory.TAKE_DROP, listTheory.TAKE_SUM, listTheory.DROP_LENGTH_TOO_LONG]]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.207418

DROP_APPEND1
proof length: 5
proof time: 0.144173
Statistics
  infstep : 12
  nodes   : 9
  maxdepth: 3
Time: 0.868317
  inferstep time: 0.664407
  node_find time: 0.003663
  node_crea time: 0.130541
    pred time: 0.052786
    thmpred time: 0.000002
    mc time: 0.092654
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "DROP", listTheory.DROP_compute, listTheory.DROP_0, numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, DB.fetch "rich_list" "DROP_APPEND", listTheory.ZIP_DROP, listTheory.DROP_LENGTH_TOO_LONG, listTheory.TAKE_DROP, listTheory.TAKE_SUM, listTheory.last_drop, listTheory.DROP_NIL, listTheory.LENGTH_DROP, listTheory.MEM_DROP, DB.fetch "rich_list" "DROP_LENGTH_NIL", listTheory.splitAtPki_EQN], BasicProvers.Cases THENL
  [metisTools.METIS_TAC [listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", listTheory.LENGTH, listTheory.MEM_DROP, DB.fetch "rich_list" "DROP", DB.fetch "rich_list" "DROP_APPEND", arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_LEQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_GREATER_EQ, arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.NOT_SUC_LESS_EQ_0, listTheory.TAKE_DROP, listTheory.TAKE_SUM, listTheory.DROP_LENGTH_TOO_LONG, listTheory.DROP_NIL],
  metisTools.METIS_TAC [listTheory.APPEND, DB.fetch "rich_list" "DROP", listTheory.LENGTH, listTheory.MEM_DROP, listTheory.DROP_compute, DB.fetch "rich_list" "DROP_APPEND", arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_LEQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_GREATER_EQ, arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.NOT_SUC_LESS_EQ_0, listTheory.TAKE_DROP, listTheory.TAKE_SUM, listTheory.DROP_cons, listTheory.DROP_def]]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.098991

DROP_APPEND2
proof length: 3
proof time: 0.12687
Statistics
  infstep : 4
  nodes   : 4
  maxdepth: 2
Time: 0.328793
  inferstep time: 0.263915
  node_find time: 0.000892
  node_crea time: 0.03125
    pred time: 0.011771
    thmpred time: 0.0
    mc time: 0.035716
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [metisTools.METIS_TAC [listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", listTheory.LENGTH, DB.fetch "rich_list" "DROP_APPEND", DB.fetch "rich_list" "DROP_APPEND1", listTheory.DROP_def, listTheory.DROP_cons, listTheory.TAKE_DROP, listTheory.TAKE_SUM, listTheory.LENGTH_DROP, listTheory.DROP_LENGTH_TOO_LONG, listTheory.DROP_NIL, listTheory.splitAtPki_EQN, listTheory.ZIP_DROP, listTheory.last_drop, listTheory.MEM_DROP], metisTools.METIS_TAC [listTheory.APPEND, listTheory.LENGTH, DB.fetch "rich_list" "DROP_APPEND", DB.fetch "rich_list" "DROP_APPEND1", listTheory.DROP_cons, listTheory.DROP_def, DB.fetch "rich_list" "DROP", listTheory.TAKE_DROP, listTheory.TAKE_SUM, listTheory.LENGTH_DROP, listTheory.DROP_LENGTH_TOO_LONG, listTheory.ZIP_DROP, listTheory.last_drop, listTheory.DROP_NIL, listTheory.MEM_DROP, listTheory.splitAtPki_EQN]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.124446

DROP_DROP_T
proof length: 2
proof time: 0.064538
Statistics
  infstep : 10
  nodes   : 8
  maxdepth: 3
Time: 0.659725
  inferstep time: 0.561003
  node_find time: 0.002282
  node_crea time: 0.075823
    pred time: 0.028635
    thmpred time: 0.000001
    mc time: 0.031106
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [numSimps.ARITH_ss] [listTheory.TAKE_SUM, listTheory.DROP_LENGTH_TOO_LONG, listTheory.LENGTH_DROP, listTheory.TAKE_DROP, listTheory.last_drop, DB.fetch "rich_list" "DROP", DB.fetch "rich_list" "DROP_FUNPOW_TL", listTheory.DROP_splitAtPki, listTheory.splitAtPki_EQN, listTheory.DROP_NIL, listTheory.MEM_DROP, listTheory.ZIP_DROP, DB.fetch "rich_list" "DROP_APPEND", DB.fetch "rich_list" "DROP_APPEND1", listTheory.ALL_DISTINCT_DROP, listTheory.DROP_nil] THEN metisTools.METIS_TAC [DB.fetch "rich_list" "DROP_FUNPOW_TL", DB.fetch "rich_list" "tactictoe_thm_0", DB.fetch "rich_list" "TL_T_def", arithmeticTheory.FUNPOW_ADD, arithmeticTheory.FUNPOW, arithmeticTheory.FUNPOW_SUC, listTheory.TAKE_SUM, DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "BUTLASTN_BUTLASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, DB.fetch "rich_list" "LENGTH_SEG", listTheory.LENGTH_EQ_SUM, arithmeticTheory.ADD_CLAUSES, arithmeticTheory.ADD_SYM]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.020521

DROP_DROP
proof length: 1
proof time: 0.034501
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.082345
  inferstep time: 0.054913
  node_find time: 0.000234
  node_crea time: 0.015684
    pred time: 0.004658
    thmpred time: 0.0
    mc time: 0.014738
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "DROP_DROP_T" , DB.fetch "rich_list" "BUTLASTN_BUTLASTN" , DB.fetch "rich_list" "LASTN_BUTLASTN" , DB.fetch "rich_list" "LENGTH_SEG" , listTheory.DROP_LENGTH_TOO_LONG , listTheory.ZIP_DROP , DB.fetch "rich_list" "DROP_APPEND1" , listTheory.TAKE_SUM , listTheory.last_drop , listTheory.LENGTH_DROP , listTheory.splitAtPki_EQN , listTheory.DROP_NIL , listTheory.MEM_DROP , DB.fetch "rich_list" "DROP_APPEND" , DB.fetch "rich_list" "DROP_FUNPOW_TL" , DB.fetch "rich_list" "DROP"])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.012758

LASTN_SEG
Statistics
  infstep : 515
  nodes   : 98
  maxdepth: 5
Time: 10.105721
  inferstep time: 7.506043
  node_find time: 0.163355
  node_crea time: 1.782394
    pred time: 0.599165
    thmpred time: 0.00003
    mc time: 0.799294
    inst time: 0.0
Proof status: Time Out
Org tac number: 18
Original proof time: 0.0
Replaying proof: 0.51398

TAKE_SEG
proof length: 5
proof time: 0.149147
Statistics
  infstep : 50
  nodes   : 14
  maxdepth: 3
Time: 1.504679
  inferstep time: 1.077458
  node_find time: 0.017072
  node_crea time: 0.286699
    pred time: 0.10439
    thmpred time: 0.000002
    mc time: 0.153745
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  boolLib.REPEAT INDUCT_TAC
end THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "TAKE", listTheory.TAKE_compute, listTheory.TAKE_0, numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "SEG_SUC_CONS", listTheory.LENGTH_TAKE, DB.fetch "rich_list" "TAKE_SNOC", listTheory.TAKE_LENGTH_TOO_LONG, listTheory.LLEX_EL_THM], BasicProvers.Induct THENL
  [metisTools.METIS_TAC [DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "TAKE", listTheory.LENGTH, DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "SEG_SUC_CONS", arithmeticTheory.NOT_SUC_LESS_EQ_0, numeralTheory.tactictoe_thm_11, numeralTheory.tactictoe_thm_15, arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_LEQ],
  metisTools.METIS_TAC [DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "TAKE", listTheory.LENGTH, DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", arithmeticTheory.NOT_SUC_LESS_EQ_0, numeralTheory.tactictoe_thm_11, numeralTheory.tactictoe_thm_15, arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_LEQ]]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.130661

DROP_SEG
proof length: 5
proof time: 0.007061
Statistics
  infstep : 171
  nodes   : 57
  maxdepth: 5
Time: 6.034384
  inferstep time: 4.501566
  node_find time: 0.056334
  node_crea time: 1.098054
    pred time: 0.389609
    thmpred time: 0.000016
    mc time: 0.531119
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  INDUCT_TAC
end THENL [BasicProvers.SRW_TAC [] [listTheory.DROP_compute, DB.fetch "rich_list" "DROP", listTheory.DROP_0, numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", listTheory.LENGTH_DROP, DB.fetch "rich_list" "LENGTH_BUTLASTN", listTheory.LENGTH_TL, listTheory.EL_REVERSE, DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "SEG"], BasicProvers.Cases THENL
  [BasicProvers.SRW_TAC [] [listTheory.LENGTH, listTheory.MEM_DROP, DB.fetch "rich_list" "DROP", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "SEG_SUC_CONS", arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_LEQ, arithmeticTheory.NOT_GREATER_EQ],
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "DROP", listTheory.LENGTH, listTheory.MEM_DROP, DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "SEG_LENGTH_ID", arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_LEQ, arithmeticTheory.NOT_GREATER_EQ]]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.120011

DROP_SNOC
proof length: 6
proof time: 0.172965
Statistics
  infstep : 16
  nodes   : 11
  maxdepth: 3
Time: 1.114877
  inferstep time: 0.794976
  node_find time: 0.005417
  node_crea time: 0.213809
    pred time: 0.088445
    thmpred time: 0.000004
    mc time: 0.127741
    inst time: 0.0
Proof found: boolLib.NTAC 2 BasicProvers.Induct THENL [metisTools.METIS_TAC [listTheory.SNOC, listTheory.LENGTH, numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, listTheory.DROP_compute, DB.fetch "rich_list" "DROP", listTheory.DROP_0, listTheory.DROP_LENGTH_TOO_LONG, listTheory.DROP_NIL, DB.fetch "rich_list" "DROP_LENGTH_NIL", listTheory.splitAtPki_EQN, DB.fetch "rich_list" "DROP_SEG", listTheory.ZIP_DROP, DB.fetch "rich_list" "DROP_APPEND1", DB.fetch "rich_list" "DROP_DROP", DB.fetch "rich_list" "DROP_APPEND2"], BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "DROP", listTheory.LENGTH, listTheory.MEM_DROP, DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "SEG_LENGTH_ID", arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_LEQ, arithmeticTheory.NOT_GREATER_EQ], metisTools.METIS_TAC [listTheory.SNOC, listTheory.LENGTH, listTheory.MEM_DROP, DB.fetch "rich_list" "DROP", numeralTheory.tactictoe_thm_12, numeralTheory.tactictoe_thm_16, numeralTheory.tactictoe_thm_2, numeralTheory.tactictoe_thm_3, arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_LEQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_GREATER_EQ, arithmeticTheory.NOT_SUC_LESS_EQ_0, listTheory.DROP_LENGTH_TOO_LONG, listTheory.DROP_NIL], BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "DROP", listTheory.LENGTH, listTheory.MEM_DROP, DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "SEG_LENGTH_ID", arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_LEQ, arithmeticTheory.NOT_GREATER_EQ] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "DROP_APPEND1", DB.fetch "rich_list" "DROP_APPEND", listTheory.SNOC_APPEND, listTheory.el_append3, listTheory.lupdate_append2, listTheory.TAKE_DROP, listTheory.TAKE_SUM, DB.fetch "rich_list" "DROP", listTheory.DROP_LENGTH_TOO_LONG, listTheory.splitAtPki_EQN, listTheory.DROP_NIL, DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "DROP_DROP", DB.fetch "rich_list" "DROP_DROP_T", listTheory.last_drop, listTheory.LENGTH_DROP]]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.070868

APPEND_BUTLASTN_DROP
Statistics
  infstep : 271
  nodes   : 73
  maxdepth: 5
Time: 10.01228
  inferstep time: 7.520018
  node_find time: 0.099651
  node_crea time: 1.957287
    pred time: 0.712461
    thmpred time: 0.000034
    mc time: 0.860719
    inst time: 0.0
Proof status: Time Out
Org tac number: 19
Original proof time: 0.0
Replaying proof: 0.669924

SEG_SEG
Statistics
  infstep : 296
  nodes   : 77
  maxdepth: 5
Time: 10.007455
  inferstep time: 7.469516
  node_find time: 0.110344
  node_crea time: 1.751482
    pred time: 0.598879
    thmpred time: 0.000031
    mc time: 0.786361
    inst time: 0.0
Proof status: Time Out
Org tac number: 25
Original proof time: 0.0
Replaying proof: 0.656922

SEG_APPEND1
proof length: 10
proof time: 0.095696
Statistics
  infstep : 29
  nodes   : 17
  maxdepth: 4
Time: 1.986643
  inferstep time: 1.526735
  node_find time: 0.009015
  node_crea time: 0.301086
    pred time: 0.126052
    thmpred time: 0.000005
    mc time: 0.190829
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  boolLib.REPEAT INDUCT_TAC
end THENL [boolLib.REWRITE_TAC [DB.fetch "rich_list" "SEG", numeralTheory.numeral_distrib, arithmeticTheory.ADD, arithmeticTheory.ADD_CLAUSES, DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "SEG_SUC_CONS", listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.TAKE_APPEND1], boolLib.REWRITE_TAC [(DB.fetch "rich_list" "SEG"), listTheory.LENGTH], BasicProvers.Induct THENL
  [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "SEG", listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", listTheory.LENGTH, DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_SEG", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "SEG_SUC_CONS", arithmeticTheory.ADD, arithmeticTheory.ADD_CLAUSES, DB.fetch "rich_list" "tactictoe_thm_8"],
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "SEG", listTheory.APPEND, listTheory.LENGTH, DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_SEG", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", arithmeticTheory.ADD, arithmeticTheory.ADD_CLAUSES, DB.fetch "rich_list" "tactictoe_thm_8", DB.fetch "rich_list" "tactictoe_thm_9"]], BasicProvers.Induct THENL
  [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "SEG", listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", listTheory.LENGTH, DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "SEG_LENGTH_ID", arithmeticTheory.ADD, DB.fetch "rich_list" "tactictoe_thm_8", DB.fetch "rich_list" "tactictoe_thm_9"],
  boolLib.REWRITE_TAC [listTheory.LENGTH, (DB.fetch "rich_list" "SEG"), boolLib.GSYM arithmeticTheory.ADD_SUC, arithmeticTheory.LESS_EQ_MONO] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "SEG", listTheory.APPEND, arithmeticTheory.ADD, DB.fetch "rich_list" "tactictoe_thm_8", DB.fetch "rich_list" "tactictoe_thm_9", DB.fetch "rich_list" "tactictoe_thm_10", DB.fetch "rich_list" "tactictoe_thm_5", DB.fetch "rich_list" "tactictoe_thm_7", arithmeticTheory.ADD_CLAUSES, DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "BUTLASTN_SEG"]]]
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.271961

SEG_APPEND2
Statistics
  infstep : 411
  nodes   : 92
  maxdepth: 5
Time: 10.113605
  inferstep time: 7.64336
  node_find time: 0.125906
  node_crea time: 1.812702
    pred time: 0.699329
    thmpred time: 0.000028
    mc time: 0.694782
    inst time: 0.0
Proof status: Time Out
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.52443

SEG_TAKE_BUTFISTN
Statistics
  infstep : 254
  nodes   : 83
  maxdepth: 5
Time: 10.109924
  inferstep time: 7.469732
  node_find time: 0.088984
  node_crea time: 2.152254
    pred time: 0.763647
    thmpred time: 0.000033
    mc time: 0.868518
    inst time: 0.0
Proof status: Time Out
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.169091

SEG_APPEND
Statistics
  infstep : 416
  nodes   : 76
  maxdepth: 5
Time: 10.03633
  inferstep time: 7.21394
  node_find time: 0.153569
  node_crea time: 2.149257
    pred time: 0.758587
    thmpred time: 0.000031
    mc time: 0.661101
    inst time: 0.0
Proof status: Time Out
Org tac number: 32
Original proof time: 0.0
Replaying proof: 0.859367

SEG_LENGTH_SNOC
proof length: 4
proof time: 0.082541
Statistics
  infstep : 56
  nodes   : 14
  maxdepth: 3
Time: 1.602312
  inferstep time: 1.217983
  node_find time: 0.016713
  node_crea time: 0.239314
    pred time: 0.065489
    thmpred time: 0.000003
    mc time: 0.181391
    inst time: 0.0
Proof found: boolLib.CONV_TAC (boolLib.ONCE_DEPTH_CONV numLib.num_CONV) THEN BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL
  [metisTools.METIS_TAC [listTheory.SNOC, listTheory.LENGTH, DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_SEG", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN", DB.fetch "rich_list" "SEG_APPEND1", DB.fetch "rich_list" "SEG_APPEND2"],
  metisTools.METIS_TAC [listTheory.SNOC, listTheory.LENGTH, DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_SEG", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "SEG_APPEND1", DB.fetch "rich_list" "SEG_APPEND2"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.062047

SEG_SNOC
proof length: 1
proof time: 0.0029
Statistics
  infstep : 20
  nodes   : 10
  maxdepth: 3
Time: 1.253106
  inferstep time: 0.988951
  node_find time: 0.00653
  node_crea time: 0.158925
    pred time: 0.065626
    thmpred time: 0.000003
    mc time: 0.114431
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "rich_list" "SEG_TAKE_BUTFISTN" , DB.fetch "rich_list" "LENGTH_SEG" , DB.fetch "rich_list" "SEG_SEG" , DB.fetch "rich_list" "SEG_APPEND1" , DB.fetch "rich_list" "SEG_SUC_CONS" , DB.fetch "rich_list" "SEG_APPEND" , DB.fetch "rich_list" "SEG_APPEND2" , DB.fetch "rich_list" "SEG_0_SNOC" , DB.fetch "rich_list" "BUTLASTN_BUTLASTN" , DB.fetch "rich_list" "DROP_DROP" , DB.fetch "rich_list" "LASTN_BUTLASTN" , DB.fetch "rich_list" "TAKE_SEG" , DB.fetch "rich_list" "LASTN_SEG" , DB.fetch "rich_list" "SEG" , DB.fetch "rich_list" "SEG_LENGTH_SNOC" , DB.fetch "rich_list" "BUTLASTN_SEG" ])
Org tac number: 10
Original proof time: 0.0
Replaying proof: 0.267188

ELL_SEG
Statistics
  infstep : 426
  nodes   : 128
  maxdepth: 6
Time: 10.085687
  inferstep time: 6.777197
  node_find time: 0.168849
  node_crea time: 2.382862
    pred time: 0.589004
    thmpred time: 0.000035
    mc time: 1.390421
    inst time: 0.0
Proof status: Time Out
Org tac number: 15
Original proof time: 0.0
Replaying proof: 0.436094

SNOC_FOLDR
proof length: 1
proof time: 0.046543
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.079768
  inferstep time: 0.063026
  node_find time: 0.000286
  node_crea time: 0.010717
    pred time: 0.003465
    thmpred time: 0.0
    mc time: 0.007512
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "FOLDR_CONS_NIL" , DB.fetch "rich_list" "APPEND_FOLDR" , listTheory.SNOC , listTheory.SNOC_APPEND , DB.fetch "rich_list" "SEG_LENGTH_SNOC" , DB.fetch "rich_list" "FOLDR_SNOC" , DB.fetch "rich_list" "FOLDR_SINGLE" , listTheory.REVERSE_SNOC , DB.fetch "rich_list" "SNOC_REVERSE_CONS" , listTheory.SNOC_Axiom , listTheory.tactictoe_thm_17 , listTheory.SNOC_CASES , DB.fetch "rich_list" "FILTER_FOLDL" , DB.fetch "rich_list" "FOLDL_SNOC_NIL" , DB.fetch "rich_list" "IS_SUFFIX" , DB.fetch "rich_list" "LASTN"])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.057903

MEM_FOLDR_MAP
proof length: 1
proof time: 0.105262
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.129733
  inferstep time: 0.109449
  node_find time: 0.000249
  node_crea time: 0.011319
    pred time: 0.003112
    thmpred time: 0.000001
    mc time: 0.009371
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "EXISTS_FOLDR_MAP" , DB.fetch "rich_list" "MEM_FOLDR" , listTheory.FOLDR_CONG , DB.fetch "rich_list" "MEM_FOLDL" , DB.fetch "rich_list" "EXISTS_FOLDR" , listTheory.MEM , DB.fetch "rich_list" "NULL_FOLDR" , DB.fetch "rich_list" "FOLDR_MAP" , DB.fetch "rich_list" "MAP_FOLDR" , DB.fetch "rich_list" "ASSOC_FOLDR_FLAT" , DB.fetch "rich_list" "EVERY_FOLDR_MAP" , listTheory.FOLDR_CONS , listTheory.MEM_MAP , listTheory.MAP_EQ_f , listTheory.ALL_DISTINCT_MAP_INJ , listTheory.MAP_CONG])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.005056

MEM_FOLDL_MAP
proof length: 1
proof time: 0.091076
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.128563
  inferstep time: 0.107324
  node_find time: 0.000386
  node_crea time: 0.015411
    pred time: 0.005031
    thmpred time: 0.000001
    mc time: 0.008931
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "MEM_FOLDR_MAP" , DB.fetch "rich_list" "EXISTS_FOLDL_MAP" , DB.fetch "rich_list" "MEM_FOLDL" , DB.fetch "rich_list" "MEM_FOLDR" , listTheory.FOLDL_CONG , listTheory.MEM , DB.fetch "rich_list" "EXISTS_FOLDL" , DB.fetch "rich_list" "NULL_FOLDL" , listTheory.FOLDL_UNION_BIGUNION , listTheory.FOLDL_UNION_BIGUNION_paired , listTheory.MEM_MAP , listTheory.MAP_EQ_f , listTheory.ALL_DISTINCT_MAP_INJ , listTheory.MAP_CONG , listTheory.SUM_MAP_MEM_bound , DB.fetch "rich_list" "MEM_EXISTS"])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.008111

FILTER_FILTER
proof length: 4
proof time: 0.096854
Statistics
  infstep : 224
  nodes   : 29
  maxdepth: 4
Time: 3.05657
  inferstep time: 2.201998
  node_find time: 0.081645
  node_crea time: 0.471716
    pred time: 0.141907
    thmpred time: 0.000007
    mc time: 0.181947
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [listTheory.EVERY_CONJ, whileTheory.WHILE_RULE, pred_setTheory.GSPEC_AND, listTheory.FILTER, listTheory.FILTER_COND_REWRITE, DB.fetch "rich_list" "EVERY_FOLDR", listTheory.LENGTH_FILTER_LEQ_MONO, listTheory.FILTER_NEQ_NIL, listTheory.FILTER_EQ_NIL, DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "FILTER_FOLDR", listTheory.FILTER_EQ_CONS, listTheory.FILTER_NEQ_ID, listTheory.MEM_FILTER, listTheory.EVERY_FILTER, DB.fetch "rich_list" "FILTER_EQ"], BasicProvers.SRW_TAC [] [] THEN
  metisTools.METIS_TAC [listTheory.EVERY_CONJ, whileTheory.WHILE_RULE, pred_setTheory.GSPEC_AND, DB.fetch "rich_list" "EVERY_FOLDR", listTheory.FILTER, DB.fetch "rich_list" "FILTER_FOLDR", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "FILTER_SNOC", DB.fetch "rich_list" "FOLDL_FILTER", DB.fetch "rich_list" "FOLDR_FILTER", DB.fetch "rich_list" "PREFIX", DB.fetch "rich_list" "SPLITP", DB.fetch "rich_list" "PREFIX_FOLDR", DB.fetch "rich_list" "SUFFIX_DEF", whileTheory.WHILE, listTheory.FILTER_COND_REWRITE]]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.14661

FCOMM_FOLDR_FLAT
Statistics
  infstep : 697
  nodes   : 180
  maxdepth: 7
Time: 10.014214
  inferstep time: 6.633366
  node_find time: 0.273899
  node_crea time: 2.356372
    pred time: 0.338531
    thmpred time: 0.000016
    mc time: 1.141115
    inst time: 0.0
Proof status: Time Out
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.251686

FCOMM_FOLDL_FLAT
Statistics
  infstep : 773
  nodes   : 168
  maxdepth: 6
Time: 10.000679
  inferstep time: 6.321011
  node_find time: 0.305298
  node_crea time: 2.555709
    pred time: 0.357645
    thmpred time: 0.000022
    mc time: 1.306996
    inst time: 0.0
Proof status: Time Out
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.238619
Replaying proof: 0.000371
Replaying proof: 0.000349
Replaying proof: 0.000648

FOLDR_MAP_REVERSE
Statistics
  infstep : 318
  nodes   : 111
  maxdepth: 6
Time: 10.016936
  inferstep time: 7.386346
  node_find time: 0.130186
  node_crea time: 1.935908
    pred time: 0.509226
    thmpred time: 0.000039
    mc time: 0.943749
    inst time: 0.0
Proof status: Time Out
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.197982

FOLDR_FILTER_REVERSE
Statistics
  infstep : 387
  nodes   : 97
  maxdepth: 5
Time: 10.08498
  inferstep time: 7.347369
  node_find time: 0.153183
  node_crea time: 2.020463
    pred time: 0.558859
    thmpred time: 0.000027
    mc time: 0.818316
    inst time: 0.0
Proof status: Time Out
Org tac number: 11
Original proof time: 0.0
Replaying proof: 0.310003
Replaying proof: 0.000678
Replaying proof: 0.00021
Replaying proof: 0.00012

COMM_ASSOC_FOLDR_REVERSE
proof length: 3
proof time: 0.071243
Statistics
  infstep : 110
  nodes   : 33
  maxdepth: 4
Time: 2.927364
  inferstep time: 2.260373
  node_find time: 0.040692
  node_crea time: 0.454968
    pred time: 0.141801
    thmpred time: 0.000006
    mc time: 0.186205
    inst time: 0.0
Proof found: boolLib.GEN_TAC THEN boolLib.DISCH_TAC THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "tactictoe_thm_21", DB.fetch "rich_list" "FOLDR_REVERSE", listTheory.FOLDL_EQ_FOLDR, DB.fetch "rich_list" "ASSOC_FOLDR_FLAT", DB.fetch "rich_list" "FOLDR_FOLDL_REVERSE", DB.fetch "rich_list" "ASSOC_FOLDL_FLAT", combinTheory.MONOID_DEF, DB.fetch "rich_list" "tactictoe_thm_22", combinTheory.ASSOC_DEF, combinTheory.FCOMM_ASSOC, combinTheory.ASSOC_SYM, DB.fetch "rich_list" "COMM_MONOID_FOLDR", DB.fetch "rich_list" "FOLDR_FOLDL", DB.fetch "rich_list" "tactictoe_thm_17", DB.fetch "rich_list" "tactictoe_thm_18", DB.fetch "rich_list" "tactictoe_thm_19"]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.114228

COMM_ASSOC_FOLDL_REVERSE
proof length: 1
proof time: 0.066991
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.114643
  inferstep time: 0.088685
  node_find time: 0.000294
  node_crea time: 0.011692
    pred time: 0.003064
    thmpred time: 0.0
    mc time: 0.013677
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "tactictoe_thm_23" , listTheory.FOLDL_EQ_FOLDR , DB.fetch "rich_list" "FOLDL_REVERSE" , DB.fetch "rich_list" "COMM_MONOID_FOLDL" , DB.fetch "rich_list" "COMM_ASSOC_FOLDR_REVERSE" , DB.fetch "rich_list" "tactictoe_thm_22" , DB.fetch "rich_list" "tactictoe_thm_24" , DB.fetch "rich_list" "ASSOC_FOLDL_FLAT" , DB.fetch "rich_list" "COMM_MONOID_FOLDR" , combinTheory.COMM_DEF , DB.fetch "rich_list" "FOLDL_FOLDR_REVERSE" , DB.fetch "rich_list" "FOLDR_FOLDL" , DB.fetch "rich_list" "tactictoe_thm_20" , listTheory.FOLDL_SNOC , DB.fetch "rich_list" "FCOMM_FOLDL_APPEND" , DB.fetch "rich_list" "FOLDL_APPEND"])
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.12335

ELL_LAST
proof length: 1
proof time: 0.028643
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.064729
  inferstep time: 0.049408
  node_find time: 0.000263
  node_crea time: 0.010178
    pred time: 0.002909
    thmpred time: 0.0
    mc time: 0.006258
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "ELL" , DB.fetch "rich_list" "ELL_compute" , DB.fetch "rich_list" "ELL_SEG" , DB.fetch "rich_list" "LENGTH_NOT_NULL" , listTheory.CONS , listTheory.MAP_TL , listTheory.NOT_NULL_MEM , listTheory.NULL_LENGTH , listTheory.NULL_EQ , listTheory.list_case_compute , DB.fetch "rich_list" "NULL_FOLDL" , DB.fetch "rich_list" "NULL_FOLDR" , listTheory.FRONT_CONS_EQ_NIL , DB.fetch "rich_list" "LASTN_1" , listTheory.APPEND_FRONT_LAST , listTheory.LAST_MAP])
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.10199

ELL_0_SNOC
proof length: 1
proof time: 0.028491
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.058427
  inferstep time: 0.041805
  node_find time: 0.000275
  node_crea time: 0.011087
    pred time: 0.00346
    thmpred time: 0.0
    mc time: 0.007112
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "ELL" , DB.fetch "rich_list" "ELL_LAST" , DB.fetch "rich_list" "ELL_compute" , DB.fetch "rich_list" "ELL_SEG" , DB.fetch "rich_list" "BUTLASTN" , DB.fetch "rich_list" "LASTN" , DB.fetch "rich_list" "SEG_0_SNOC" , listTheory.LENGTH_SNOC , DB.fetch "rich_list" "SEG_LENGTH_SNOC" , DB.fetch "rich_list" "SEG_SNOC" , listTheory.EL_LENGTH_SNOC , listTheory.EL_SNOC , listTheory.SUM_SNOC , DB.fetch "rich_list" "DROP_SNOC" , DB.fetch "rich_list" "TAKE_SNOC" , listTheory.LAST_SNOC])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.027648

ELL_SNOC
proof length: 4
proof time: 0.153383
Statistics
  infstep : 87
  nodes   : 15
  maxdepth: 4
Time: 1.580269
  inferstep time: 1.24344
  node_find time: 0.026624
  node_crea time: 0.196407
    pred time: 0.070531
    thmpred time: 0.000003
    mc time: 0.088424
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  INDUCT_TAC
end THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "ELL_0_SNOC", numeralTheory.numeral_distrib, prim_recTheory.PRE, DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "ELL_SEG", listTheory.EL_SNOC, DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "SEG_SNOC", DB.fetch "rich_list" "DROP_SNOC", DB.fetch "rich_list" "TAKE_SNOC", listTheory.SNOC_INDUCT, listTheory.LENGTH_SNOC], boolLib.REWRITE_TAC [prim_recTheory.LESS_MONO_EQ, (DB.fetch "rich_list" "ELL"), listTheory.FRONT_SNOC, arithmeticTheory.SUB_MONO_EQ] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "ELL_SEG", arithmeticTheory.tactictoe_thm_11, prim_recTheory.PRE, prim_recTheory.LESS_0, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL_0_SNOC", arithmeticTheory.PRE_SUC_EQ, numeralTheory.numeral_distrib, arithmeticTheory.SUC_PRE, arithmeticTheory.INV_PRE_EQ, arithmeticTheory.INV_PRE_LESS, arithmeticTheory.INV_PRE_LESS_EQ, arithmeticTheory.PRE_ELIM_THM, prim_recTheory.PRIM_REC_EQN]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.032006
Replaying proof: 0.00075

ELL_LENGTH_CONS
proof length: 3
proof time: 0.060846
Statistics
  infstep : 48
  nodes   : 10
  maxdepth: 2
Time: 0.856961
  inferstep time: 0.571245
  node_find time: 0.020988
  node_crea time: 0.159578
    pred time: 0.059122
    thmpred time: 0.000002
    mc time: 0.090827
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.LENGTH, DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "ELL_0_SNOC", DB.fetch "rich_list" "ELL_SUC_SNOC", DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "SEG_LENGTH_SNOC", DB.fetch "rich_list" "BUTLASTN_LENGTH_CONS", listTheory.el_append3, listTheory.lupdate_append2, listTheory.SNOC, listTheory.FRONT_CONS, listTheory.SNOC_APPEND], metisTools.METIS_TAC [listTheory.SNOC, listTheory.LENGTH_SNOC, DB.fetch "rich_list" "ELL_0_SNOC", DB.fetch "rich_list" "ELL_SUC_SNOC", DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "SEG_LENGTH_SNOC", listTheory.SNOC_APPEND, listTheory.REVERSE_SNOC, DB.fetch "rich_list" "SEG_SNOC", listTheory.EL_LENGTH_SNOC, listTheory.EL_SNOC]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.109717

ELL_LENGTH_SNOC
proof length: 3
proof time: 0.072441
Statistics
  infstep : 4
  nodes   : 4
  maxdepth: 2
Time: 0.336303
  inferstep time: 0.231216
  node_find time: 0.001725
  node_crea time: 0.050022
    pred time: 0.019717
    thmpred time: 0.000001
    mc time: 0.058227
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.SNOC, listTheory.LENGTH, listTheory.NULL_DEF, listTheory.NULL, DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL_0_SNOC", DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "ELL_SUC_SNOC", listTheory.list_case_compute, listTheory.CONS, DB.fetch "rich_list" "ELL_LENGTH_CONS", DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "NOT_NULL_SNOC"], metisTools.METIS_TAC [listTheory.HD, listTheory.SNOC, listTheory.LENGTH, listTheory.NULL_DEF, listTheory.NULL, DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL_0_SNOC", DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "ELL_SUC_SNOC", listTheory.list_case_compute, listTheory.CONS, DB.fetch "rich_list" "ELL_LENGTH_CONS", DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.080568

ELL_APPEND2
proof length: 7
proof time: 0.075743
Statistics
  infstep : 55
  nodes   : 15
  maxdepth: 3
Time: 2.126646
  inferstep time: 1.58189
  node_find time: 0.023869
  node_crea time: 0.303369
    pred time: 0.107195
    thmpred time: 0.000009
    mc time: 0.189699
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  INDUCT_TAC
end THENL [Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL
  [BasicProvers.SRW_TAC [] [listTheory.LENGTH, DB.fetch "rich_list" "APPEND_NIL", listTheory.APPEND_NIL, DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL_0_SNOC", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "ELL_LENGTH_CONS", DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "ELL_SUC_SNOC", listTheory.splitAtPki_APPEND, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute],
  metisTools.METIS_TAC [DB.fetch "rich_list" "ELL_0_SNOC", listTheory.LENGTH_SNOC, listTheory.APPEND_SNOC, DB.fetch "rich_list" "tactictoe_thm_4", DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "ELL_SUC_SNOC", DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "ELL_LENGTH_CONS", DB.fetch "rich_list" "APPEND_FOLDL", listTheory.SNOC_APPEND, DB.fetch "rich_list" "SNOC_EQ_LENGTH_EQ"]], Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL
  [BasicProvers.SRW_TAC [] [listTheory.LENGTH, DB.fetch "rich_list" "ELL_SUC_SNOC", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "APPEND_NIL", listTheory.APPEND_NIL, DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "ELL_LENGTH_CONS", DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL_0_SNOC", prim_recTheory.LESS_MONO, prim_recTheory.LESS_MONO_EQ, arithmeticTheory.LESS_MONO_EQ],
  metisTools.METIS_TAC [DB.fetch "rich_list" "ELL_SUC_SNOC", listTheory.LENGTH_SNOC, DB.fetch "rich_list" "ELL", listTheory.APPEND_SNOC, DB.fetch "rich_list" "tactictoe_thm_4", DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "ELL_0_SNOC", DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "ELL_LENGTH_CONS", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "ELL_LAST", prim_recTheory.LESS_MONO, prim_recTheory.LESS_MONO_EQ, arithmeticTheory.LESS_MONO_EQ]]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.124401

ELL_APPEND1
Statistics
  infstep : 441
  nodes   : 80
  maxdepth: 5
Time: 10.058848
  inferstep time: 7.318338
  node_find time: 0.406534
  node_crea time: 1.656781
    pred time: 0.601049
    thmpred time: 0.000025
    mc time: 0.599835
    inst time: 0.0
Proof status: Time Out
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.160132

ELL_PRE_LENGTH
proof length: 4
proof time: 0.101521
Statistics
  infstep : 9
  nodes   : 6
  maxdepth: 3
Time: 0.483871
  inferstep time: 0.406417
  node_find time: 0.00243
  node_crea time: 0.041795
    pred time: 0.013866
    thmpred time: 0.000002
    mc time: 0.034841
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.LENGTH, DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "ELL_SNOC", listTheory.EL_compute, DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL_APPEND1", DB.fetch "rich_list" "ELL_APPEND2", DB.fetch "rich_list" "ELL_LENGTH_CONS", DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL_0_SNOC", DB.fetch "rich_list" "ELL_SUC_SNOC", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.splitAtPki_APPEND, listTheory.LAST_REVERSE], BasicProvers.SRW_TAC [] [] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "ELL_LENGTH_CONS", DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "ELL_APPEND1", DB.fetch "rich_list" "ELL_APPEND2", DB.fetch "rich_list" "ELL_0_SNOC", DB.fetch "rich_list" "ELL_SUC_SNOC", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL_compute", listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_CONS, listTheory.LENGTH_EQ_NUM_compute, listTheory.LENGTH]]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.0746

EL_PRE_LENGTH
proof length: 1
proof time: 0.038492
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.070003
  inferstep time: 0.052053
  node_find time: 0.000305
  node_crea time: 0.011954
    pred time: 0.00369
    thmpred time: 0.0
    mc time: 0.007492
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.LAST_EL , DB.fetch "rich_list" "ELL_PRE_LENGTH" , listTheory.last_drop , DB.fetch "rich_list" "LAST_LASTN_LAST" , DB.fetch "rich_list" "LASTN_1" , listTheory.APPEND_FRONT_LAST , listTheory.LAST_MAP , listTheory.HD_REVERSE , listTheory.LAST_DEF , listTheory.LAST_CONS_cond , DB.fetch "rich_list" "ELL_LAST" , DB.fetch "rich_list" "ELL" , DB.fetch "rich_list" "ELL_compute" , listTheory.LAST_REVERSE , listTheory.LAST_CONS , listTheory.LAST_compute])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.032519

EL_ELL
Statistics
  infstep : 428
  nodes   : 81
  maxdepth: 5
Time: 10.005372
  inferstep time: 7.521554
  node_find time: 0.173969
  node_crea time: 1.643937
    pred time: 0.474755
    thmpred time: 0.000021
    mc time: 0.849137
    inst time: 0.0
Proof status: Time Out
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.281656

EL_LENGTH_APPEND
proof length: 4
proof time: 0.041604
Statistics
  infstep : 36
  nodes   : 15
  maxdepth: 3
Time: 1.22645
  inferstep time: 0.990492
  node_find time: 0.010604
  node_crea time: 0.159531
    pred time: 0.055181
    thmpred time: 0.000001
    mc time: 0.076723
    inst time: 0.0
Proof found: boolLib.STRIP_TAC THEN Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL
  [metisTools.METIS_TAC [listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", listTheory.LENGTH, DB.fetch "rich_list" "ELL_LENGTH_SNOC", listTheory.CONS, listTheory.list_case_compute, listTheory.EL, listTheory.EL_compute, listTheory.splitAtPki_APPEND, DB.fetch "rich_list" "ELL_PRE_LENGTH", listTheory.LAST_REVERSE, DB.fetch "rich_list" "LENGTH_NOT_NULL", listTheory.NULL_LENGTH, listTheory.NULL_EQ, listTheory.FRONT_CONS_EQ_NIL, DB.fetch "rich_list" "ELL_LAST"],
  BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.107166

ELL_EL
Statistics
  infstep : 460
  nodes   : 108
  maxdepth: 7
Time: 10.100522
  inferstep time: 7.124278
  node_find time: 0.186822
  node_crea time: 2.094841
    pred time: 0.496995
    thmpred time: 0.000032
    mc time: 1.073974
    inst time: 0.0
Proof status: Time Out
Org tac number: 10
Original proof time: 0.0
Replaying proof: 0.298916

ELL_MAP
proof length: 4
proof time: 0.033028
Statistics
  infstep : 40
  nodes   : 15
  maxdepth: 4
Time: 1.053668
  inferstep time: 0.734598
  node_find time: 0.011679
  node_crea time: 0.195745
    pred time: 0.066363
    thmpred time: 0.000003
    mc time: 0.125413
    inst time: 0.0
Proof found: boolLib.REPEAT boolLib.STRIP_TAC THEN BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL_SUC_SNOC", DB.fetch "rich_list" "ELL_EL", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "ELL_APPEND2", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "ELL_APPEND1", DB.fetch "rich_list" "EL_ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "ELL_0_SNOC", DB.fetch "rich_list" "ELL_LENGTH_CONS", DB.fetch "rich_list" "ELL_PRE_LENGTH", DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "ELL_LAST", listTheory.EL_MAP] THEN
  boolLib.MAP_EVERY boolLib.IMP_RES_TAC [numLib.DECIDE (Parse.Term [HolKernel.QUOTE " (*#loc 1 68167*)!n m. m < n ==> PRE (n - m) < n"]), (DB.fetch "rich_list" "ELL_CONS")] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "ELL_EL", listTheory.EL_REVERSE, DB.fetch "rich_list" "EL_ELL", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "LENGTH_BUTLASTN", listTheory.LENGTH_DROP, DB.fetch "rich_list" "SEG_APPEND", listTheory.LENGTH_TL, listTheory.EL_MAP, listTheory.GENLIST_EL_MAP, DB.fetch "rich_list" "EL_PRE_LENGTH", DB.fetch "rich_list" "BUTLASTN_MAP", DB.fetch "rich_list" "LASTN_MAP"]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.170969

LENGTH_FRONT
proof length: 3
proof time: 0.030718
Statistics
  infstep : 17
  nodes   : 6
  maxdepth: 2
Time: 0.669755
  inferstep time: 0.555767
  node_find time: 0.005445
  node_crea time: 0.074795
    pred time: 0.02722
    thmpred time: 0.000001
    mc time: 0.035367
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.LENGTH, DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "BUTLASTN_1", listTheory.APPEND_FRONT_LAST, listTheory.FRONT_CONS, listTheory.FRONT_DEF, listTheory.FRONT_CONS_EQ_NIL, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.FRONT_SNOC, DB.fetch "rich_list" "ELL_PRE_LENGTH", DB.fetch "rich_list" "EL_PRE_LENGTH", listTheory.LAST_EL, listTheory.EL_REVERSE], BasicProvers.SRW_TAC [] [listTheory.LENGTH_FRONT_CONS, listTheory.LENGTH, listTheory.FRONT_DEF, listTheory.FRONT_CONS, listTheory.FRONT_CONS_EQ_NIL, listTheory.APPEND_FRONT_LAST, DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "BUTLASTN_1", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.FRONT_SNOC, listTheory.EL_simp_restricted, DB.fetch "rich_list" "ELL_PRE_LENGTH", DB.fetch "rich_list" "EL_PRE_LENGTH", listTheory.LAST_EL]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.03639

DROP_LENGTH_APPEND
proof length: 2
proof time: 0.071847
Statistics
  infstep : 4
  nodes   : 4
  maxdepth: 2
Time: 0.248869
  inferstep time: 0.208803
  node_find time: 0.001041
  node_crea time: 0.027865
    pred time: 0.011609
    thmpred time: 0.0
    mc time: 0.012284
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "DROP_LENGTH_NIL", DB.fetch "rich_list" "DROP_APPEND", DB.fetch "rich_list" "DROP_APPEND1", DB.fetch "rich_list" "DROP_APPEND2", DB.fetch "rich_list" "APPEND_BUTLASTN_DROP", listTheory.TAKE_DROP, listTheory.TAKE_SUM, listTheory.DROP_LENGTH_TOO_LONG, listTheory.DROP_NIL, listTheory.LENGTH_DROP, listTheory.MEM_DROP, listTheory.ZIP_DROP, listTheory.last_drop, DB.fetch "rich_list" "DROP_DROP", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "DROP_SNOC"] THEN metisTools.METIS_TAC [DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "SEG_APPEND1", DB.fetch "rich_list" "SEG_APPEND2", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN", DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "SEG_SUC_CONS", listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.splitAtPki_APPEND, DB.fetch "rich_list" "DROP_APPEND", DB.fetch "rich_list" "DROP_APPEND1", DB.fetch "rich_list" "DROP_APPEND2", listTheory.APPEND_11_LENGTH]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.019997

TAKE_APPEND
proof length: 4
proof time: 0.014197
Statistics
  infstep : 10
  nodes   : 6
  maxdepth: 3
Time: 0.611932
  inferstep time: 0.478289
  node_find time: 0.003269
  node_crea time: 0.076466
    pred time: 0.030049
    thmpred time: 0.000002
    mc time: 0.057756
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 16676*)l1"] THENL [BasicProvers.SRW_TAC [] [listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", listTheory.LENGTH, listTheory.TAKE_def, listTheory.TAKE_nil, listTheory.TAKE_APPEND2, listTheory.TAKE_APPEND1, listTheory.TAKE_cons, DB.fetch "rich_list" "APPEND_TAKE_LASTN", listTheory.TAKE_DROP, listTheory.TAKE_SUM, listTheory.LLEX_EL_THM, listTheory.splitAtPki_EQN, DB.fetch "rich_list" "TAKE_SNOC", listTheory.LENGTH_TAKE, listTheory.TAKE_LENGTH_TOO_LONG], BasicProvers.SRW_TAC [numSimps.ARITH_ss] [DB.fetch "list" "APPEND", DB.fetch "list" "LENGTH", DB.fetch "list" "TAKE_APPEND1", DB.fetch "list" "TAKE_cons", DB.fetch "list" "TAKE_def", DB.fetch "list" "LENGTH_TAKE", DB.fetch "list" "MAP_TAKE", DB.fetch "list" "TAKE_nil", DB.fetch "list" "TAKE_LENGTH_ID", DB.fetch "list" "TAKE_0", DB.fetch "list" "LENGTH_EQ_NUM_compute", DB.fetch "list" "LENGTH_EQ_NUM", DB.fetch "list" "EL_APPEND_EQN", DB.fetch "list" "APPEND_11_LENGTH", DB.fetch "list" "APPEND_LENGTH_EQ", DB.fetch "list" "LENGTH_EQ_SUM"] THEN
  simpLib.SIMP_TAC boolSimps.bool_ss [arithmeticTheory.NUMERAL_DEF, arithmeticTheory.GREATER_DEF, (DB.fetch "numeral" "iZ"), arithmeticTheory.GREATER_OR_EQ, arithmeticTheory.LESS_OR_EQ, boolLib.EQ_IMP_THM, boolLib.DISJ_IMP_THM, arithmeticTheory.ADD_CLAUSES, arithmeticTheory.ALT_ZERO, arithmeticTheory.MULT_CLAUSES, arithmeticTheory.EXP, prim_recTheory.PRE, prim_recTheory.NOT_LESS_0, arithmeticTheory.SUB_0, arithmeticTheory.BIT1, arithmeticTheory.BIT2, arithmeticTheory.ODD, arithmeticTheory.EVEN]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.185935

TAKE_APPEND1
proof length: 1
proof time: 0.043838
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.085878
  inferstep time: 0.057722
  node_find time: 0.00029
  node_crea time: 0.011492
    pred time: 0.003572
    thmpred time: 0.0
    mc time: 0.017757
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.TAKE_APPEND1 , DB.fetch "rich_list" "TAKE_APPEND" , listTheory.TAKE_APPEND2 , listTheory.LLEX_EL_THM , listTheory.LENGTH_TAKE , DB.fetch "rich_list" "TAKE_SEG" , DB.fetch "rich_list" "TAKE_SNOC" , listTheory.LENGTH_TAKE_EQ , DB.fetch "rich_list" "APPEND_TAKE_LASTN" , listTheory.TAKE_DROP , listTheory.TAKE_SUM , listTheory.TAKE_LENGTH_TOO_LONG , listTheory.TAKE_LENGTH_ID_rwt , listTheory.splitAtPki_EQN , DB.fetch "rich_list" "TAKE_TAKE" , DB.fetch "rich_list" "TAKE"])
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.081666

TAKE_APPEND2
proof length: 1
proof time: 0.079519
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.136049
  inferstep time: 0.096428
  node_find time: 0.000608
  node_crea time: 0.027548
    pred time: 0.003971
    thmpred time: 0.0
    mc time: 0.025323
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.TAKE_APPEND2 , DB.fetch "rich_list" "TAKE_APPEND" , DB.fetch "rich_list" "BUTLASTN_APPEND1" , DB.fetch "rich_list" "DROP_APPEND2" , DB.fetch "rich_list" "ELL_APPEND1" , DB.fetch "rich_list" "LASTN_APPEND1" , DB.fetch "rich_list" "SEG_APPEND2" , listTheory.TAKE_LENGTH_TOO_LONG , listTheory.TAKE_APPEND1 , DB.fetch "rich_list" "TAKE_APPEND1" , listTheory.DROP_LENGTH_TOO_LONG , DB.fetch "rich_list" "SEG_APPEND" , listTheory.EL_APPEND_EQN , DB.fetch "rich_list" "DROP_APPEND" , listTheory.PAD_RIGHT , listTheory.PAD_LEFT])
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.134504

TAKE_LENGTH_APPEND
proof length: 1
proof time: 0.001136
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.153149
  inferstep time: 0.124533
  node_find time: 0.000694
  node_crea time: 0.016332
    pred time: 0.006069
    thmpred time: 0.0
    mc time: 0.012149
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ listTheory.TAKE_LENGTH_ID , listTheory.TAKE_APPEND1 , listTheory.TAKE_APPEND2 , DB.fetch "rich_list" "TAKE_APPEND" , DB.fetch "rich_list" "TAKE_APPEND1" , DB.fetch "rich_list" "TAKE_APPEND2" , listTheory.LLEX_EL_THM , DB.fetch "rich_list" "APPEND_TAKE_LASTN" , listTheory.TAKE_DROP , listTheory.TAKE_SUM , DB.fetch "rich_list" "TAKE_SNOC" , listTheory.LENGTH_TAKE , listTheory.TAKE_LENGTH_ID_rwt , listTheory.TAKE_LENGTH_TOO_LONG , DB.fetch "rich_list" "SEG_TAKE_BUTFISTN" , DB.fetch "rich_list" "TAKE_SEG" ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.054364

REVERSE_FLAT
proof length: 3
proof time: 0.004555
Statistics
  infstep : 7
  nodes   : 4
  maxdepth: 2
Time: 0.418498
  inferstep time: 0.36006
  node_find time: 0.002115
  node_crea time: 0.029192
    pred time: 0.010334
    thmpred time: 0.000002
    mc time: 0.025256
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [BasicProvers.SRW_TAC [] [listTheory.FLAT, listTheory.FLAT_compute, listTheory.ALL_DISTINCT_FLAT_REVERSE, DB.fetch "rich_list" "ASSOC_FOLDL_FLAT", DB.fetch "rich_list" "ASSOC_FOLDR_FLAT", DB.fetch "rich_list" "FCOMM_FOLDL_FLAT", DB.fetch "rich_list" "FCOMM_FOLDR_FLAT", DB.fetch "rich_list" "FILTER_FLAT", DB.fetch "rich_list" "LENGTH_FLAT", DB.fetch "rich_list" "MAP_FLAT", listTheory.MAP_FLAT, listTheory.LIST_TO_SET_FLAT, listTheory.LIST_BIND_def, DB.fetch "rich_list" "FLAT_FOLDL", DB.fetch "rich_list" "FLAT_FOLDR", listTheory.FLAT_EQ_NIL], simpLib.FULL_SIMP_TAC (BasicProvers.srw_ss ()) [(DB.fetch "list" "ALL_DISTINCT_APPEND")]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.055636
Replaying proof: 0.000146

MAP_FILTER
proof length: 2
proof time: 0.003563
Statistics
  infstep : 5
  nodes   : 3
  maxdepth: 2
Time: 0.298401
  inferstep time: 0.253553
  node_find time: 0.001719
  node_crea time: 0.029814
    pred time: 0.011864
    thmpred time: 0.0
    mc time: 0.013019
    inst time: 0.0
Proof found: boolLib.REPEAT boolLib.STRIP_TAC THEN BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "FILTER_MAP", DB.fetch "rich_list" "FOLDL_FILTER", DB.fetch "rich_list" "FOLDR_FILTER", DB.fetch "rich_list" "FOLDR_FILTER_REVERSE", DB.fetch "rich_list" "FILTER_IDEM", DB.fetch "rich_list" "FILTER_SNOC", listTheory.EVERY_FILTER, DB.fetch "rich_list" "FILTER_EQ", DB.fetch "rich_list" "tactictoe_thm_2", listTheory.FILTER_EQ_NIL, listTheory.FILTER_NEQ_ID, listTheory.FILTER_EQ_ID, listTheory.FILTER_NEQ_NIL, DB.fetch "rich_list" "FILTER_FILTER", DB.fetch "rich_list" "FILTER_FOLDL", DB.fetch "rich_list" "FILTER_FOLDR"]
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.220485

FLAT_REVERSE
proof length: 3
proof time: 0.005075
Statistics
  infstep : 13
  nodes   : 6
  maxdepth: 2
Time: 0.806844
  inferstep time: 0.670703
  node_find time: 0.00588
  node_crea time: 0.083616
    pred time: 0.033536
    thmpred time: 0.000001
    mc time: 0.040897
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "REVERSE_FLAT", listTheory.REVERSE_SNOC_DEF, listTheory.REVERSE_DEF, listTheory.ALL_DISTINCT_FLAT_REVERSE, listTheory.LIST_BIND_def, DB.fetch "rich_list" "ASSOC_FOLDL_FLAT", DB.fetch "rich_list" "ASSOC_FOLDR_FLAT", DB.fetch "rich_list" "FCOMM_FOLDL_FLAT", DB.fetch "rich_list" "FCOMM_FOLDR_FLAT", DB.fetch "rich_list" "FILTER_FLAT", DB.fetch "rich_list" "LENGTH_FLAT", DB.fetch "rich_list" "MAP_FLAT", listTheory.MAP_FLAT, listTheory.LIST_TO_SET_FLAT, listTheory.FLAT, DB.fetch "rich_list" "FLAT_FOLDL"], BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "REVERSE_FLAT", listTheory.REVERSE_DEF, listTheory.REVERSE_SNOC_DEF, listTheory.ALL_DISTINCT_FLAT_REVERSE, listTheory.FLAT, listTheory.FLAT_compute, listTheory.LIST_BIND_def, DB.fetch "rich_list" "ASSOC_FOLDL_FLAT", DB.fetch "rich_list" "ASSOC_FOLDR_FLAT", DB.fetch "rich_list" "FCOMM_FOLDL_FLAT", DB.fetch "rich_list" "FCOMM_FOLDR_FLAT", DB.fetch "rich_list" "FILTER_FLAT", DB.fetch "rich_list" "LENGTH_FLAT", DB.fetch "rich_list" "MAP_FLAT", listTheory.MAP_FLAT, listTheory.LIST_TO_SET_FLAT]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.055436

FLAT_FLAT
proof length: 3
proof time: 0.004006
Statistics
  infstep : 34
  nodes   : 7
  maxdepth: 2
Time: 0.785588
  inferstep time: 0.594439
  node_find time: 0.016415
  node_crea time: 0.093064
    pred time: 0.037784
    thmpred time: 0.0
    mc time: 0.046369
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [BasicProvers.SRW_TAC [] [listTheory.FLAT, listTheory.FLAT_compute, DB.fetch "rich_list" "ASSOC_FOLDL_FLAT", DB.fetch "rich_list" "ASSOC_FOLDR_FLAT", DB.fetch "rich_list" "FCOMM_FOLDL_FLAT", DB.fetch "rich_list" "FCOMM_FOLDR_FLAT", DB.fetch "rich_list" "FILTER_FLAT", DB.fetch "rich_list" "LENGTH_FLAT", DB.fetch "rich_list" "MAP_FLAT", DB.fetch "rich_list" "REVERSE_FLAT", listTheory.MAP_FLAT, listTheory.LIST_TO_SET_FLAT, listTheory.LIST_BIND_def, DB.fetch "rich_list" "FLAT_REVERSE", DB.fetch "rich_list" "FLAT_FOLDL", DB.fetch "rich_list" "FLAT_FOLDR"], simpLib.ASM_SIMP_TAC (BasicProvers.srw_ss ()) [listTheory.FLAT, listTheory.FLAT_compute, DB.fetch "rich_list" "ASSOC_FOLDL_FLAT", DB.fetch "rich_list" "ASSOC_FOLDR_FLAT", DB.fetch "rich_list" "FCOMM_FOLDL_FLAT", DB.fetch "rich_list" "FCOMM_FOLDR_FLAT", DB.fetch "rich_list" "FILTER_FLAT", DB.fetch "rich_list" "LENGTH_FLAT", DB.fetch "rich_list" "MAP_FLAT", DB.fetch "rich_list" "REVERSE_FLAT", listTheory.LIST_BIND_def, DB.fetch "rich_list" "FLAT_REVERSE", listTheory.MAP_FLAT, listTheory.LIST_TO_SET_FLAT, DB.fetch "rich_list" "FLAT_SNOC", listTheory.MEM_FLAT]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.025133

EVERY_REVERSE
proof length: 4
proof time: 0.060803
Statistics
  infstep : 10
  nodes   : 8
  maxdepth: 3
Time: 0.626365
  inferstep time: 0.47228
  node_find time: 0.004086
  node_crea time: 0.105903
    pred time: 0.035401
    thmpred time: 0.000003
    mc time: 0.060447
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [listTheory.EVERY_DEF, listTheory.REVERSE_DEF, listTheory.REVERSE_SNOC_DEF, listTheory.dropWhile_eq_nil, listTheory.EVERY_CONJ, listTheory.EVERY_EL, listTheory.EVERY_MEM, listTheory.EVERY_NOT_EXISTS, listTheory.EVERY_SNOC, listTheory.FILTER_EQ_ID, listTheory.NOT_EVERY, DB.fetch "rich_list" "EVERY_FOLDL", DB.fetch "rich_list" "EVERY_FOLDL_MAP", DB.fetch "rich_list" "EVERY_FOLDR", DB.fetch "rich_list" "EVERY_FOLDR_MAP", listTheory.EVERY_APPEND], (simpLib.FULL_SIMP_TAC (BasicProvers.srw_ss () hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.ARITH_ss)) [(DB.fetch "list" "NOT_EVERY"), (DB.fetch "list" "dropWhile_APPEND_EXISTS"), arithmeticTheory.ADD1] THEN
  metisTools.METIS_TAC [listTheory.EVERY_DEF, listTheory.IMP_EVERY_LUPDATE, listTheory.EVERY_CONJ, listTheory.EVERY_SNOC, DB.fetch "rich_list" "EVERY_FOLDL", DB.fetch "rich_list" "EVERY_FOLDR", listTheory.EVERY_MEM_MONO, listTheory.EVERY_MEM, listTheory.EVERY_NOT_EXISTS, listTheory.EVERY_MONOTONIC, listTheory.MONO_EVERY, DB.fetch "rich_list" "EVERY_FOLDL_MAP", DB.fetch "rich_list" "EVERY_FOLDR_MAP", listTheory.EVERY_EL, listTheory.FILTER_EQ_ID, listTheory.NOT_EVERY]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.11334

EXISTS_REVERSE
proof length: 1
proof time: 0.003331
Statistics
  infstep : 7
  nodes   : 5
  maxdepth: 2
Time: 0.417348
  inferstep time: 0.333175
  node_find time: 0.002855
  node_crea time: 0.057902
    pred time: 0.020807
    thmpred time: 0.000002
    mc time: 0.025288
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ listTheory.EXISTS_MEM , listTheory.EXISTS_NOT_EVERY , listTheory.EXISTS_SNOC , listTheory.NOT_EXISTS , DB.fetch "rich_list" "EXISTS_DISJ" , DB.fetch "rich_list" "EXISTS_FOLDL" , DB.fetch "rich_list" "EXISTS_FOLDL_MAP" , DB.fetch "rich_list" "EXISTS_FOLDR" , DB.fetch "rich_list" "EXISTS_FOLDR_MAP" , listTheory.MONO_EXISTS , listTheory.EXISTS_DEF , listTheory.EXISTS_APPEND , listTheory.EXISTS_CONG , listTheory.EXISTS_MAP , listTheory.EXISTS_GENLIST , listTheory.EVERY_NOT_EXISTS ])
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.114907

EVERY_SEG
Statistics
  infstep : 676
  nodes   : 99
  maxdepth: 6
Time: 10.0763
  inferstep time: 6.785299
  node_find time: 0.340555
  node_crea time: 1.899547
    pred time: 0.571617
    thmpred time: 0.000027
    mc time: 0.740993
    inst time: 0.0
Proof status: Time Out
Org tac number: 12
Original proof time: 0.0
Replaying proof: 0.348379

EVERY_TAKE
proof length: 2
proof time: 0.002843
Statistics
  infstep : 15
  nodes   : 8
  maxdepth: 2
Time: 0.669141
  inferstep time: 0.540434
  node_find time: 0.004355
  node_crea time: 0.092152
    pred time: 0.028751
    thmpred time: 0.000002
    mc time: 0.045231
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [listTheory.LENGTH_TAKE, DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "TAKE_SNOC", listTheory.LLEX_EL_THM, listTheory.TAKE_APPEND1, DB.fetch "rich_list" "TAKE_APPEND1", listTheory.LENGTH_TAKE_EQ, listTheory.TAKE_LENGTH_TOO_LONG, listTheory.TAKE_LENGTH_ID_rwt, DB.fetch "rich_list" "APPEND_TAKE_LASTN", listTheory.splitAtPki_EQN, DB.fetch "rich_list" "TAKE_TAKE", DB.fetch "rich_list" "TAKE_APPEND", listTheory.TAKE_SUM, DB.fetch "rich_list" "TAKE", listTheory.MAP_TAKE] THEN BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "EVERY_SEG", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN", DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "SEG_SNOC", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_SEG", DB.fetch "rich_list" "SEG_APPEND2", DB.fetch "rich_list" "SEG_APPEND1", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "DROP_SEG"]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.088161

EVERY_DROP
proof length: 5
proof time: 0.013969
Statistics
  infstep : 152
  nodes   : 29
  maxdepth: 4
Time: 3.492617
  inferstep time: 2.508953
  node_find time: 0.074847
  node_crea time: 0.601433
    pred time: 0.204229
    thmpred time: 0.00001
    mc time: 0.230607
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "DROP_SNOC", listTheory.ZIP_DROP, DB.fetch "rich_list" "DROP_APPEND1", DB.fetch "rich_list" "DROP_DROP", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN", listTheory.DROP_LENGTH_TOO_LONG, DB.fetch "rich_list" "APPEND_BUTLASTN_DROP", listTheory.last_drop, listTheory.LENGTH_DROP, listTheory.splitAtPki_EQN, listTheory.DROP_NIL, listTheory.MEM_DROP, DB.fetch "rich_list" "DROP_APPEND", DB.fetch "rich_list" "EVERY_BUTLASTN", DB.fetch "rich_list" "EVERY_LASTN"] THEN BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL
  [BasicProvers.SRW_TAC [] [listTheory.EVERY_DEF, listTheory.LENGTH, DB.fetch "rich_list" "EVERY_SEG", DB.fetch "rich_list" "SEG_APPEND2", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "SEG_LENGTH_SNOC", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN", DB.fetch "rich_list" "SEG_SNOC", DB.fetch "rich_list" "SEG_APPEND1", DB.fetch "rich_list" "LENGTH_SEG"],
  BasicProvers.SRW_TAC [] [listTheory.EVERY_DEF, listTheory.LENGTH, DB.fetch "rich_list" "EVERY_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "SEG_APPEND2", DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "SEG_LENGTH_SNOC", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN", DB.fetch "rich_list" "SEG_SNOC"] THEN
  BasicProvers.SRW_TAC [numSimps.ARITH_ss] [listTheory.LENGTH, listTheory.LENGTH_SNOC, DB.fetch "rich_list" "LENGTH_SCANL", DB.fetch "rich_list" "LENGTH_SCANR", listTheory.tactictoe_thm_14, DB.fetch "rich_list" "EVERY_SEG", DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "SEG_LENGTH_SNOC", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "SEG_APPEND2", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN"]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.108796

EXISTS_SEG
proof length: 1
proof time: 0.056667
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.106692
  inferstep time: 0.082465
  node_find time: 0.000335
  node_crea time: 0.014148
    pred time: 0.003992
    thmpred time: 0.000001
    mc time: 0.011214
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "EVERY_SEG" , DB.fetch "rich_list" "LENGTH_SEG" , DB.fetch "rich_list" "SEG_SNOC" , DB.fetch "rich_list" "SEG_TAKE_BUTFISTN" , DB.fetch "rich_list" "SEG_SEG" , DB.fetch "rich_list" "SEG_APPEND1" , DB.fetch "rich_list" "SEG_SUC_CONS" , DB.fetch "rich_list" "SEG_APPEND" , DB.fetch "rich_list" "SEG_APPEND2" , listTheory.MONO_EXISTS , listTheory.EXISTS_MEM , listTheory.EXISTS_NOT_EVERY , listTheory.EXISTS_SNOC , listTheory.NOT_EXISTS , DB.fetch "rich_list" "EXISTS_DISJ" , DB.fetch "rich_list" "EXISTS_FOLDL"])
Org tac number: 14
Original proof time: 0.0
Replaying proof: 0.421861

EXISTS_TAKE_IMP
proof length: 5
proof time: 0.05735
Statistics
  infstep : 91
  nodes   : 19
  maxdepth: 4
Time: 2.078252
  inferstep time: 1.587025
  node_find time: 0.035796
  node_crea time: 0.297282
    pred time: 0.121893
    thmpred time: 0.000006
    mc time: 0.121242
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [metisTools.METIS_TAC [listTheory.EXISTS_DEF, listTheory.TAKE_def, listTheory.TAKE_nil, DB.fetch "rich_list" "EXISTS_SEG", listTheory.MONO_EXISTS, listTheory.EXISTS_CONG, listTheory.EXISTS_GENLIST, listTheory.EXISTS_MEM, listTheory.EXISTS_NOT_EVERY, listTheory.EXISTS_SNOC, listTheory.NOT_EXISTS, DB.fetch "rich_list" "EXISTS_DISJ", DB.fetch "rich_list" "EXISTS_FOLDL", DB.fetch "rich_list" "EXISTS_FOLDL_MAP", DB.fetch "rich_list" "EXISTS_FOLDR", DB.fetch "rich_list" "EXISTS_FOLDR_MAP"], let
  fun simp l = simpLib.ASM_SIMP_TAC ( BasicProvers.srw_ss ( ) hhs_infixl0_open simpLib.++ hhs_infixl0_close boolSimps.LET_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.ARITH_ss ) l
in
  boolLib.REWRITE_TAC [listTheory.EXISTS_DEF, (DB.fetch "rich_list" "SEG"), listTheory.LENGTH, arithmeticTheory.ADD, arithmeticTheory.ADD_0, arithmeticTheory.NOT_SUC_LESS_EQ_0] THEN
  simp [(DB.fetch "list" "TAKE_def")] THEN
  metisTools.METIS_TAC [listTheory.TAKE_def, listTheory.TAKE_cons, listTheory.DROP_def, listTheory.EXISTS_DEF, listTheory.EXISTS_SNOC, DB.fetch "rich_list" "EXISTS_DISJ", DB.fetch "rich_list" "EXISTS_FOLDL", DB.fetch "rich_list" "EXISTS_FOLDR", DB.fetch "rich_list" "EXISTS_FOLDL_MAP", DB.fetch "rich_list" "EXISTS_FOLDR_MAP", listTheory.EXISTS_APPEND, DB.fetch "rich_list" "EXISTS_SEG", listTheory.MONO_EXISTS, listTheory.EXISTS_MEM, listTheory.EXISTS_NOT_EVERY, listTheory.NOT_EXISTS]
end]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.040106

EXISTS_DROP_IMP
proof length: 5
proof time: 0.159024
Statistics
  infstep : 14
  nodes   : 7
  maxdepth: 3
Time: 0.775243
  inferstep time: 0.62805
  node_find time: 0.005373
  node_crea time: 0.076704
    pred time: 0.030891
    thmpred time: 0.000002
    mc time: 0.045972
    inst time: 0.0
Proof found: boolLib.REPEAT BasicProvers.Induct THENL [metisTools.METIS_TAC [listTheory.EXISTS_DEF, listTheory.DROP_compute, DB.fetch "rich_list" "DROP", listTheory.DROP_0, DB.fetch "rich_list" "EXISTS_SEG", DB.fetch "rich_list" "EXISTS_TAKE_IMP", listTheory.MONO_EXISTS, listTheory.EXISTS_CONG, listTheory.EXISTS_GENLIST, listTheory.EXISTS_MEM, listTheory.EXISTS_NOT_EVERY, listTheory.EXISTS_SNOC, listTheory.NOT_EXISTS, DB.fetch "rich_list" "EXISTS_DISJ", DB.fetch "rich_list" "EXISTS_FOLDL", DB.fetch "rich_list" "EXISTS_FOLDL_MAP"], BasicProvers.SRW_TAC [] [], boolLib.REWRITE_TAC [(DB.fetch "list" "EXISTS_DEF"), (DB.fetch "list" "MEM")] THEN
  metisTools.METIS_TAC [listTheory.DROP_cons, listTheory.DROP_def, listTheory.EXISTS_DEF, listTheory.EXISTS_SNOC, DB.fetch "rich_list" "EXISTS_DISJ", DB.fetch "rich_list" "EXISTS_FOLDL", DB.fetch "rich_list" "EXISTS_FOLDR", DB.fetch "rich_list" "EXISTS_FOLDL_MAP", DB.fetch "rich_list" "EXISTS_FOLDR_MAP", listTheory.EXISTS_APPEND, DB.fetch "rich_list" "EXISTS_SEG", DB.fetch "rich_list" "EXISTS_TAKE_IMP", listTheory.MONO_EXISTS, listTheory.EXISTS_MEM, listTheory.EXISTS_NOT_EVERY, listTheory.NOT_EXISTS]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.025231

EXISTS_TAKE
proof length: 1
proof time: 0.040286
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.083981
  inferstep time: 0.051033
  node_find time: 0.000424
  node_crea time: 0.020873
    pred time: 0.003377
    thmpred time: 0.0
    mc time: 0.018846
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "EXISTS_TAKE_IMP" , DB.fetch "rich_list" "EXISTS_SEG" , DB.fetch "rich_list" "EXISTS_DROP_IMP" , listTheory.MONO_EXISTS , listTheory.EXISTS_MEM , listTheory.EXISTS_NOT_EVERY , listTheory.EXISTS_SNOC , listTheory.NOT_EXISTS , DB.fetch "rich_list" "EXISTS_DISJ" , DB.fetch "rich_list" "EXISTS_FOLDL" , DB.fetch "rich_list" "EXISTS_FOLDL_MAP" , DB.fetch "rich_list" "EXISTS_FOLDR" , DB.fetch "rich_list" "EXISTS_FOLDR_MAP" , DB.fetch "rich_list" "EXISTS_REVERSE" , listTheory.EXISTS_CONG , listTheory.EXISTS_DEF])
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.183063

EXISTS_DROP
proof length: 1
proof time: 0.039239
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.165972
  inferstep time: 0.146484
  node_find time: 0.000313
  node_crea time: 0.012156
    pred time: 0.003778
    thmpred time: 0.0
    mc time: 0.007877
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "EXISTS_DROP_IMP" , DB.fetch "rich_list" "EXISTS_TAKE" , DB.fetch "rich_list" "EXISTS_SEG" , DB.fetch "rich_list" "EXISTS_TAKE_IMP" , listTheory.MONO_EXISTS , listTheory.EXISTS_MEM , listTheory.EXISTS_NOT_EVERY , listTheory.EXISTS_SNOC , listTheory.NOT_EXISTS , DB.fetch "rich_list" "EXISTS_DISJ" , DB.fetch "rich_list" "EXISTS_FOLDL" , DB.fetch "rich_list" "EXISTS_FOLDL_MAP" , DB.fetch "rich_list" "EXISTS_FOLDR" , DB.fetch "rich_list" "EXISTS_FOLDR_MAP" , DB.fetch "rich_list" "EXISTS_REVERSE" , listTheory.EXISTS_CONG])
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.152405

EXISTS_LASTN
proof length: 2
proof time: 0.058864
Statistics
  infstep : 220
  nodes   : 60
  maxdepth: 5
Time: 6.171771
  inferstep time: 4.86688
  node_find time: 0.080716
  node_crea time: 0.802679
    pred time: 0.271325
    thmpred time: 0.000013
    mc time: 0.366667
    inst time: 0.0
Proof found: boolLib.REWRITE_TAC [DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "EVERY_LASTN", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "LASTN_MAP", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LASTN_APPEND2", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "LASTN_def", DB.fetch "rich_list" "EXISTS_DROP", DB.fetch "rich_list" "EXISTS_TAKE"] THEN metisTools.METIS_TAC [DB.fetch "rich_list" "LASTN_def", DB.fetch "rich_list" "EXISTS_TAKE", DB.fetch "rich_list" "EXISTS_TAKE_IMP", DB.fetch "rich_list" "EXISTS_DROP", DB.fetch "rich_list" "EXISTS_REVERSE", DB.fetch "rich_list" "EXISTS_SEG", DB.fetch "rich_list" "EXISTS_DROP_IMP", listTheory.MONO_EXISTS, listTheory.EXISTS_MEM, listTheory.EXISTS_NOT_EVERY, listTheory.EXISTS_SNOC, listTheory.NOT_EXISTS, DB.fetch "rich_list" "EXISTS_DISJ", DB.fetch "rich_list" "EXISTS_FOLDL", DB.fetch "rich_list" "EXISTS_FOLDL_MAP", DB.fetch "rich_list" "EXISTS_FOLDR"]
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.162137

EXISTS_BUTLASTN
proof length: 2
proof time: 0.055773
Statistics
  infstep : 67
  nodes   : 19
  maxdepth: 4
Time: 2.318988
  inferstep time: 1.815818
  node_find time: 0.02468
  node_crea time: 0.354015
    pred time: 0.140336
    thmpred time: 0.000006
    mc time: 0.142126
    inst time: 0.0
Proof found: boolLib.ASM_REWRITE_TAC [DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "EVERY_BUTLASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_CONS", DB.fetch "rich_list" "BUTLASTN_MAP", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_APPEND2", DB.fetch "rich_list" "BUTLASTN_BUTLASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_DROP", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "EXISTS_DROP", DB.fetch "rich_list" "EXISTS_LASTN"] THEN metisTools.METIS_TAC [DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "EXISTS_DROP", DB.fetch "rich_list" "EXISTS_DROP_IMP", DB.fetch "rich_list" "EXISTS_REVERSE", DB.fetch "rich_list" "EXISTS_LASTN", DB.fetch "rich_list" "EXISTS_TAKE", DB.fetch "rich_list" "EXISTS_SEG", DB.fetch "rich_list" "EXISTS_TAKE_IMP", listTheory.MONO_EXISTS, listTheory.EXISTS_MEM, listTheory.EXISTS_NOT_EVERY, listTheory.EXISTS_SNOC, listTheory.NOT_EXISTS, DB.fetch "rich_list" "EXISTS_DISJ", DB.fetch "rich_list" "EXISTS_FOLDL", DB.fetch "rich_list" "EXISTS_FOLDL_MAP"]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.140625
Replaying proof: 0.001113

MEM_TAKE_IMP
proof length: 3
proof time: 0.159776
Statistics
  infstep : 9
  nodes   : 8
  maxdepth: 2
Time: 0.58287
  inferstep time: 0.40852
  node_find time: 0.004423
  node_crea time: 0.11432
    pred time: 0.041506
    thmpred time: 0.000002
    mc time: 0.0699
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [metisTools.METIS_TAC [listTheory.MEM, listTheory.TAKE_def, listTheory.TAKE_nil, listTheory.LIST_TO_SET_DEF, listTheory.LIST_TO_SET, listTheory.LIST_TO_SET_THM, DB.fetch "rich_list" "TAKE", listTheory.splitAtPki_EQN, listTheory.TAKE_LENGTH_ID_rwt, DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "EVERY_TAKE", DB.fetch "rich_list" "EXISTS_TAKE", DB.fetch "rich_list" "EXISTS_TAKE_IMP", DB.fetch "rich_list" "TAKE_TAKE", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN", listTheory.TAKE_SUM], metisTools.METIS_TAC [listTheory.MEM, listTheory.TAKE_cons, listTheory.TAKE_def, listTheory.LIST_TO_SET_DEF, listTheory.LIST_TO_SET, listTheory.LIST_TO_SET_THM, pred_setTheory.tactictoe_thm_44, pred_setTheory.tactictoe_thm_45, pred_setTheory.tactictoe_thm_49, pred_setTheory.tactictoe_thm_21, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_46, DB.fetch "rich_list" "TAKE", listTheory.TAKE_LENGTH_ID_rwt, DB.fetch "rich_list" "APPEND_TAKE_LASTN"]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.052292

MEM_DROP_IMP
proof length: 4
proof time: 0.139609
Statistics
  infstep : 7
  nodes   : 6
  maxdepth: 3
Time: 0.503061
  inferstep time: 0.384595
  node_find time: 0.002682
  node_crea time: 0.077453
    pred time: 0.024166
    thmpred time: 0.000002
    mc time: 0.045987
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.MEM, listTheory.DROP_def, listTheory.DROP_nil, listTheory.LIST_TO_SET_DEF, listTheory.LIST_TO_SET, listTheory.LIST_TO_SET_THM, listTheory.MEM_DROP, listTheory.DROP_LENGTH_TOO_LONG, listTheory.DROP_NIL, listTheory.splitAtPki_EQN, DB.fetch "rich_list" "APPEND_BUTLASTN_DROP", DB.fetch "rich_list" "DROP_DROP", DB.fetch "rich_list" "EVERY_DROP", DB.fetch "rich_list" "EXISTS_DROP", DB.fetch "rich_list" "EXISTS_DROP_IMP", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN"], boolLib.NTAC 2 boolLib.GEN_TAC THEN
  metisTools.METIS_TAC [listTheory.MEM, listTheory.DROP_cons, listTheory.DROP_def, listTheory.LIST_TO_SET_DEF, listTheory.LIST_TO_SET, listTheory.LIST_TO_SET_THM, pred_setTheory.tactictoe_thm_44, pred_setTheory.tactictoe_thm_45, pred_setTheory.tactictoe_thm_49, pred_setTheory.tactictoe_thm_21, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, pred_setTheory.tactictoe_thm_46, listTheory.MEM_DROP, DB.fetch "rich_list" "DROP", DB.fetch "rich_list" "APPEND_BUTLASTN_DROP"]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.032273

MEM_TAKE
proof length: 1
proof time: 0.050056
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.091412
  inferstep time: 0.063817
  node_find time: 0.000337
  node_crea time: 0.014979
    pred time: 0.004502
    thmpred time: 0.0
    mc time: 0.012964
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "MEM_TAKE_IMP" , DB.fetch "rich_list" "EVERY_TAKE" , DB.fetch "rich_list" "EXISTS_TAKE" , DB.fetch "rich_list" "TAKE_SNOC" , DB.fetch "rich_list" "TAKE_SEG" , listTheory.LENGTH_TAKE , listTheory.LLEX_EL_THM , listTheory.TAKE_APPEND1 , DB.fetch "rich_list" "TAKE_APPEND1" , listTheory.LENGTH_TAKE_EQ , listTheory.TAKE_LENGTH_TOO_LONG , listTheory.TAKE_LENGTH_ID_rwt , DB.fetch "rich_list" "APPEND_TAKE_LASTN" , listTheory.splitAtPki_EQN , DB.fetch "rich_list" "TAKE_TAKE" , DB.fetch "rich_list" "TAKE_APPEND"])
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.067816

MEM_DROP
proof length: 1
proof time: 0.034832
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.086898
  inferstep time: 0.060199
  node_find time: 0.000284
  node_crea time: 0.013177
    pred time: 0.003349
    thmpred time: 0.0
    mc time: 0.012456
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "MEM_DROP_IMP" , listTheory.MEM_DROP , DB.fetch "rich_list" "EVERY_DROP" , DB.fetch "rich_list" "EXISTS_DROP" , DB.fetch "rich_list" "DROP_SNOC" , DB.fetch "rich_list" "DROP_SEG" , listTheory.ZIP_DROP , DB.fetch "rich_list" "DROP_APPEND1" , DB.fetch "rich_list" "DROP_DROP" , DB.fetch "rich_list" "SEG_TAKE_BUTFISTN" , listTheory.DROP_LENGTH_TOO_LONG , DB.fetch "rich_list" "APPEND_BUTLASTN_DROP" , listTheory.last_drop , listTheory.LENGTH_DROP , listTheory.splitAtPki_EQN , listTheory.DROP_NIL])
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.064291

MEM_BUTLASTN
proof length: 3
proof time: 0.042175
Statistics
  infstep : 11
  nodes   : 5
  maxdepth: 3
Time: 0.66346
  inferstep time: 0.512932
  node_find time: 0.00622
  node_crea time: 0.085325
    pred time: 0.032408
    thmpred time: 0.000002
    mc time: 0.060707
    inst time: 0.0
Proof found: boolLib.ASM_REWRITE_TAC [DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "EVERY_BUTLASTN", DB.fetch "rich_list" "EXISTS_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_CONS", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_MAP", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_APPEND2", DB.fetch "rich_list" "BUTLASTN_BUTLASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_DROP", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL"] THEN boolLib.PURE_ONCE_REWRITE_TAC [(DB.fetch "rich_list" "MEM_EXISTS")] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "MEM_EXISTS", DB.fetch "rich_list" "EXISTS_DROP", DB.fetch "rich_list" "MEM_DROP", DB.fetch "rich_list" "EVERY_DROP", DB.fetch "rich_list" "DROP_SNOC", DB.fetch "rich_list" "DROP_SEG", listTheory.ZIP_DROP, DB.fetch "rich_list" "DROP_APPEND1", listTheory.DROP_def, DB.fetch "rich_list" "EXISTS_BUTLASTN", DB.fetch "rich_list" "EXISTS_TAKE", DB.fetch "rich_list" "EXISTS_LASTN", DB.fetch "rich_list" "DROP_DROP", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN", listTheory.DROP_LENGTH_TOO_LONG]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.063923

MEM_LASTN
proof length: 5
proof time: 0.126241
Statistics
  infstep : 146
  nodes   : 37
  maxdepth: 4
Time: 3.572641
  inferstep time: 2.502865
  node_find time: 0.068306
  node_crea time: 0.717024
    pred time: 0.239941
    thmpred time: 0.000009
    mc time: 0.289527
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  boolLib.REPEAT INDUCT_TAC
end THENL [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LASTN", arithmeticTheory.ZERO_LESS_EQ, numeralTheory.numeral_distrib, DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "EVERY_LASTN", DB.fetch "rich_list" "EXISTS_LASTN", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN_MAP", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "LASTN_APPEND2"], Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL
  [metisTools.METIS_TAC [listTheory.MEM, DB.fetch "rich_list" "LASTN", listTheory.LENGTH, listTheory.LIST_TO_SET_DEF, listTheory.LIST_TO_SET, listTheory.LIST_TO_SET_THM, arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_LEQ, arithmeticTheory.NOT_SUC_LESS_EQ_0, DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "EVERY_LASTN", DB.fetch "rich_list" "EXISTS_LASTN", DB.fetch "rich_list" "LASTN_LASTN"],
  metisTools.METIS_TAC [DB.fetch "rich_list" "LASTN", listTheory.MEM_SNOC, listTheory.LENGTH_SNOC, listTheory.LIST_TO_SET_SNOC, listTheory.SNOC, arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_LEQ, arithmeticTheory.NOT_SUC_LESS_EQ_0, DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "EVERY_LASTN", DB.fetch "rich_list" "EXISTS_LASTN", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "LASTN_CONS"]]]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.067387

ZIP_SNOC
Statistics
  infstep : 458
  nodes   : 93
  maxdepth: 5
Time: 10.004054
  inferstep time: 7.1661
  node_find time: 0.213423
  node_crea time: 1.885529
    pred time: 0.487236
    thmpred time: 0.000023
    mc time: 0.865061
    inst time: 0.0
Proof status: Time Out
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.158526

UNZIP_SNOC
proof length: 1
proof time: 0.006817
Statistics
  infstep : 6
  nodes   : 3
  maxdepth: 1
Time: 0.209759
  inferstep time: 0.140575
  node_find time: 0.002631
  node_crea time: 0.043069
    pred time: 0.010578
    thmpred time: 0.0
    mc time: 0.023247
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ listTheory.UNZIP , listTheory.LENGTH_UNZIP , DB.fetch "rich_list" "UNZIP_FST_DEF" , DB.fetch "rich_list" "UNZIP_SND_DEF" , listTheory.UNZIP_MAP , listTheory.UNZIP_THM , listTheory.ZIP_UNZIP , listTheory.UNZIP_ZIP , listTheory.ZIP_MAP , pairTheory.PAIR , pairTheory.PAIR_FUN_THM , pairTheory.PAIR_MAP , pairTheory.SWAP_def , pred_setTheory.CROSS_DEF , listTheory.MEM_ZIP_MEM_MAP , pairTheory.ELIM_UNCURRY ])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.059179

LENGTH_UNZIP_FST
proof length: 1
proof time: 0.027849
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.085995
  inferstep time: 0.064745
  node_find time: 0.000325
  node_crea time: 0.015179
    pred time: 0.005336
    thmpred time: 0.000001
    mc time: 0.008367
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "UNZIP_FST_DEF" , listTheory.ZIP_GENLIST , listTheory.LENGTH_ZIP , listTheory.EL_ZIP , listTheory.ALL_DISTINCT_ZIP , listTheory.ALL_DISTINCT_ZIP_SWAP , listTheory.EVERY2_EVERY , listTheory.FOLDL2_FOLDL , listTheory.LENGTH_UNZIP , listTheory.LIST_REL_EVERY_ZIP , listTheory.MAP2_MAP , listTheory.MAP2_ZIP , listTheory.MEM_ZIP , listTheory.SUM_MAP_PLUS_ZIP , listTheory.UNZIP_ZIP , listTheory.ZIP_DROP])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.048205

LENGTH_UNZIP_SND
proof length: 1
proof time: 0.040393
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.096641
  inferstep time: 0.065645
  node_find time: 0.000348
  node_crea time: 0.017294
    pred time: 0.004792
    thmpred time: 0.000001
    mc time: 0.015168
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "UNZIP_SND_DEF" , listTheory.ZIP_GENLIST , DB.fetch "rich_list" "LENGTH_UNZIP_FST" , listTheory.LENGTH_ZIP , listTheory.EL_ZIP , listTheory.ALL_DISTINCT_ZIP , listTheory.ALL_DISTINCT_ZIP_SWAP , listTheory.EVERY2_EVERY , listTheory.FOLDL2_FOLDL , listTheory.LENGTH_UNZIP , listTheory.LIST_REL_EVERY_ZIP , listTheory.MAP2_MAP , listTheory.MAP2_ZIP , listTheory.MEM_ZIP , listTheory.SUM_MAP_PLUS_ZIP , listTheory.UNZIP_ZIP])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.056864

SUM_REVERSE
proof length: 4
proof time: 0.002561
Statistics
  infstep : 478
  nodes   : 71
  maxdepth: 5
Time: 7.200581
  inferstep time: 5.33442
  node_find time: 0.20687
  node_crea time: 0.870169
    pred time: 0.232025
    thmpred time: 0.00002
    mc time: 0.436136
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [listTheory.SUM_SNOC, DB.fetch "rich_list" "SUM_FOLDL", DB.fetch "rich_list" "SUM_FOLDR", listTheory.SUM, listTheory.SUM_ACC_SUM_LEM, listTheory.SUM_APPEND, listTheory.SUM_SUM_ACC, listTheory.SUM_eq_0, DB.fetch "rich_list" "LENGTH_FLAT", listTheory.SUM_MAP_FOLDL, listTheory.SUM_MAP_PLUS, listTheory.SUM_MAP_PLUS_ZIP, listTheory.SUM_IMAGE_eq_SUM_MAP_SET_TO_LIST, listTheory.SUM_IMAGE_LIST_TO_SET_upper_bound, listTheory.SUM_MAP_MEM_bound, listTheory.EL_REVERSE] THEN let
  fun simp l = simpLib.ASM_SIMP_TAC ( BasicProvers.srw_ss ( ) hhs_infixl0_open simpLib.++ hhs_infixl0_close boolSimps.LET_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.ARITH_ss ) l
in
  boolLib.MATCH_MP_TAC (DB.fetch "rich_list" "tactictoe_thm_23") THEN
  boolLib.REPEAT boolLib.GEN_TAC THEN
  simp [(DB.fetch "list" "TAKE_def")]
end
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.058913

SUM_FLAT
proof length: 4
proof time: 0.036982
Statistics
  infstep : 61
  nodes   : 16
  maxdepth: 3
Time: 1.496934
  inferstep time: 1.197026
  node_find time: 0.023589
  node_crea time: 0.166863
    pred time: 0.054055
    thmpred time: 0.000004
    mc time: 0.073352
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL [BasicProvers.SRW_TAC [] [listTheory.FLAT, listTheory.FLAT_compute, DB.fetch "rich_list" "LENGTH_FLAT", listTheory.SUM_MAP_FOLDL, listTheory.SUM_MAP_PLUS, listTheory.SUM_MAP_PLUS_ZIP, listTheory.SUM_IMAGE_eq_SUM_MAP_SET_TO_LIST, listTheory.SUM_IMAGE_LIST_TO_SET_upper_bound, listTheory.SUM_MAP_MEM_bound, listTheory.SUM, listTheory.SUM_SNOC, DB.fetch "rich_list" "SUM_FOLDL", DB.fetch "rich_list" "SUM_FOLDR", DB.fetch "rich_list" "SUM_REVERSE", listTheory.SUM_ACC_SUM_LEM, listTheory.SUM_APPEND], boolLib.ASM_REWRITE_TAC [(DB.fetch "rich_list" "FLAT_SNOC"), listTheory.MAP_SNOC, listTheory.MAP, listTheory.FLAT, listTheory.FOLDL_SNOC] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "FLAT_SNOC", listTheory.FLAT_APPEND, listTheory.SUM_SNOC, listTheory.SUM_APPEND, DB.fetch "rich_list" "SUM_FOLDL", DB.fetch "rich_list" "SUM_FOLDR", DB.fetch "rich_list" "SUM_REVERSE", listTheory.SUM_eq_0, listTheory.SUM, listTheory.SUM_ACC_SUM_LEM, listTheory.SUM_SUM_ACC, DB.fetch "rich_list" "LENGTH_FLAT", DB.fetch "rich_list" "ASSOC_FOLDL_FLAT", DB.fetch "rich_list" "ASSOC_FOLDR_FLAT", DB.fetch "rich_list" "FCOMM_FOLDL_FLAT", DB.fetch "rich_list" "FCOMM_FOLDR_FLAT"]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.029227

EL_APPEND1
proof length: 1
proof time: 0.066523
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.108598
  inferstep time: 0.078715
  node_find time: 0.000347
  node_crea time: 0.014644
    pred time: 0.003693
    thmpred time: 0.0
    mc time: 0.014851
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.EL_APPEND_EQN , listTheory.EL_ZIP , listTheory.LIST_REL_EL_EQN , listTheory.LLEX_EL_THM , listTheory.MEM_ZIP , listTheory.LIST_REL_trans , listTheory.LIST_EQ , listTheory.LIST_EQ_REWRITE , listTheory.EL_MAP , listTheory.EL_SNOC , listTheory.EVERY_EL , listTheory.LUPDATE_SAME , listTheory.LUPDATE_SEM , DB.fetch "rich_list" "EL_ELL" , listTheory.MEM_DROP , listTheory.MEM_EL])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.010924

EL_APPEND2
proof length: 6
proof time: 0.007978
Statistics
  infstep : 60
  nodes   : 23
  maxdepth: 4
Time: 2.568478
  inferstep time: 2.043954
  node_find time: 0.020652
  node_crea time: 0.354697
    pred time: 0.116774
    thmpred time: 0.000004
    mc time: 0.202904
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [BasicProvers.SRW_TAC [] [listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", listTheory.LENGTH, listTheory.EL_APPEND_EQN, DB.fetch "rich_list" "EL_APPEND1", listTheory.LLEX_EL_THM, listTheory.EL_ZIP, listTheory.LIST_REL_EL_EQN, listTheory.MEM_ZIP, listTheory.LIST_REL_trans, listTheory.LIST_EQ, listTheory.LIST_EQ_REWRITE, listTheory.EL_REVERSE, DB.fetch "rich_list" "EL_ELL", listTheory.splitAtPki_EQN, listTheory.EL_LENGTH_dropWhile_REVERSE], BasicProvers.Cases_on [HolKernel.QUOTE " (*#loc 1 13265*)n"] THENL
  [BasicProvers.SRW_TAC [] [listTheory.APPEND, listTheory.LENGTH, listTheory.EL_restricted, listTheory.EL, numeralTheory.numeral_distrib, arithmeticTheory.SUB_0, arithmeticTheory.SUB, listTheory.el_append3, listTheory.EL_APPEND_EQN, DB.fetch "rich_list" "EL_APPEND1", DB.fetch "rich_list" "EL_LENGTH_APPEND", listTheory.LLEX_EL_THM, listTheory.EL_ZIP, listTheory.LIST_REL_EL_EQN, listTheory.MEM_ZIP, listTheory.LIST_EQ],
  boolLib.REWRITE_TAC [listTheory.LENGTH, listTheory.LENGTH_SNOC, (DB.fetch "rich_list" "BUTLASTN")] THEN
  BasicProvers.SRW_TAC [] [listTheory.APPEND, listTheory.EL_restricted, listTheory.EL, listTheory.LENGTH, listTheory.LENGTH_SNOC, arithmeticTheory.SUB_LEFT_SUC, arithmeticTheory.SUB_MONO_EQ, arithmeticTheory.SUC_SUB1, arithmeticTheory.SUB, listTheory.el_append3, listTheory.EL_APPEND_EQN, DB.fetch "rich_list" "EL_APPEND1", DB.fetch "rich_list" "EL_LENGTH_APPEND", listTheory.LLEX_EL_THM, listTheory.EL_ZIP, listTheory.LIST_REL_EL_EQN]]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.01555

LUPDATE_APPEND2
proof length: 6
proof time: 0.009007
Statistics
  infstep : 90
  nodes   : 30
  maxdepth: 4
Time: 3.627713
  inferstep time: 2.674464
  node_find time: 0.045043
  node_crea time: 0.671029
    pred time: 0.25669
    thmpred time: 0.000028
    mc time: 0.282007
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 112540*)l1"] THENL [BasicProvers.SRW_TAC [] [listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", listTheory.LENGTH, listTheory.lupdate_append, listTheory.LUPDATE_compute, listTheory.EVERY2_LUPDATE_same, listTheory.LENGTH_LUPDATE, listTheory.LUPDATE_SEM, listTheory.EL_LUPDATE, listTheory.LUPDATE_SNOC, listTheory.MEM_LUPDATE, listTheory.LUPDATE_def, listTheory.LUPDATE_NIL, listTheory.LUPDATE_MAP, listTheory.MEM_LUPDATE_E, listTheory.IMP_EVERY_LUPDATE], BasicProvers.Cases_on [HolKernel.QUOTE " (*#loc 1 13265*)n"] THENL
  [BasicProvers.SRW_TAC [] [listTheory.APPEND, listTheory.LENGTH, listTheory.LUPDATE_compute, listTheory.LUPDATE_def, numeralTheory.numeral_distrib, arithmeticTheory.SUB_0, arithmeticTheory.SUB, listTheory.lupdate_append2, listTheory.LUPDATE_LENGTH, listTheory.lupdate_append, listTheory.IMP_EVERY_LUPDATE, listTheory.EVERY2_LUPDATE_same, listTheory.LENGTH_LUPDATE, listTheory.EL_LUPDATE, listTheory.LUPDATE_SNOC, listTheory.MEM_LUPDATE],
  boolLib.REWRITE_TAC [listTheory.LENGTH, (DB.fetch "rich_list" "SEG"), prim_recTheory.NOT_LESS_0, arithmeticTheory.NOT_SUC_LESS_EQ_0, arithmeticTheory.ADD, arithmeticTheory.ADD_0] THEN
  BasicProvers.SRW_TAC [] [listTheory.APPEND, listTheory.LUPDATE_def, listTheory.LENGTH, listTheory.LENGTH_SNOC, listTheory.lupdate_append2, listTheory.LUPDATE_LENGTH, listTheory.lupdate_append, listTheory.LUPDATE_compute, listTheory.IMP_EVERY_LUPDATE, listTheory.EVERY2_LUPDATE_same, listTheory.LENGTH_LUPDATE, listTheory.EL_LUPDATE, listTheory.LUPDATE_SNOC, listTheory.MEM_LUPDATE, listTheory.LUPDATE_SEM, listTheory.MEM_LUPDATE_E]]]
Org tac number: 10
Original proof time: 0.0
Replaying proof: 0.492329

LUPDATE_APPEND1
proof length: 1
proof time: 0.090125
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.151888
  inferstep time: 0.118209
  node_find time: 0.000348
  node_crea time: 0.015306
    pred time: 0.003817
    thmpred time: 0.0
    mc time: 0.017994
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.lupdate_append , DB.fetch "rich_list" "LUPDATE_APPEND2" , listTheory.LUPDATE_SEM , listTheory.EL_LUPDATE , listTheory.MEM_LUPDATE , listTheory.EVERY2_LUPDATE_same , listTheory.LENGTH_LUPDATE , listTheory.LUPDATE_SNOC , listTheory.LUPDATE_def , listTheory.LUPDATE_MAP , listTheory.LUPDATE_NIL , listTheory.MEM_LUPDATE_E , listTheory.IMP_EVERY_LUPDATE , listTheory.LUPDATE_compute , listTheory.lupdate_append2 , listTheory.LUPDATE_LENGTH])
Org tac number: 10
Original proof time: 0.0
Replaying proof: 0.535649

is_prefix_el
proof length: 1
proof time: 0.058172
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.103634
  inferstep time: 0.079085
  node_find time: 0.000315
  node_crea time: 0.01372
    pred time: 0.003395
    thmpred time: 0.0
    mc time: 0.011846
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "IS_PREFIX" , DB.fetch "rich_list" "IS_SUBLIST" , DB.fetch "rich_list" "IS_PREFIX_IS_SUBLIST" , DB.fetch "rich_list" "IS_PREFIX_APPEND" , DB.fetch "rich_list" "IS_SUFFIX_REVERSE" , listTheory.isPREFIX , listTheory.isPREFIX_THM , DB.fetch "rich_list" "IS_PREFIX_REVERSE" , DB.fetch "rich_list" "IS_PREFIX_PREFIX" , listTheory.EL_ZIP , listTheory.LIST_REL_EL_EQN , listTheory.LLEX_EL_THM , listTheory.MEM_ZIP , listTheory.LIST_REL_trans , DB.fetch "rich_list" "EL_APPEND1" , listTheory.EL_APPEND_EQN])
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.254396

EL_CONS
proof length: 3
proof time: 0.156986
Statistics
  infstep : 4
  nodes   : 4
  maxdepth: 2
Time: 0.506146
  inferstep time: 0.412603
  node_find time: 0.001664
  node_crea time: 0.057553
    pred time: 0.021203
    thmpred time: 0.0
    mc time: 0.043683
    inst time: 0.0
Proof found: let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  INDUCT_TAC
end THENL [metisTools.METIS_TAC [numeralTheory.numeral_distrib, listTheory.EL_restricted, prim_recTheory.PRE, listTheory.EL, listTheory.EL_simp_restricted, listTheory.EL_REVERSE, DB.fetch "rich_list" "EL_ELL", DB.fetch "rich_list" "ELL_EL", listTheory.EL_compute, DB.fetch "rich_list" "EL_PRE_LENGTH", listTheory.EL_simp, listTheory.LAST_EL, DB.fetch "rich_list" "ELL_SNOC", arithmeticTheory.INV_PRE_EQ, arithmeticTheory.INV_PRE_LESS, arithmeticTheory.INV_PRE_LESS_EQ], metisTools.METIS_TAC [listTheory.EL_restricted, arithmeticTheory.tactictoe_thm_11, prim_recTheory.PRE, prim_recTheory.LESS_0, listTheory.EL, listTheory.EL_simp_restricted, listTheory.EL_REVERSE, DB.fetch "rich_list" "EL_ELL", DB.fetch "rich_list" "ELL_EL", listTheory.EL_compute, listTheory.EL_simp, DB.fetch "rich_list" "EL_PRE_LENGTH", listTheory.LAST_EL, arithmeticTheory.PRE_SUC_EQ, numeralTheory.numeral_distrib, arithmeticTheory.SUC_PRE]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.032992

EL_SEG
Statistics
  infstep : 522
  nodes   : 95
  maxdepth: 5
Time: 10.016275
  inferstep time: 7.445348
  node_find time: 0.216276
  node_crea time: 1.556627
    pred time: 0.485775
    thmpred time: 0.000018
    mc time: 0.732959
    inst time: 0.0
Proof status: Time Out
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.232513

EL_MEM
proof length: 1
proof time: 0.079955
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.104369
  inferstep time: 0.075987
  node_find time: 0.000322
  node_crea time: 0.015678
    pred time: 0.003742
    thmpred time: 0.0
    mc time: 0.015327
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.MEM_EL , listTheory.MEM_LUPDATE , listTheory.MEM_ZIP , listTheory.MEM_DROP , listTheory.EL_MAP , listTheory.EL_SNOC , listTheory.EVERY_EL , listTheory.LUPDATE_SEM , DB.fetch "rich_list" "EL_ELL" , DB.fetch "rich_list" "EL_SEG" , listTheory.ALL_DISTINCT_EL_IMP , listTheory.EL_ALL_DISTINCT_EL_EQ , listTheory.ALL_DISTINCT_FILTER_EL_IMP , listTheory.splitAtPki_EQN , listTheory.EL_ZIP , listTheory.LIST_REL_EL_EQN])
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.138262

TL_SNOC
proof length: 4
proof time: 0.076174
Statistics
  infstep : 19
  nodes   : 9
  maxdepth: 3
Time: 0.609876
  inferstep time: 0.471549
  node_find time: 0.006183
  node_crea time: 0.086001
    pred time: 0.029945
    thmpred time: 0.0
    mc time: 0.046338
    inst time: 0.0
Proof found: boolLib.STRIP_TAC THEN Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL
  [metisTools.METIS_TAC [listTheory.SNOC, listTheory.NULL_DEF, listTheory.NULL, listTheory.list_case_compute, listTheory.CONS, listTheory.MAP_TL, listTheory.EL_compute, listTheory.TL, listTheory.EL, listTheory.LENGTH_TL, listTheory.EL_simp, listTheory.TL_GENLIST, DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "NOT_NULL_SNOC", listTheory.FRONT_CONS_EQ_NIL, listTheory.NULL_EQ],
  metisTools.METIS_TAC [listTheory.TL, listTheory.SNOC, listTheory.NULL_DEF, listTheory.NULL, listTheory.list_case_compute, listTheory.CONS, listTheory.MAP_TL, listTheory.EL_compute, listTheory.EL, listTheory.LENGTH_TL, listTheory.EL_simp, listTheory.TL_GENLIST, DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "NOT_NULL_SNOC", pred_setTheory.tactictoe_thm_33, listTheory.FRONT_CONS_EQ_NIL]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.060136

EL_REVERSE_ELL
proof length: 1
proof time: 0.047938
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.096752
  inferstep time: 0.075699
  node_find time: 0.000295
  node_crea time: 0.011297
    pred time: 0.003076
    thmpred time: 0.0
    mc time: 0.010998
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.EL_REVERSE , DB.fetch "rich_list" "ELL_EL" , DB.fetch "rich_list" "ELL_CONS" , DB.fetch "rich_list" "ELL_MAP" , DB.fetch "rich_list" "ELL_SEG" , DB.fetch "rich_list" "ELL_APPEND2" , DB.fetch "rich_list" "ELL_SUC_SNOC" , DB.fetch "rich_list" "ELL_APPEND1" , DB.fetch "rich_list" "ELL_SNOC" , DB.fetch "rich_list" "ELL" , DB.fetch "rich_list" "EL_ELL" , listTheory.EL_LENGTH_dropWhile_REVERSE , DB.fetch "rich_list" "ELL_PRE_LENGTH" , DB.fetch "rich_list" "ELL_LENGTH_CONS" , DB.fetch "rich_list" "ELL_LENGTH_SNOC" , DB.fetch "rich_list" "ELL_compute"])
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.104678

ELL_LENGTH_APPEND
proof length: 2
proof time: 0.002303
Statistics
  infstep : 10
  nodes   : 6
  maxdepth: 2
Time: 0.677461
  inferstep time: 0.573173
  node_find time: 0.003605
  node_crea time: 0.065685
    pred time: 0.028185
    thmpred time: 0.000004
    mc time: 0.033351
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "ELL_LENGTH_CONS", DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "EL_LENGTH_APPEND", listTheory.APPEND_FRONT_LAST, listTheory.LAST_EL, DB.fetch "rich_list" "EL_PRE_LENGTH", listTheory.last_drop, DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LASTN_1", listTheory.HD_REVERSE, listTheory.LAST_MAP, listTheory.LAST_DEF, listTheory.LAST_CONS_cond] THEN BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "ELL_LENGTH_CONS", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_LAST", DB.fetch "rich_list" "ELL_compute", listTheory.APPEND_FRONT_LAST, listTheory.LAST_EL, DB.fetch "rich_list" "EL_PRE_LENGTH", listTheory.last_drop, DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "LASTN_1", listTheory.HD_REVERSE, listTheory.LAST_DEF, listTheory.LAST_MAP, listTheory.LAST_CONS_cond, DB.fetch "rich_list" "ELL_APPEND1"]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.061178

ELL_MEM
proof length: 3
proof time: 0.003228
Statistics
  infstep : 13
  nodes   : 7
  maxdepth: 3
Time: 0.683602
  inferstep time: 0.554209
  node_find time: 0.00499
  node_crea time: 0.08851
    pred time: 0.028523
    thmpred time: 0.000002
    mc time: 0.046208
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL_EL", DB.fetch "rich_list" "ELL_MAP", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "EL_REVERSE_ELL", DB.fetch "rich_list" "ELL_APPEND2", DB.fetch "rich_list" "ELL_SUC_SNOC", DB.fetch "rich_list" "ELL_APPEND1", DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "EL_ELL", DB.fetch "rich_list" "ELL_PRE_LENGTH", DB.fetch "rich_list" "ELL_LENGTH_CONS", DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "ELL_LENGTH_APPEND", DB.fetch "rich_list" "ELL_compute"] THEN boolLib.MAP_EVERY boolLib.IMP_RES_TAC [numLib.DECIDE (Parse.Term [HolKernel.QUOTE " (*#loc 1 68167*)!n m. m < n ==> PRE (n - m) < n"]), (DB.fetch "rich_list" "ELL_CONS")] THEN
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "ELL_EL", listTheory.EL_REVERSE, DB.fetch "rich_list" "EL_ELL", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "SEG_APPEND", listTheory.LENGTH_TL, DB.fetch "rich_list" "EL_MEM", listTheory.MEM_EL, listTheory.IMAGE_EL_count_LENGTH, DB.fetch "rich_list" "ELL_PRE_LENGTH", numeralTheory.numeral_distrib, arithmeticTheory.PRE_SUB1, listTheory.MEM_LUPDATE, listTheory.MEM_ZIP, listTheory.MEM_DROP]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.148

ELL_REVERSE
proof length: 3
proof time: 0.113546
Statistics
  infstep : 85
  nodes   : 27
  maxdepth: 4
Time: 1.904791
  inferstep time: 1.344415
  node_find time: 0.029712
  node_crea time: 0.398667
    pred time: 0.090444
    thmpred time: 0.000009
    mc time: 0.195243
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "EL_ELL", DB.fetch "rich_list" "ELL_EL", DB.fetch "rich_list" "ELL_SEG", listTheory.EL_REVERSE, DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "LENGTH_BUTLASTN", listTheory.LENGTH_DROP, DB.fetch "rich_list" "EL_REVERSE_ELL", DB.fetch "rich_list" "ELL_CONS", DB.fetch "rich_list" "ELL_MAP", DB.fetch "rich_list" "ELL_MEM", DB.fetch "rich_list" "ELL_APPEND2", DB.fetch "rich_list" "ELL_SNOC"] THEN boolLib.MAP_EVERY boolLib.IMP_RES_TAC [numLib.DECIDE (Parse.Term [HolKernel.QUOTE " (*#loc 1 68167*)!n m. m < n ==> PRE (n - m) < n"]), (DB.fetch "rich_list" "ELL_CONS")] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "EL_ELL", DB.fetch "rich_list" "ELL_EL", listTheory.EL_REVERSE, DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "LENGTH_BUTLASTN", listTheory.LENGTH_DROP, DB.fetch "rich_list" "SEG_APPEND", listTheory.LENGTH_TL, DB.fetch "rich_list" "EL_REVERSE_ELL", DB.fetch "rich_list" "ELL_PRE_LENGTH", DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "ELL_APPEND1", DB.fetch "rich_list" "ELL_CONS"]
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.199742

ELL_REVERSE_EL
proof length: 1
proof time: 0.042634
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.088436
  inferstep time: 0.064687
  node_find time: 0.00039
  node_crea time: 0.015418
    pred time: 0.003265
    thmpred time: 0.0
    mc time: 0.012945
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "ELL_REVERSE" , DB.fetch "rich_list" "EL_REVERSE_ELL" , DB.fetch "rich_list" "ELL_EL" , DB.fetch "rich_list" "ELL_CONS" , DB.fetch "rich_list" "ELL_MAP" , DB.fetch "rich_list" "ELL_SEG" , DB.fetch "rich_list" "ELL_MEM" , DB.fetch "rich_list" "ELL_APPEND2" , DB.fetch "rich_list" "ELL_APPEND1" , DB.fetch "rich_list" "ELL_SNOC" , DB.fetch "rich_list" "ELL" , DB.fetch "rich_list" "ELL_SUC_SNOC" , DB.fetch "rich_list" "EL_ELL" , listTheory.EL_LENGTH_dropWhile_REVERSE , listTheory.EL_REVERSE , listTheory.EL_SNOC])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.064987

TAKE_BUTLASTN
proof length: 5
proof time: 0.071901
Statistics
  infstep : 46
  nodes   : 14
  maxdepth: 3
Time: 1.734832
  inferstep time: 1.384242
  node_find time: 0.015827
  node_crea time: 0.223103
    pred time: 0.091872
    thmpred time: 0.000005
    mc time: 0.11316
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [BasicProvers.SRW_TAC [] [listTheory.LENGTH, listTheory.TAKE_def, listTheory.TAKE_nil, DB.fetch "rich_list" "TAKE_APPEND2", listTheory.LENGTH_TAKE, DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "TAKE_SNOC", listTheory.LLEX_EL_THM, listTheory.TAKE_APPEND1, DB.fetch "rich_list" "TAKE_APPEND1", listTheory.LENGTH_TAKE_EQ, DB.fetch "rich_list" "EVERY_TAKE", DB.fetch "rich_list" "EXISTS_TAKE", DB.fetch "rich_list" "MEM_TAKE", listTheory.TAKE_APPEND2, DB.fetch "rich_list" "TAKE_APPEND"] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", DB.fetch "rich_list" "BUTLASTN_LENGTH_CONS", DB.fetch "rich_list" "BUTLASTN_1", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_CONS", DB.fetch "rich_list" "BUTLASTN_MAP", DB.fetch "rich_list" "BUTLASTN_APPEND2", DB.fetch "rich_list" "BUTLASTN_APPEND1", DB.fetch "rich_list" "BUTLASTN_BUTLASTN", DB.fetch "rich_list" "LASTN_BUTLASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_DROP"], BasicProvers.SRW_TAC [numSimps.ARITH_ss] [(DB.fetch "list" "DROP_def")] THEN
  BasicProvers.SRW_TAC [numSimps.ARITH_ss] [listTheory.LENGTH, listTheory.LENGTH_SNOC, DB.fetch "rich_list" "LENGTH_SCANL", DB.fetch "rich_list" "LENGTH_SCANR", listTheory.tactictoe_thm_14, DB.fetch "rich_list" "EVERY_SEG", DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "SEG_LENGTH_SNOC", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "SEG_APPEND2", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN"]]
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.268278

BUTLASTN_TAKE
proof length: 6
proof time: 0.013018
Statistics
  infstep : 56
  nodes   : 17
  maxdepth: 4
Time: 1.821721
  inferstep time: 1.320518
  node_find time: 0.024183
  node_crea time: 0.316953
    pred time: 0.12127
    thmpred time: 0.000001
    mc time: 0.169919
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "TAKE_BUTLASTN", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_CONS", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_MAP", DB.fetch "rich_list" "EVERY_BUTLASTN", DB.fetch "rich_list" "EXISTS_BUTLASTN", DB.fetch "rich_list" "MEM_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_APPEND2", DB.fetch "rich_list" "SEG_APPEND", listTheory.EL_REVERSE, DB.fetch "rich_list" "ELL_EL"] THEN BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL
  [boolLib.REWRITE_TAC [listTheory.LENGTH, DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "SEG_APPEND2", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "SEG_0_SNOC", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "SEG_LENGTH_SNOC", DB.fetch "rich_list" "SEG_SNOC", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN", DB.fetch "rich_list" "LENGTH_SEG", DB.fetch "rich_list" "SEG_APPEND1", DB.fetch "rich_list" "MEM_SEG", DB.fetch "rich_list" "SEG_SEG"] THEN
  boolLib.REWRITE_TAC [numeralTheory.numeral_distrib, arithmeticTheory.SUB, arithmeticTheory.SUB_0, arithmeticTheory.SUB_LEFT_LESS_EQ, arithmeticTheory.SUB_LEFT_EQ, arithmeticTheory.SUB_RIGHT_EQ, arithmeticTheory.LESS_EQ_0, arithmeticTheory.LE, arithmeticTheory.tactictoe_thm_6, DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "SEG_APPEND2", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "SEG_0_SNOC"],
  BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THEN
  BasicProvers.SRW_TAC [numSimps.ARITH_ss] [listTheory.LENGTH, listTheory.LENGTH_SNOC, DB.fetch "rich_list" "LENGTH_SCANL", DB.fetch "rich_list" "LENGTH_SCANR", listTheory.tactictoe_thm_14, DB.fetch "rich_list" "EVERY_SEG", DB.fetch "rich_list" "SEG", DB.fetch "rich_list" "SEG_SUC_CONS", DB.fetch "rich_list" "SEG_LENGTH_SNOC", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "SEG_APPEND2", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "SEG_TAKE_BUTFISTN"]]
Org tac number: 10
Original proof time: 0.0
Replaying proof: 0.307384

LASTN_DROP
proof length: 2
proof time: 0.006715
Statistics
  infstep : 171
  nodes   : 52
  maxdepth: 5
Time: 5.672999
  inferstep time: 4.255222
  node_find time: 0.069669
  node_crea time: 1.012908
    pred time: 0.319959
    thmpred time: 0.000018
    mc time: 0.48226
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LASTN_MAP", DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "EVERY_LASTN", DB.fetch "rich_list" "EXISTS_LASTN", DB.fetch "rich_list" "MEM_LASTN", DB.fetch "rich_list" "LASTN_APPEND2", listTheory.LENGTH_DROP, DB.fetch "rich_list" "BUTLASTN_SEG"] THEN BasicProvers.SRW_TAC [numSimps.ARITH_ss] [(DB.fetch "list" "DROP_def")]
Org tac number: 10
Original proof time: 0.0
Replaying proof: 0.249019

DROP_LASTN
proof length: 2
proof time: 0.013816
Statistics
  infstep : 157
  nodes   : 70
  maxdepth: 5
Time: 7.511999
  inferstep time: 5.646682
  node_find time: 0.071305
  node_crea time: 1.373469
    pred time: 0.451504
    thmpred time: 0.000021
    mc time: 0.612761
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "LASTN_DROP", listTheory.LENGTH_DROP, DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "BUTLASTN_TAKE", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "TAKE_BUTLASTN", DB.fetch "rich_list" "SEG_APPEND", listTheory.EL_REVERSE, DB.fetch "rich_list" "ELL_EL", DB.fetch "rich_list" "ELL_REVERSE", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "EL_ELL", DB.fetch "rich_list" "DROP_SNOC", DB.fetch "rich_list" "EVERY_DROP"] THEN BasicProvers.SRW_TAC [numSimps.ARITH_ss] [DB.fetch "rich_list" "DROP_SEG", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "ELL_SEG", DB.fetch "rich_list" "LASTN_DROP", listTheory.LENGTH_DROP, DB.fetch "rich_list" "BUTLASTN_TAKE", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "TAKE_BUTLASTN", listTheory.EL_REVERSE, DB.fetch "rich_list" "ELL_EL", DB.fetch "rich_list" "ELL_REVERSE", DB.fetch "rich_list" "EL_ELL", listTheory.LENGTH_TL, DB.fetch "rich_list" "SEG_APPEND2"]
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.249681
Replaying proof: 0.000133

DROP_REVERSE
proof length: 1
proof time: 0.007962
Statistics
  infstep : 5
  nodes   : 2
  maxdepth: 1
Time: 0.2136
  inferstep time: 0.152639
  node_find time: 0.002505
  node_crea time: 0.043882
    pred time: 0.003399
    thmpred time: 0.000001
    mc time: 0.013808
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "rich_list" "BUTLASTN_def" , DB.fetch "rich_list" "APPEND_BUTLASTN_DROP" , DB.fetch "rich_list" "BUTLASTN_CONS" , DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN" , DB.fetch "rich_list" "BUTLASTN_LASTN" , DB.fetch "rich_list" "BUTLASTN_MAP" , DB.fetch "rich_list" "BUTLASTN_SEG" , DB.fetch "rich_list" "BUTLASTN_TAKE" , DB.fetch "rich_list" "LENGTH_BUTLASTN" , DB.fetch "rich_list" "EVERY_BUTLASTN" , DB.fetch "rich_list" "EXISTS_BUTLASTN" , DB.fetch "rich_list" "MEM_BUTLASTN" , DB.fetch "rich_list" "BUTLASTN_APPEND2" , DB.fetch "rich_list" "BUTLASTN_BUTLASTN" , DB.fetch "rich_list" "LASTN_BUTLASTN" , DB.fetch "rich_list" "BUTLASTN_FRONT" ])
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.058871

BUTLASTN_REVERSE
proof length: 5
proof time: 0.069799
Statistics
  infstep : 12
  nodes   : 8
  maxdepth: 2
Time: 0.728471
  inferstep time: 0.528134
  node_find time: 0.005173
  node_crea time: 0.131177
    pred time: 0.057615
    thmpred time: 0.000005
    mc time: 0.075367
    inst time: 0.0
Proof found: boolLib.REPEAT BasicProvers.Induct THENL [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "BUTLASTN", listTheory.LENGTH, listTheory.REVERSE_DEF, listTheory.REVERSE_SNOC_DEF, numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, listTheory.DROP_compute, DB.fetch "rich_list" "DROP", listTheory.DROP_0, DB.fetch "rich_list" "DROP_REVERSE", DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "APPEND_BUTLASTN_DROP", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "BUTLASTN_LENGTH_NIL", DB.fetch "rich_list" "BUTLASTN_LENGTH_CONS", DB.fetch "rich_list" "BUTLASTN_SEG"], BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "BUTLASTN", listTheory.LENGTH, listTheory.REVERSE_DEF, listTheory.REVERSE_SNOC_DEF, numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, listTheory.DROP_compute, DB.fetch "rich_list" "DROP", listTheory.DROP_0, DB.fetch "rich_list" "DROP_REVERSE", DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "APPEND_BUTLASTN_DROP", DB.fetch "rich_list" "BUTLASTN_CONS", DB.fetch "rich_list" "BUTLASTN_LENGTH_CONS", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN"], metisTools.METIS_TAC [listTheory.LENGTH, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "BUTLASTN", listTheory.MEM_DROP, DB.fetch "rich_list" "DROP", listTheory.REVERSE_DEF, listTheory.REVERSE_SNOC_DEF, DB.fetch "rich_list" "DROP_REVERSE", DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "APPEND_BUTLASTN_DROP", arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.NOT_LEQ, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_GREATER_EQ, arithmeticTheory.NOT_SUC_LESS_EQ_0], metisTools.METIS_TAC [DB.fetch "rich_list" "DROP", listTheory.LENGTH, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "BUTLASTN", listTheory.REVERSE_DEF, listTheory.MEM_DROP, listTheory.REVERSE_SNOC_DEF, DB.fetch "rich_list" "DROP_REVERSE", DB.fetch "rich_list" "BUTLASTN_def", DB.fetch "rich_list" "APPEND_BUTLASTN_DROP", arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.NOT_LEQ, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_GREATER_EQ, arithmeticTheory.NOT_SUC_LESS_EQ_0]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.065385

LASTN_REVERSE
proof length: 1
proof time: 0.001654
Statistics
  infstep : 13
  nodes   : 9
  maxdepth: 3
Time: 0.845425
  inferstep time: 0.697185
  node_find time: 0.004215
  node_crea time: 0.099817
    pred time: 0.038679
    thmpred time: 0.000006
    mc time: 0.050752
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "rich_list" "APPEND_TAKE_LASTN" , DB.fetch "rich_list" "LASTN_def" , DB.fetch "rich_list" "TAKE_SNOC" , listTheory.LENGTH_TAKE , DB.fetch "rich_list" "TAKE_BUTLASTN" , DB.fetch "rich_list" "TAKE_SEG" , DB.fetch "rich_list" "EVERY_TAKE" , DB.fetch "rich_list" "EXISTS_TAKE" , DB.fetch "rich_list" "MEM_TAKE" , listTheory.LLEX_EL_THM , listTheory.TAKE_APPEND1 , DB.fetch "rich_list" "TAKE_APPEND1" , listTheory.LENGTH_TAKE_EQ , DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN" , DB.fetch "rich_list" "BUTLASTN_LASTN" , DB.fetch "rich_list" "BUTLASTN_LASTN_NIL" ])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.052752

TAKE_REVERSE
proof length: 1
proof time: 0.002388
Statistics
  infstep : 3
  nodes   : 2
  maxdepth: 1
Time: 0.185955
  inferstep time: 0.156881
  node_find time: 0.001237
  node_crea time: 0.013112
    pred time: 0.003789
    thmpred time: 0.0
    mc time: 0.011329
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "rich_list" "LASTN_def" , DB.fetch "rich_list" "APPEND_TAKE_LASTN" , DB.fetch "rich_list" "LASTN_REVERSE" , DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN" , DB.fetch "rich_list" "BUTLASTN_LASTN" , DB.fetch "rich_list" "BUTLASTN_LASTN_NIL" , DB.fetch "rich_list" "LENGTH_LASTN" , DB.fetch "rich_list" "LASTN_CONS" , DB.fetch "rich_list" "LASTN_DROP" , DB.fetch "rich_list" "LASTN_LASTN" , DB.fetch "rich_list" "LASTN_MAP" , DB.fetch "rich_list" "LASTN_SEG" , DB.fetch "rich_list" "LAST_LASTN_LAST" , DB.fetch "rich_list" "EVERY_LASTN" , DB.fetch "rich_list" "EXISTS_LASTN" , DB.fetch "rich_list" "MEM_LASTN" ])
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.091549
Replaying proof: 0.000353

LENGTH_REPLICATE
proof length: 3
proof time: 0.134939
Statistics
  infstep : 35
  nodes   : 16
  maxdepth: 3
Time: 1.287937
  inferstep time: 0.98702
  node_find time: 0.012396
  node_crea time: 0.202012
    pred time: 0.074166
    thmpred time: 0.000005
    mc time: 0.110476
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "REPLICATE", DB.fetch "rich_list" "REPLICATE_compute", DB.fetch "rich_list" "SEG_0_SNOC", listTheory.NOT_NIL_EQ_LENGTH_NOT_0, listTheory.LENGTH, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_NIL, listTheory.LENGTH_EQ_NUM_compute, DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "SEG_LENGTH_ID", DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "TAKE_SEG", listTheory.LENGTH_EQ_NIL, listTheory.LENGTH_LEN, listTheory.LENGTH_TL], metisTools.METIS_TAC [DB.fetch "rich_list" "REPLICATE", DB.fetch "rich_list" "REPLICATE_compute", listTheory.LENGTH_EQ_CONS, listTheory.MEM_DROP, listTheory.LENGTH_CONS, listTheory.LENGTH_EQ_NUM, DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "LENGTH_FOLDL", DB.fetch "rich_list" "LENGTH_FOLDR", listTheory.LUPDATE_def, DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "DROP", DB.fetch "rich_list" "ELL_SUC_SNOC", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "TAKE", DB.fetch "rich_list" "SEG_SUC_CONS"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.033753

MEM_REPLICATE
proof length: 4
proof time: 0.004717
Statistics
  infstep : 124
  nodes   : 38
  maxdepth: 5
Time: 3.99309
  inferstep time: 3.074987
  node_find time: 0.046652
  node_crea time: 0.638564
    pred time: 0.178266
    thmpred time: 0.00001
    mc time: 0.345033
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "REPLICATE", DB.fetch "rich_list" "REPLICATE_compute", DB.fetch "rich_list" "LENGTH_REPLICATE", listTheory.MEM_DROP, listTheory.MEM_EL, listTheory.MEM_LUPDATE, listTheory.MEM_GENLIST, listTheory.MEM_ZIP, listTheory.SUM_eq_0, DB.fetch "rich_list" "MEM_SEG", listTheory.MEM_LUPDATE_E, listTheory.SUM_MAP_MEM_bound, listTheory.list_size_cong, DB.fetch "rich_list" "MEM_BUTLASTN", DB.fetch "rich_list" "MEM_DROP", DB.fetch "rich_list" "MEM_DROP_IMP"], boolLib.POP_ASSUM boolLib.MP_TAC THEN
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "REPLICATE", DB.fetch "rich_list" "LENGTH_REPLICATE", prim_recTheory.LESS_0, DB.fetch "rich_list" "REPLICATE_compute", arithmeticTheory.SUC_MOD, arithmeticTheory.MULT_INCREASES, arithmeticTheory.PRE_SUC_EQ, arithmeticTheory.SUC_ELIM_THM, arithmeticTheory.tactictoe_thm_54, arithmeticTheory.DIV_EQ_X, arithmeticTheory.MOD_SUC, arithmeticTheory.MOD_SUC_IFF, listTheory.MEM_DROP, arithmeticTheory.SUC_PRE, DB.fetch "rich_list" "ELL_SNOC", DB.fetch "rich_list" "EL_CONS"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.032231

EVERY_REPLICATE
Statistics
  infstep : 684
  nodes   : 80
  maxdepth: 5
Time: 10.040787
  inferstep time: 7.632165
  node_find time: 0.318543
  node_crea time: 1.080363
    pred time: 0.341554
    thmpred time: 0.000028
    mc time: 0.385893
    inst time: 0.0
Proof status: Time Out
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.055889

IS_PREFIX_NIL
proof length: 2
proof time: 0.002336
Statistics
  infstep : 5
  nodes   : 3
  maxdepth: 2
Time: 0.289346
  inferstep time: 0.250548
  node_find time: 0.001881
  node_crea time: 0.024864
    pred time: 0.00943
    thmpred time: 0.0
    mc time: 0.010248
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [] THEN BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "IS_PREFIX", DB.fetch "rich_list" "IS_SUBLIST", listTheory.isPREFIX_THM, listTheory.isPREFIX, DB.fetch "rich_list" "is_prefix_el", DB.fetch "rich_list" "IS_PREFIX_APPEND", DB.fetch "rich_list" "IS_SUFFIX_REVERSE", DB.fetch "rich_list" "IS_PREFIX_IS_SUBLIST", DB.fetch "rich_list" "IS_PREFIX_REVERSE", DB.fetch "rich_list" "IS_PREFIX_PREFIX", listTheory.REVERSE_SNOC_DEF, DB.fetch "rich_list" "tactictoe_thm_4", DB.fetch "rich_list" "PREFIX", listTheory.DROP_def, listTheory.EVERY2_THM, listTheory.LIST_REL_NIL]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.117946

IS_PREFIX_REFL
proof length: 3
proof time: 0.075955
Statistics
  infstep : 17
  nodes   : 6
  maxdepth: 2
Time: 0.582153
  inferstep time: 0.50065
  node_find time: 0.005553
  node_crea time: 0.044289
    pred time: 0.014782
    thmpred time: 0.000001
    mc time: 0.022801
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "IS_PREFIX", listTheory.isPREFIX_THM, listTheory.isPREFIX, DB.fetch "rich_list" "IS_PREFIX_NIL", DB.fetch "rich_list" "IS_SUBLIST", DB.fetch "rich_list" "IS_PREFIX_APPEND", DB.fetch "rich_list" "IS_PREFIX_IS_SUBLIST", DB.fetch "rich_list" "IS_SUFFIX_REVERSE", DB.fetch "rich_list" "IS_PREFIX_REVERSE", DB.fetch "rich_list" "is_prefix_el", DB.fetch "rich_list" "IS_PREFIX_PREFIX", listTheory.list_Axiom, listTheory.NULL_DEF, listTheory.list_induction, listTheory.APPEND, listTheory.NOT_CONS_NIL], metisTools.METIS_TAC [listTheory.isPREFIX_THM, DB.fetch "rich_list" "IS_PREFIX", listTheory.isPREFIX, DB.fetch "rich_list" "IS_SUBLIST", DB.fetch "rich_list" "IS_PREFIX_NIL", DB.fetch "rich_list" "IS_PREFIX_APPEND", DB.fetch "rich_list" "IS_PREFIX_IS_SUBLIST", DB.fetch "rich_list" "IS_SUFFIX_REVERSE", DB.fetch "rich_list" "IS_PREFIX_REVERSE", DB.fetch "rich_list" "is_prefix_el", DB.fetch "rich_list" "IS_PREFIX_PREFIX", listTheory.MEM, listTheory.LIST_TO_SET_DEF, listTheory.LRC_def, listTheory.list_Axiom_old, listTheory.LRC_MEM_right]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.030235

IS_PREFIX_ANTISYM
proof length: 2
proof time: 0.002811
Statistics
  infstep : 435
  nodes   : 63
  maxdepth: 5
Time: 7.485116
  inferstep time: 5.781484
  node_find time: 0.180235
  node_crea time: 0.85487
    pred time: 0.258034
    thmpred time: 0.000023
    mc time: 0.335449
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "IS_PREFIX", DB.fetch "rich_list" "IS_SUBLIST", DB.fetch "rich_list" "is_prefix_el", listTheory.isPREFIX, listTheory.isPREFIX_THM, DB.fetch "rich_list" "IS_PREFIX_REFL", DB.fetch "rich_list" "IS_PREFIX_IS_SUBLIST", DB.fetch "rich_list" "IS_PREFIX_APPEND", DB.fetch "rich_list" "IS_SUFFIX_REVERSE", DB.fetch "rich_list" "IS_PREFIX_NIL", DB.fetch "rich_list" "IS_PREFIX_REVERSE", DB.fetch "rich_list" "IS_PREFIX_PREFIX", listTheory.ALL_DISTINCT_MAP_INJ, listTheory.EVERY2_cong, listTheory.MAP2_CONG, listTheory.SUM_MAP_PLUS_ZIP] THEN simpLib.FULL_SIMP_TAC (BasicProvers.srw_ss ()) []
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.22415

IS_PREFIX_TRANS
proof length: 3
proof time: 0.003361
Statistics
  infstep : 63
  nodes   : 20
  maxdepth: 4
Time: 2.062205
  inferstep time: 1.669214
  node_find time: 0.027182
  node_crea time: 0.234538
    pred time: 0.060247
    thmpred time: 0.000008
    mc time: 0.109195
    inst time: 0.0
Proof found: boolLib.ONCE_ASM_REWRITE_TAC [(DB.fetch "rich_list" "IS_PREFIX_APPEND")] THEN BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "IS_PREFIX_APPEND", DB.fetch "rich_list" "IS_SUFFIX_APPEND", listTheory.APPEND, listTheory.APPEND_SNOC, DB.fetch "rich_list" "APPEND_NIL", listTheory.LUPDATE_LENGTH, DB.fetch "rich_list" "tactictoe_thm_4", listTheory.mem_exists_set, listTheory.LRC_MEM, listTheory.LRC_MEM_right, listTheory.LRC_def, relationTheory.TC_implies_one_step, relationTheory.WCR_def, relationTheory.diamond_def, relationTheory.rcdiamond_def, arithmeticTheory.NRC_ADD_E] THEN
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "MEM_FOLDL", DB.fetch "rich_list" "EXISTS_FOLDL", DB.fetch "rich_list" "MEM_FOLDR", DB.fetch "rich_list" "EXISTS_FOLDR", DB.fetch "rich_list" "IS_PREFIX_APPEND", DB.fetch "rich_list" "IS_SUFFIX_APPEND", listTheory.APPEND, listTheory.APPEND_SNOC, DB.fetch "rich_list" "APPEND_NIL", DB.fetch "rich_list" "tactictoe_thm_4", listTheory.LUPDATE_LENGTH, listTheory.mem_exists_set, listTheory.LRC_def, listTheory.LRC_MEM, listTheory.LRC_MEM_right, arithmeticTheory.NRC]
Org tac number: 11
Original proof time: 0.0
Replaying proof: 0.329514

IS_PREFIX_BUTLAST
proof length: 4
proof time: 0.070954
Statistics
  infstep : 233
  nodes   : 37
  maxdepth: 4
Time: 3.238658
  inferstep time: 2.328623
  node_find time: 0.10207
  node_crea time: 0.459246
    pred time: 0.143995
    thmpred time: 0.000009
    mc time: 0.174
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [listTheory.FRONT_CONS, listTheory.FRONT_CONS_EQ_NIL, listTheory.LENGTH_FRONT_CONS, listTheory.FRONT_DEF, listTheory.APPEND_FRONT_LAST, listTheory.FRONT_SNOC, DB.fetch "rich_list" "BUTLASTN_1", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "LENGTH_FRONT", DB.fetch "rich_list" "IS_PREFIX", DB.fetch "rich_list" "IS_SUBLIST", listTheory.isPREFIX, listTheory.isPREFIX_THM] THEN boolLib.POP_ASSUM boolLib.MP_TAC THEN
  boolLib.ONCE_ASM_REWRITE_TAC [(DB.fetch "rich_list" "IS_PREFIX_APPEND")] THEN
  metisTools.METIS_TAC [listTheory.APPEND_FRONT_LAST, DB.fetch "rich_list" "BUTLASTN_1", DB.fetch "rich_list" "LENGTH_FRONT", listTheory.FRONT_DEF, DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.FRONT_CONS, listTheory.FRONT_CONS_EQ_NIL, listTheory.FRONT_SNOC, listTheory.LENGTH_FRONT_CONS, listTheory.MEM_SPLIT_APPEND_first, listTheory.MEM_SPLIT_APPEND_last, listTheory.FILTER_EQ_CONS, listTheory.LENGTH_EQ_NUM]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.127465

IS_PREFIX_LENGTH
proof length: 3
proof time: 0.003394
Statistics
  infstep : 133
  nodes   : 38
  maxdepth: 5
Time: 3.697974
  inferstep time: 2.79772
  node_find time: 0.05488
  node_crea time: 0.579745
    pred time: 0.196338
    thmpred time: 0.000012
    mc time: 0.246302
    inst time: 0.0
Proof found: boolLib.ONCE_ASM_REWRITE_TAC [DB.fetch "rich_list" "is_prefix_el", DB.fetch "rich_list" "IS_PREFIX_ANTISYM", DB.fetch "rich_list" "IS_PREFIX_TRANS", DB.fetch "rich_list" "IS_PREFIX", DB.fetch "rich_list" "IS_PREFIX_REFL", DB.fetch "rich_list" "IS_SUBLIST", DB.fetch "rich_list" "IS_PREFIX_IS_SUBLIST", listTheory.isPREFIX, DB.fetch "rich_list" "IS_PREFIX_APPEND", DB.fetch "rich_list" "IS_SUFFIX_REVERSE", listTheory.isPREFIX_THM, DB.fetch "rich_list" "IS_PREFIX_NIL", DB.fetch "rich_list" "LUPDATE_APPEND2", DB.fetch "rich_list" "EL_APPEND2", listTheory.DROP_LENGTH_TOO_LONG, listTheory.TAKE_LENGTH_TOO_LONG] THEN BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LUPDATE_APPEND2", DB.fetch "rich_list" "EL_APPEND2", DB.fetch "rich_list" "BUTLASTN_APPEND1", DB.fetch "rich_list" "DROP_APPEND2", DB.fetch "rich_list" "ELL_APPEND1", DB.fetch "rich_list" "LASTN_APPEND1", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "SEG_APPEND2", DB.fetch "rich_list" "TAKE_APPEND2", listTheory.DROP_LENGTH_TOO_LONG, listTheory.TAKE_LENGTH_TOO_LONG, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_SUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.TAKE_APPEND1, DB.fetch "rich_list" "BUTLASTN_APPEND2"] THEN
  BasicProvers.SRW_TAC [] [listTheory.LENGTH_APPEND, DB.fetch "rich_list" "LUPDATE_APPEND2", DB.fetch "rich_list" "EL_APPEND2", DB.fetch "rich_list" "BUTLASTN_APPEND1", DB.fetch "rich_list" "DROP_APPEND2", DB.fetch "rich_list" "ELL_APPEND1", DB.fetch "rich_list" "LASTN_APPEND1", DB.fetch "rich_list" "SEG_APPEND", DB.fetch "rich_list" "SEG_APPEND2", DB.fetch "rich_list" "TAKE_APPEND2", listTheory.DROP_LENGTH_TOO_LONG, listTheory.TAKE_LENGTH_TOO_LONG, listTheory.TAKE_APPEND1, DB.fetch "rich_list" "BUTLASTN_APPEND2", DB.fetch "rich_list" "DROP_APPEND1", DB.fetch "rich_list" "LASTN_APPEND2"]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.149004

IS_PREFIX_LENGTH_ANTI
Statistics
  infstep : 424
  nodes   : 114
  maxdepth: 6
Time: 10.082067
  inferstep time: 6.987759
  node_find time: 0.213273
  node_crea time: 2.13435
    pred time: 0.584693
    thmpred time: 0.000029
    mc time: 0.954876
    inst time: 0.0
Proof status: Time Out
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.277168

IS_PREFIX_SNOC
Statistics
  infstep : 494
  nodes   : 160
  maxdepth: 6
Time: 10.01025
  inferstep time: 7.564722
  node_find time: 0.193617
  node_crea time: 1.671735
    pred time: 0.484456
    thmpred time: 0.000017
    mc time: 0.601024
    inst time: 0.0
Proof status: Time Out
Org tac number: 15
Original proof time: 0.0
Replaying proof: 0.383888

IS_PREFIX_APPEND1
proof length: 1
proof time: 0.040873
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.084446
  inferstep time: 0.068502
  node_find time: 0.000362
  node_crea time: 0.010004
    pred time: 0.002745
    thmpred time: 0.0
    mc time: 0.005213
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "IS_PREFIX_APPEND" , DB.fetch "rich_list" "IS_PREFIX_ANTISYM" , DB.fetch "rich_list" "IS_PREFIX_IS_SUBLIST" , DB.fetch "rich_list" "IS_PREFIX_LENGTH" , DB.fetch "rich_list" "IS_PREFIX_TRANS" , DB.fetch "rich_list" "is_prefix_el" , DB.fetch "rich_list" "IS_PREFIX" , DB.fetch "rich_list" "IS_SUBLIST" , listTheory.isPREFIX , DB.fetch "rich_list" "IS_PREFIX_LENGTH_ANTI" , DB.fetch "rich_list" "IS_PREFIX_REFL" , DB.fetch "rich_list" "IS_PREFIX_SNOC" , DB.fetch "rich_list" "IS_SUFFIX_REVERSE" , listTheory.isPREFIX_THM , DB.fetch "rich_list" "IS_PREFIX_NIL" , DB.fetch "rich_list" "IS_PREFIX_REVERSE"])
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.168236

IS_PREFIX_APPEND2
Statistics
  infstep : 374
  nodes   : 120
  maxdepth: 6
Time: 10.021735
  inferstep time: 8.182479
  node_find time: 0.143129
  node_crea time: 1.208189
    pred time: 0.338952
    thmpred time: 0.000019
    mc time: 0.427665
    inst time: 0.0
Proof status: Time Out
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.240383

IS_PREFIX_APPENDS
proof length: 3
proof time: 0.148654
Statistics
  infstep : 4
  nodes   : 4
  maxdepth: 2
Time: 0.287935
  inferstep time: 0.240201
  node_find time: 0.001462
  node_crea time: 0.027173
    pred time: 0.008658
    thmpred time: 0.0
    mc time: 0.017711
    inst time: 0.0
Proof found: boolLib.INDUCT_THEN (DB.fetch "rich_list" "tactictoe_thm_29") boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", DB.fetch "rich_list" "IS_PREFIX_APPEND1", DB.fetch "rich_list" "IS_PREFIX_APPEND2", DB.fetch "rich_list" "IS_PREFIX_APPEND", DB.fetch "rich_list" "IS_PREFIX", listTheory.isPREFIX, DB.fetch "rich_list" "IS_SUBLIST", listTheory.isPREFIX_THM, DB.fetch "rich_list" "IS_PREFIX_ANTISYM", DB.fetch "rich_list" "IS_PREFIX_LENGTH_ANTI", DB.fetch "rich_list" "IS_PREFIX_SNOC", DB.fetch "rich_list" "IS_SUFFIX_REVERSE", DB.fetch "rich_list" "is_prefix_el", DB.fetch "rich_list" "IS_PREFIX_REFL", DB.fetch "rich_list" "IS_PREFIX_IS_SUBLIST"], metisTools.METIS_TAC [listTheory.APPEND, DB.fetch "rich_list" "IS_PREFIX_APPEND1", DB.fetch "rich_list" "IS_PREFIX_APPEND2", DB.fetch "rich_list" "IS_PREFIX", DB.fetch "rich_list" "IS_SUBLIST", listTheory.isPREFIX, listTheory.isPREFIX_THM, DB.fetch "rich_list" "IS_PREFIX_APPEND", DB.fetch "rich_list" "IS_PREFIX_ANTISYM", DB.fetch "rich_list" "IS_PREFIX_LENGTH_ANTI", DB.fetch "rich_list" "IS_PREFIX_SNOC", DB.fetch "rich_list" "IS_PREFIX_REFL", DB.fetch "rich_list" "IS_PREFIX_LENGTH", DB.fetch "rich_list" "IS_PREFIX_TRANS", DB.fetch "rich_list" "IS_SUFFIX_REVERSE", DB.fetch "rich_list" "is_prefix_el"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.035707

prefixes_is_prefix_total
proof length: 1
proof time: 0.102422
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.128761
  inferstep time: 0.107004
  node_find time: 0.000414
  node_crea time: 0.012738
    pred time: 0.003442
    thmpred time: 0.0
    mc time: 0.008625
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "IS_SUBLIST" , DB.fetch "rich_list" "IS_PREFIX" , DB.fetch "rich_list" "IS_PREFIX_APPEND" , DB.fetch "rich_list" "is_prefix_el" , DB.fetch "rich_list" "IS_PREFIX_IS_SUBLIST" , DB.fetch "rich_list" "IS_SUFFIX_REVERSE" , DB.fetch "rich_list" "IS_PREFIX_APPEND2" , DB.fetch "rich_list" "IS_PREFIX_SNOC" , listTheory.isPREFIX , listTheory.isPREFIX_THM , DB.fetch "rich_list" "IS_PREFIX_ANTISYM" , DB.fetch "rich_list" "IS_PREFIX_TRANS" , DB.fetch "rich_list" "IS_PREFIX_LENGTH_ANTI" , DB.fetch "rich_list" "IS_PREFIX_APPEND1" , DB.fetch "rich_list" "IS_PREFIX_LENGTH" , DB.fetch "rich_list" "IS_PREFIX_REFL"])
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.182848

COUNT_LIST_GENLIST
Statistics
  infstep : 962
  nodes   : 166
  maxdepth: 6
Time: 10.018205
  inferstep time: 6.69207
  node_find time: 0.419433
  node_crea time: 1.65018
    pred time: 0.395298
    thmpred time: 0.000024
    mc time: 0.691687
    inst time: 0.0
Proof status: Time Out
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.069577

LENGTH_COUNT_LIST
proof length: 1
proof time: 0.035664
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.06604
  inferstep time: 0.048908
  node_find time: 0.000406
  node_crea time: 0.011075
    pred time: 0.003582
    thmpred time: 0.000001
    mc time: 0.005289
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "COUNT_LIST_GENLIST" , DB.fetch "rich_list" "COUNT_LIST_def" , listTheory.DROP_LENGTH_TOO_LONG , listTheory.DROP_NIL , listTheory.EL_APPEND_EQN , listTheory.EL_MAP , listTheory.EL_REVERSE , listTheory.EL_SNOC , listTheory.EL_ZIP , listTheory.LENGTH_CONS , listTheory.EVERY_EL , listTheory.GENLIST_EL , listTheory.LENGTH_GENLIST , listTheory.GENLIST_EL_MAP , listTheory.IMAGE_EL_count_LENGTH , listTheory.MEM_EL])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.006617

EL_COUNT_LIST
proof length: 1
proof time: 0.001476
Statistics
  infstep : 3
  nodes   : 3
  maxdepth: 1
Time: 0.16843
  inferstep time: 0.124475
  node_find time: 0.001112
  node_crea time: 0.031509
    pred time: 0.011226
    thmpred time: 0.000001
    mc time: 0.015919
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "rich_list" "COUNT_LIST_GENLIST" , DB.fetch "rich_list" "COUNT_LIST_def" , DB.fetch "rich_list" "LENGTH_COUNT_LIST" , listTheory.EL_GENLIST , listTheory.GENLIST_EL , listTheory.EL_SNOC , listTheory.EL_MAP , listTheory.EL_REVERSE , listTheory.EL_ZIP , listTheory.EVERY_EL , listTheory.LIST_REL_EL_EQN , listTheory.LLEX_EL_THM , listTheory.LUPDATE_SAME , listTheory.LUPDATE_SEM , listTheory.MEM_ZIP , DB.fetch "rich_list" "ELL_REVERSE_EL" ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.007563

MEM_COUNT_LIST
proof length: 3
proof time: 0.069068
Statistics
  infstep : 26
  nodes   : 13
  maxdepth: 3
Time: 1.343096
  inferstep time: 1.135744
  node_find time: 0.009392
  node_crea time: 0.133356
    pred time: 0.037906
    thmpred time: 0.000002
    mc time: 0.069565
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [(DB.fetch "list" "MEM_EL"), (DB.fetch "list" "EL_GENLIST"), boolLib.EQ_IMP_THM] THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "EL_COUNT_LIST", arithmeticTheory.tactictoe_thm_8, DB.fetch "rich_list" "COUNT_LIST_GENLIST", DB.fetch "rich_list" "COUNT_LIST_def", DB.fetch "rich_list" "LENGTH_COUNT_LIST", listTheory.EL_GENLIST, listTheory.MEM_EL, listTheory.MEM_DROP, listTheory.MEM_ZIP, DB.fetch "rich_list" "EL_MEM", listTheory.MEM_LUPDATE, listTheory.EL_restricted, listTheory.EL, listTheory.IMAGE_EL_count_LENGTH, listTheory.MEM_GENLIST, listTheory.DROP_cons], metisTools.METIS_TAC [DB.fetch "rich_list" "EL_COUNT_LIST", DB.fetch "rich_list" "LENGTH_COUNT_LIST", arithmeticTheory.tactictoe_thm_8, DB.fetch "rich_list" "COUNT_LIST_def", DB.fetch "rich_list" "COUNT_LIST_GENLIST", listTheory.MEM_EL, listTheory.MEM_ZIP, listTheory.MEM_LUPDATE, listTheory.MEM_DROP, DB.fetch "rich_list" "EL_MEM", listTheory.EL_GENLIST, listTheory.IMAGE_EL_count_LENGTH, listTheory.EL_restricted, listTheory.EL, DB.fetch "rich_list" "ELL_MEM", listTheory.MEM_GENLIST]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.017978

COUNT_LIST_SNOC
proof length: 2
proof time: 0.022323
Statistics
  infstep : 10
  nodes   : 7
  maxdepth: 2
Time: 0.396281
  inferstep time: 0.295488
  node_find time: 0.00379
  node_crea time: 0.070393
    pred time: 0.027385
    thmpred time: 0.0
    mc time: 0.029606
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "COUNT_LIST_def", DB.fetch "rich_list" "COUNT_LIST_GENLIST", DB.fetch "rich_list" "EL_COUNT_LIST", DB.fetch "rich_list" "LENGTH_COUNT_LIST", DB.fetch "rich_list" "MEM_COUNT_LIST", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "BUTLASTN", DB.fetch "rich_list" "ELL_SUC_SNOC", listTheory.REVERSE_SNOC_DEF, listTheory.SNOC, listTheory.SNOC_Axiom, listTheory.tactictoe_thm_17, DB.fetch "rich_list" "IS_SUFFIX", listTheory.SNOC_INDUCT, DB.fetch "rich_list" "SEG_LENGTH_SNOC", listTheory.SNOC_APPEND] THEN metisTools.METIS_TAC [DB.fetch "rich_list" "COUNT_LIST_GENLIST", DB.fetch "rich_list" "COUNT_LIST_def", combinTheory.I_THM, combinTheory.I_o_ID, listTheory.MAP_GENLIST, listTheory.GENLIST_CONS, listTheory.GENLIST, listTheory.HD_GENLIST, listTheory.TL_GENLIST, listTheory.REVERSE_DEF, listTheory.SNOC_APPEND, listTheory.EL_GENLIST, listTheory.LENGTH_GENLIST, DB.fetch "rich_list" "SEG_LENGTH_SNOC", listTheory.SNOC, DB.fetch "rich_list" "SNOC_FOLDR"]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.007126

COUNT_LIST_COUNT
proof length: 1
proof time: 0.001414
Statistics
  infstep : 3
  nodes   : 3
  maxdepth: 1
Time: 0.153484
  inferstep time: 0.122577
  node_find time: 0.001206
  node_crea time: 0.019515
    pred time: 0.005794
    thmpred time: 0.0
    mc time: 0.010016
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ boolSimps.CONJ_ss ] [ DB.fetch "rich_list" "MEM_COUNT_LIST" , DB.fetch "rich_list" "LENGTH_COUNT_LIST" , DB.fetch "rich_list" "EL_COUNT_LIST" , DB.fetch "rich_list" "COUNT_LIST_GENLIST" , DB.fetch "rich_list" "COUNT_LIST_def" , DB.fetch "rich_list" "COUNT_LIST_SNOC" , listTheory.LIST_TO_SET_GENLIST , pred_setTheory.IN_COUNT , pred_setTheory.BIGUNION_IMAGE_UNIV , pred_setTheory.CARD_COUNT , pred_setTheory.COUNT_SUC , pred_setTheory.COUNT_applied , pred_setTheory.DISJOINT_COUNT , pred_setTheory.FINITE_BIJ_COUNT_EQ , pred_setTheory.count_def , pred_setTheory.count_EQN ])
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.145667

COUNT_LIST_ADD
Statistics
  infstep : 341
  nodes   : 104
  maxdepth: 6
Time: 10.088796
  inferstep time: 8.245172
  node_find time: 0.146812
  node_crea time: 1.136435
    pred time: 0.279532
    thmpred time: 0.000032
    mc time: 0.544859
    inst time: 0.0
Proof status: Time Out
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.284842

EL_DROP
Statistics
  infstep : 376
  nodes   : 103
  maxdepth: 6
Time: 10.00142
  inferstep time: 7.979025
  node_find time: 0.153977
  node_crea time: 1.209229
    pred time: 0.368682
    thmpred time: 0.000027
    mc time: 0.55525
    inst time: 0.0
Proof status: Time Out
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.10439

SNOC_EL_TAKE
proof length: 7
proof time: 0.018157
Statistics
  infstep : 53
  nodes   : 26
  maxdepth: 3
Time: 2.175728
  inferstep time: 1.733441
  node_find time: 0.019449
  node_crea time: 0.266667
    pred time: 0.080446
    thmpred time: 0.000003
    mc time: 0.162617
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL
  [BasicProvers.SRW_TAC [] [listTheory.LENGTH, listTheory.EL_restricted, listTheory.EL, DB.fetch "rich_list" "TAKE", listTheory.TAKE_0, listTheory.TAKE_compute, numeralTheory.numeral_distrib, prim_recTheory.LESS_0_0, arithmeticTheory.ONE, arithmeticTheory.BIT1, arithmeticTheory.BIT2, arithmeticTheory.SUB_LEFT_SUC, listTheory.splitAtPki_EQN, listTheory.LLEX_EL_THM, DB.fetch "rich_list" "TAKE_SNOC", listTheory.EL_SNOC],
  BasicProvers.SRW_TAC [] [listTheory.LENGTH, listTheory.EL_restricted, listTheory.EL, listTheory.TAKE_compute, DB.fetch "rich_list" "TAKE", listTheory.TAKE_0, numeralTheory.numeral_distrib, prim_recTheory.LESS_0_0, arithmeticTheory.BIT1, arithmeticTheory.BIT2, arithmeticTheory.SUB_LEFT_SUC, arithmeticTheory.ONE, listTheory.splitAtPki_EQN, listTheory.LLEX_EL_THM, DB.fetch "rich_list" "TAKE_SNOC", listTheory.TAKE_cons]], Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THEN
  simpLib.FULL_SIMP_TAC (BasicProvers.srw_ss ()) []]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.068844

ZIP_TAKE_LEQ
Statistics
  infstep : 582
  nodes   : 99
  maxdepth: 5
Time: 10.077203
  inferstep time: 7.291439
  node_find time: 0.25107
  node_crea time: 1.679133
    pred time: 0.461562
    thmpred time: 0.000016
    mc time: 0.68025
    inst time: 0.0
Proof status: Time Out
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.154747

ZIP_TAKE
proof length: 7
proof time: 0.089375
Statistics
  infstep : 51
  nodes   : 25
  maxdepth: 4
Time: 2.170458
  inferstep time: 1.675313
  node_find time: 0.019918
  node_crea time: 0.306222
    pred time: 0.104259
    thmpred time: 0.000003
    mc time: 0.170027
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 99257*)n"] THENL [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "TAKE", listTheory.TAKE_compute, listTheory.TAKE_0, numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, listTheory.ZIP_DROP, listTheory.FOLDL2_FOLDL, listTheory.EL_ZIP, listTheory.MEM_ZIP, listTheory.ALL_DISTINCT_ZIP, listTheory.LENGTH_ZIP, listTheory.ALL_DISTINCT_ZIP_SWAP, listTheory.SUM_MAP_PLUS_ZIP, listTheory.ZIP_EQ_NIL, listTheory.ZIP_MAP, listTheory.MAP_ZIP], BasicProvers.Cases THENL
  [metisTools.METIS_TAC [DB.fetch "rich_list" "SNOC_EL_TAKE", listTheory.LENGTH, DB.fetch "rich_list" "TAKE", listTheory.ZIP, listTheory.UNZIP, listTheory.UNZIP_THM, DB.fetch "rich_list" "ZIP_TAKE_LEQ", arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.NOT_LEQ, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_SUC_LESS_EQ_0, listTheory.ZIP_DROP, listTheory.ZIP_EQ_NIL, listTheory.EL_ZIP, listTheory.MEM_ZIP],
  BasicProvers.Cases THENL
  [metisTools.METIS_TAC [listTheory.LENGTH, DB.fetch "rich_list" "TAKE", listTheory.ZIP, DB.fetch "rich_list" "SNOC_EL_TAKE", listTheory.UNZIP_THM, DB.fetch "rich_list" "ZIP_TAKE_LEQ", arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.NOT_LEQ, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.NOT_SUC_LESS_EQ_0, listTheory.SUM_MAP_PLUS_ZIP, listTheory.ZIP_EQ_NIL, listTheory.ZIP_DROP, listTheory.EL_ZIP, listTheory.MEM_ZIP],
  BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM]]]]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.008807

EL_TAKE
proof length: 9
proof time: 0.167875
Statistics
  infstep : 96
  nodes   : 37
  maxdepth: 4
Time: 3.946476
  inferstep time: 3.033027
  node_find time: 0.04162
  node_crea time: 0.540308
    pred time: 0.187981
    thmpred time: 0.000014
    mc time: 0.327985
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "TAKE", listTheory.TAKE_compute, listTheory.TAKE_0, numeralTheory.numeral_distrib, prim_recTheory.NOT_LESS_0, DB.fetch "rich_list" "SNOC_EL_TAKE", listTheory.splitAtPki_EQN, listTheory.LLEX_EL_THM, listTheory.EL_SNOC, listTheory.MEM_EL, listTheory.MEM_LUPDATE, listTheory.EL_MAP, listTheory.EVERY_EL, listTheory.LUPDATE_SEM, DB.fetch "rich_list" "ELL_REVERSE_EL", DB.fetch "rich_list" "EL_ELL"], BasicProvers.Cases THENL
  [Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL
  [metisTools.METIS_TAC [prim_recTheory.LESS_0, DB.fetch "rich_list" "SNOC_EL_TAKE", DB.fetch "rich_list" "TAKE", listTheory.EL_restricted, listTheory.EL, arithmeticTheory.tactictoe_thm_11, listTheory.splitAtPki_EQN, listTheory.LLEX_EL_THM, listTheory.TAKE_cons, listTheory.TAKE_def, listTheory.TAKE_compute, listTheory.TAKE_0, listTheory.TAKE_nil, listTheory.TAKE_APPEND2, DB.fetch "rich_list" "TAKE_SEG", DB.fetch "rich_list" "TAKE_SNOC"],
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "TAKE", arithmeticTheory.tactictoe_thm_11, prim_recTheory.LESS_0, DB.fetch "rich_list" "SNOC_EL_TAKE", listTheory.EL_restricted, listTheory.EL, listTheory.splitAtPki_EQN, listTheory.LLEX_EL_THM, listTheory.TAKE_compute, listTheory.TAKE_cons, listTheory.TAKE_def, DB.fetch "rich_list" "EL_CONS", DB.fetch "rich_list" "TAKE_SEG", listTheory.TAKE_0, listTheory.TAKE_APPEND2, DB.fetch "rich_list" "TAKE_SNOC"]],
  Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL
  [simpLib.FULL_SIMP_TAC (BasicProvers.srw_ss ()) [],
  metisTools.METIS_TAC [DB.fetch "rich_list" "TAKE", listTheory.EL_restricted, DB.fetch "rich_list" "SNOC_EL_TAKE", listTheory.EL, arithmeticTheory.tactictoe_thm_11, arithmeticTheory.tactictoe_thm_8, prim_recTheory.LESS_MONO, arithmeticTheory.LESS_MONO_REV, prim_recTheory.LESS_MONO_REV, arithmeticTheory.LESS_MONO_EQ, prim_recTheory.LESS_MONO_EQ, arithmeticTheory.LESS_NOT_SUC, arithmeticTheory.LESS_SUC_EQ_COR, prim_recTheory.SUC_LESS, numeralTheory.tactictoe_thm_12, numeralTheory.tactictoe_thm_16]]]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.145456

ZIP_APPEND
Statistics
  infstep : 507
  nodes   : 87
  maxdepth: 5
Time: 10.001462
  inferstep time: 7.567283
  node_find time: 0.221059
  node_crea time: 1.387432
    pred time: 0.361777
    thmpred time: 0.000022
    mc time: 0.635939
    inst time: 0.0
Proof status: Time Out
Org tac number: 13
Original proof time: 0.0
Replaying proof: 0.637876

APPEND_ASSOC_CONS
proof length: 1
proof time: 0.099273
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.15704
  inferstep time: 0.127713
  node_find time: 0.00039
  node_crea time: 0.016
    pred time: 0.003211
    thmpred time: 0.0
    mc time: 0.010809
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.APPEND , listTheory.LAST_APPEND_CONS , listTheory.APPEND_11 , listTheory.APPEND_ASSOC , listTheory.FILTER_EQ_APPEND , listTheory.MEM_SPLIT , DB.fetch "rich_list" "tactictoe_thm_3" , listTheory.LUPDATE_LENGTH , listTheory.LIST_REL_trans , listTheory.LENGTH_EQ_NUM , listTheory.LENGTH_EQ_NUM_compute , listTheory.APPEND_EQ_CONS , listTheory.FILTER_EQ_CONS , listTheory.APPEND_EQ_APPEND_MID , listTheory.APPEND_EQ_SING , DB.fetch "rich_list" "APPEND_FOLDR"])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.006494

APPEND_SNOC1
proof length: 1
proof time: 0.001405
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.150033
  inferstep time: 0.12824
  node_find time: 0.000802
  node_crea time: 0.012099
    pred time: 0.003504
    thmpred time: 0.0
    mc time: 0.00727
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ listTheory.MEM_SPLIT , DB.fetch "rich_list" "tactictoe_thm_3" , listTheory.LAST_APPEND_CONS , DB.fetch "rich_list" "APPEND_ASSOC_CONS" , listTheory.LUPDATE_LENGTH , listTheory.APPEND_SNOC , DB.fetch "rich_list" "APPEND_FOLDL" , DB.fetch "rich_list" "tactictoe_thm_4" , listTheory.SNOC_APPEND , listTheory.SNOC , DB.fetch "rich_list" "IS_SUFFIX" , DB.fetch "rich_list" "SNOC_EQ_LENGTH_EQ" , DB.fetch "rich_list" "ZIP_SNOC" , DB.fetch "rich_list" "FLAT_SNOC" , listTheory.REVERSE_SNOC , DB.fetch "rich_list" "SEG_LENGTH_SNOC" ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.010838

FOLDL_MAP2
proof length: 1
proof time: 0.04302
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.08695
  inferstep time: 0.067842
  node_find time: 0.000431
  node_crea time: 0.011929
    pred time: 0.003283
    thmpred time: 0.0
    mc time: 0.006693
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "FOLDL_MAP" , listTheory.EVERY2_MAP , listTheory.LIST_REL_MAP2 , combinTheory.S_DEF , combinTheory.S_ABS_L , combinTheory.S_ABS_R , DB.fetch "rich_list" "FCOMM_FOLDL_FLAT" , DB.fetch "rich_list" "ASSOC_FOLDL_FLAT" , DB.fetch "rich_list" "FCOMM_FOLDL_APPEND" , DB.fetch "rich_list" "FOLDL_FILTER" , DB.fetch "rich_list" "FOLDL_FOLDR_REVERSE" , DB.fetch "rich_list" "FOLDL_REVERSE" , listTheory.FOLDL , DB.fetch "rich_list" "tactictoe_thm_20" , DB.fetch "rich_list" "COMM_MONOID_FOLDL" , DB.fetch "rich_list" "tactictoe_thm_23"])
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.165334

SPLITP_EVERY
proof length: 4
proof time: 0.035248
Statistics
  infstep : 72
  nodes   : 18
  maxdepth: 3
Time: 1.722447
  inferstep time: 1.262481
  node_find time: 0.031857
  node_crea time: 0.27129
    pred time: 0.079758
    thmpred time: 0.000003
    mc time: 0.111095
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "SPLITP", listTheory.FILTER_EQ_NIL, listTheory.EXISTS_NOT_EVERY, listTheory.EVERY_NOT_EXISTS, listTheory.UNZIP, listTheory.UNZIP_THM, listTheory.ZIP, DB.fetch "rich_list" "SPLITR_def", DB.fetch "rich_list" "PREFIX_DEF", DB.fetch "rich_list" "SPLITL_def", whileTheory.WHILE_RULE, listTheory.every_zip_fst, listTheory.every_zip_snd, listTheory.EVERY2_EVERY, listTheory.LIST_REL_EVERY_ZIP, listTheory.EVERY_DEF], BasicProvers.SRW_TAC [] [(DB.fetch "pred_set" "INJ_DEF"), (DB.fetch "pred_set" "SUBSET_DEF")] THEN
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "SPLITP", listTheory.ZIP, listTheory.UNZIP_THM, DB.fetch "rich_list" "SPLITR_def", DB.fetch "rich_list" "PREFIX_DEF", DB.fetch "rich_list" "SPLITL_def", DB.fetch "rich_list" "SPLITP_AUX_def", listTheory.INDEX_FIND_def, listTheory.APPEND, listTheory.FILTER_COND_REWRITE, listTheory.EXISTS_LIST, listTheory.list_INDUCT, listTheory.FILTER, listTheory.EVERY_DEF, listTheory.EXISTS_DEF, listTheory.LENGTH]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.036688

MEM_FRONT
proof length: 4
proof time: 0.004742
Statistics
  infstep : 21
  nodes   : 9
  maxdepth: 3
Time: 0.98277
  inferstep time: 0.80027
  node_find time: 0.008462
  node_crea time: 0.109956
    pred time: 0.032027
    thmpred time: 0.000003
    mc time: 0.056319
    inst time: 0.0
Proof found: boolLib.INDUCT_THEN (DB.fetch "rich_list" "tactictoe_thm_31") boolLib.ASSUME_TAC THENL [BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM], BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THEN
  simpLib.FULL_SIMP_TAC (BasicProvers.srw_ss ()) [(DB.fetch "list" "LRC_def")]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.035146

FRONT_APPEND
proof length: 4
proof time: 0.109465
Statistics
  infstep : 38
  nodes   : 13
  maxdepth: 3
Time: 1.126342
  inferstep time: 0.916648
  node_find time: 0.014692
  node_crea time: 0.119204
    pred time: 0.040394
    thmpred time: 0.000006
    mc time: 0.048606
    inst time: 0.0
Proof found: boolLib.INDUCT_THEN (DB.fetch "rich_list" "tactictoe_thm_31") boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.APPEND, DB.fetch "rich_list" "APPEND_NIL", DB.fetch "rich_list" "MEM_FRONT", listTheory.FRONT_CONS, listTheory.FRONT_DEF, listTheory.FRONT_CONS_EQ_NIL, listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "IS_PREFIX_BUTLAST", listTheory.APPEND_FRONT_LAST, DB.fetch "rich_list" "BUTLASTN_1", DB.fetch "rich_list" "LENGTH_FRONT", listTheory.FRONT_SNOC, DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute"], simpLib.FULL_SIMP_TAC (numLib.arith_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close listSimps.LIST_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close pred_setSimps.PRED_SET_ss) [boolLib.DISJ_IMP_THM, listTheory.MEM] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "MEM_FRONT", listTheory.FRONT_CONS, listTheory.FRONT_CONS_EQ_NIL, listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "IS_PREFIX_BUTLAST", listTheory.FRONT_DEF, listTheory.MEM_SPLIT, DB.fetch "rich_list" "APPEND_SNOC1", DB.fetch "rich_list" "tactictoe_thm_3", listTheory.LAST_APPEND_CONS, DB.fetch "rich_list" "APPEND_ASSOC_CONS", listTheory.LUPDATE_LENGTH, listTheory.APPEND_FRONT_LAST, listTheory.FRONT_SNOC, DB.fetch "rich_list" "BUTLASTN_1", DB.fetch "rich_list" "BUTLASTN_FRONT"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.045649

EL_FRONT
proof length: 3
proof time: 0.079923
Statistics
  infstep : 13
  nodes   : 9
  maxdepth: 2
Time: 0.644996
  inferstep time: 0.499145
  node_find time: 0.004734
  node_crea time: 0.091099
    pred time: 0.02809
    thmpred time: 0.0
    mc time: 0.054482
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN listTheory.SNOC_INDUCT boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.NULL, listTheory.NULL_DEF, listTheory.FRONT_CONS_EQ_NIL, DB.fetch "rich_list" "LENGTH_FRONT", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "BUTLASTN_1", listTheory.APPEND_FRONT_LAST, listTheory.FRONT_CONS, listTheory.FRONT_DEF, listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "MEM_FRONT", listTheory.FRONT_SNOC, DB.fetch "rich_list" "FRONT_APPEND"], metisTools.METIS_TAC [listTheory.FRONT_SNOC, DB.fetch "rich_list" "NOT_NULL_SNOC", listTheory.EL_SNOC, arithmeticTheory.tactictoe_thm_11, listTheory.FRONT_CONS_EQ_NIL, DB.fetch "rich_list" "ELL_LENGTH_SNOC", DB.fetch "rich_list" "TL_SNOC", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "LENGTH_FRONT", listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "BUTLASTN_1", listTheory.APPEND_FRONT_LAST, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "MEM_FRONT"]]
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.181357

MEM_LAST
proof length: 3
proof time: 0.00262
Statistics
  infstep : 340
  nodes   : 98
  maxdepth: 6
Time: 6.266651
  inferstep time: 4.515114
  node_find time: 0.150275
  node_crea time: 1.042845
    pred time: 0.21936
    thmpred time: 0.000017
    mc time: 0.408127
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 101368*)l"] THENL [BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM], simpLib.FULL_SIMP_TAC (numLib.arith_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close listSimps.LIST_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close pred_setSimps.PRED_SET_ss) [boolLib.DISJ_IMP_THM, listTheory.MEM]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.059506

DROP_CONS_EL
Statistics
  infstep : 370
  nodes   : 128
  maxdepth: 6
Time: 10.002853
  inferstep time: 7.729231
  node_find time: 0.162574
  node_crea time: 1.424905
    pred time: 0.350562
    thmpred time: 0.00002
    mc time: 0.699631
    inst time: 0.0
Proof status: Time Out
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.133492

MEM_LAST_FRONT
proof length: 7
proof time: 0.111247
Statistics
  infstep : 53
  nodes   : 26
  maxdepth: 4
Time: 2.365014
  inferstep time: 1.851999
  node_find time: 0.021075
  node_crea time: 0.343899
    pred time: 0.10622
    thmpred time: 0.00001
    mc time: 0.155592
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 101368*)l"] THENL [metisTools.METIS_TAC [listTheory.MEM, listTheory.FRONT_CONS, listTheory.LAST_CONS, listTheory.LAST_compute, listTheory.LIST_TO_SET_DEF, listTheory.LIST_TO_SET, listTheory.LIST_TO_SET_THM, listTheory.APPEND_FRONT_LAST, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "MEM_FRONT", listTheory.FRONT_DEF, DB.fetch "rich_list" "FRONT_APPEND", listTheory.FRONT_CONS_EQ_NIL, listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "IS_PREFIX_BUTLAST"], BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THENL
  [BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 101368*)l"] THENL
  [metisTools.METIS_TAC [listTheory.MEM, listTheory.FRONT_CONS, listTheory.LAST_CONS, listTheory.LAST_compute, listTheory.isPREFIX, listTheory.LIST_REL_CONS1, listTheory.LIST_REL_CONS2, listTheory.LIST_TO_SET_DEF, listTheory.LIST_TO_SET, listTheory.LIST_TO_SET_THM, listTheory.APPEND_FRONT_LAST, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "MEM_FRONT", listTheory.FRONT_DEF, DB.fetch "rich_list" "FRONT_APPEND"],
  metisTools.METIS_TAC [listTheory.FRONT_CONS, listTheory.LAST_CONS, listTheory.LAST_compute, DB.fetch "rich_list" "MEM_FRONT", listTheory.MEM, listTheory.isPREFIX, listTheory.LIST_REL_CONS1, listTheory.LIST_REL_CONS2, DB.fetch "rich_list" "MEM_LAST", listTheory.LIST_TO_SET_DEF, listTheory.LIST_TO_SET, listTheory.LIST_TO_SET_THM, listTheory.APPEND_FRONT_LAST, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.FRONT_DEF]],
  metisTools.METIS_TAC [DB.fetch "rich_list" "MEM_FRONT", listTheory.isPREFIX, listTheory.LIST_REL_CONS1, listTheory.LIST_REL_CONS2, listTheory.FRONT_DEF, DB.fetch "rich_list" "FRONT_APPEND", listTheory.FRONT_CONS, listTheory.FRONT_CONS_EQ_NIL, listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "IS_PREFIX_BUTLAST", listTheory.APPEND_FRONT_LAST, DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", DB.fetch "rich_list" "EL_FRONT", DB.fetch "rich_list" "BUTLASTN_1", listTheory.FRONT_SNOC]]]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.074395

LIST_ELEM_COUNT_THM
proof length: 3
proof time: 0.014859
Statistics
  infstep : 144
  nodes   : 34
  maxdepth: 4
Time: 2.299708
  inferstep time: 1.67584
  node_find time: 0.05868
  node_crea time: 0.333851
    pred time: 0.095822
    thmpred time: 0.000007
    mc time: 0.122702
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LIST_ELEM_COUNT_DEF", listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute, listTheory.APPEND, listTheory.APPEND_EQ_CONS, DB.fetch "rich_list" "APPEND_ASSOC_CONS", listTheory.APPEND_EQ_APPEND_MID, listTheory.APPEND_EQ_SING, listTheory.FILTER_EQ_CONS, listTheory.ALL_DISTINCT_APPEND, listTheory.LAST_APPEND_CONS, DB.fetch "rich_list" "FCOMM_FOLDL_APPEND", DB.fetch "rich_list" "FCOMM_FOLDR_APPEND", listTheory.MEM_APPEND, DB.fetch "rich_list" "FOLDL_APPEND", DB.fetch "rich_list" "FOLDR_APPEND"] THEN BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LIST_ELEM_COUNT_DEF", listTheory.APPEND_11_LENGTH, listTheory.APPEND_LENGTH_EQ, sumTheory.INL_DEF, sumTheory.INR_DEF, listTheory.length_nub_append, listTheory.FILTER_EQ_APPEND, listTheory.nub_append, listTheory.LLEX_def, listTheory.EL_LUPDATE, sumTheory.tactictoe_thm_8, listTheory.isPREFIX, listTheory.FILTER_APPEND_DISTRIB, listTheory.FILTER_EQ_CONS, listTheory.APPEND_EQ_APPEND_MID, listTheory.APPEND_EQ_SING] THEN
  BasicProvers.PROVE_TAC []
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.017665

LIST_ELEM_COUNT_MEM
proof length: 4
proof time: 0.006216
Statistics
  infstep : 165
  nodes   : 48
  maxdepth: 4
Time: 4.709825
  inferstep time: 3.841188
  node_find time: 0.072252
  node_crea time: 0.478424
    pred time: 0.136386
    thmpred time: 0.000012
    mc time: 0.209872
    inst time: 0.0
Proof found: simpLib.SIMP_TAC (numLib.arith_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close listSimps.LIST_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close pred_setSimps.PRED_SET_ss) [(DB.fetch "rich_list" "LIST_ELEM_COUNT_DEF"), listTheory.FILTER_APPEND_DISTRIB] THEN BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 11380*)l"] THEN
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LIST_ELEM_COUNT_DEF", listTheory.APPEND_11_LENGTH, listTheory.APPEND_LENGTH_EQ, sumTheory.INL_DEF, sumTheory.INR_DEF, listTheory.length_nub_append, listTheory.FILTER_EQ_APPEND, listTheory.nub_append, listTheory.LLEX_def, listTheory.EL_LUPDATE, sumTheory.tactictoe_thm_8, listTheory.isPREFIX, listTheory.FILTER_APPEND_DISTRIB, listTheory.FILTER_EQ_CONS, listTheory.APPEND_EQ_APPEND_MID, listTheory.APPEND_EQ_SING]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.078355

LIST_TO_SET_EQ_SING
Statistics
  infstep : 1194
  nodes   : 159
  maxdepth: 6
Time: 10.000162
  inferstep time: 6.182296
  node_find time: 0.547802
  node_crea time: 1.39508
    pred time: 0.195413
    thmpred time: 0.000015
    mc time: 0.590553
    inst time: 0.0
Proof status: Time Out
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.153172

REPLICATE_GENLIST
proof length: 4
proof time: 0.024494
Statistics
  infstep : 9
  nodes   : 6
  maxdepth: 3
Time: 0.526476
  inferstep time: 0.408375
  node_find time: 0.004457
  node_crea time: 0.069177
    pred time: 0.028693
    thmpred time: 0.000003
    mc time: 0.037916
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "REPLICATE", DB.fetch "rich_list" "REPLICATE_compute", listTheory.PAD_LEFT, listTheory.PAD_RIGHT, DB.fetch "rich_list" "MEM_REPLICATE", DB.fetch "rich_list" "EVERY_REPLICATE", DB.fetch "rich_list" "LENGTH_REPLICATE", listTheory.LIST_IGNORE_BIND_def, combinTheory.K_THM, pred_setTheory.FUNSET_DFUNSET, pred_setTheory.K_SUBSET, pred_setTheory.PREIMAGE_K, pred_setTheory.SUBSET_K, combinTheory.K_o_THM, optionTheory.OPTION_IGNORE_BIND_def, listTheory.dropWhile_splitAtPki], boolLib.ONCE_REWRITE_TAC [(DB.fetch "list" "GENLIST_CONS")] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "REPLICATE", combinTheory.K_o_THM, DB.fetch "rich_list" "REPLICATE_compute", DB.fetch "rich_list" "MEM_REPLICATE", DB.fetch "rich_list" "EVERY_REPLICATE", DB.fetch "rich_list" "LENGTH_REPLICATE", listTheory.PAD_LEFT, listTheory.PAD_RIGHT, listTheory.LIST_IGNORE_BIND_def, combinTheory.K_THM, pred_setTheory.FUNSET_DFUNSET, pred_setTheory.K_SUBSET, pred_setTheory.PREIMAGE_K, pred_setTheory.SUBSET_K, optionTheory.OPTION_IGNORE_BIND_def, listTheory.DROP_splitAtPki]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.030993

EL_REPLICATE
proof length: 1
proof time: 0.002174
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.247169
  inferstep time: 0.215887
  node_find time: 0.001146
  node_crea time: 0.015134
    pred time: 0.004098
    thmpred time: 0.0
    mc time: 0.011404
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "rich_list" "MEM_REPLICATE" , DB.fetch "rich_list" "REPLICATE" , DB.fetch "rich_list" "EVERY_REPLICATE" , DB.fetch "rich_list" "LENGTH_REPLICATE" , DB.fetch "rich_list" "REPLICATE_GENLIST" , listTheory.ALL_DISTINCT_EL_IMP , listTheory.EL_ALL_DISTINCT_EL_EQ , listTheory.ALL_DISTINCT_FILTER_EL_IMP , DB.fetch "rich_list" "SEG_SEG" , listTheory.LENGTH_EQ_NUM , listTheory.LENGTH_EQ_SUM , listTheory.LENGTH_EQ_NUM_compute , listTheory.GENLIST_PLUS_APPEND , ind_typeTheory.INJN_INJ , pred_setTheory.COUNT_11 , arithmeticTheory.ABS_DIFF_SUMS ])
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.192902

EVERY_REPLICATE
proof length: 5
proof time: 0.057247
Statistics
  infstep : 42
  nodes   : 12
  maxdepth: 4
Time: 1.429442
  inferstep time: 1.189283
  node_find time: 0.01801
  node_crea time: 0.117932
    pred time: 0.039438
    thmpred time: 0.000002
    mc time: 0.056786
    inst time: 0.0
Proof found: boolLib.GEN_TAC THEN let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  INDUCT_TAC THENL
  [BasicProvers.SRW_TAC [] [],
  BasicProvers.SRW_TAC [] [(DB.fetch "rich_list" "REPLICATE"), listTheory.GENLIST_CONS] THEN
  metisTools.METIS_TAC [arithmeticTheory.BOUNDED_EXISTS_THM, arithmeticTheory.EXISTS_NUM, listTheory.list_TY_DEF, arithmeticTheory.ADD_EQ_1, arithmeticTheory.LE, arithmeticTheory.SUB_LEFT_EQ, arithmeticTheory.SUB_RIGHT_EQ, arithmeticTheory.EXP_BASE_LE_IFF, arithmeticTheory.LE_MULT_CANCEL_LBARE, arithmeticTheory.LE_MULT_CANCEL_RBARE, arithmeticTheory.MODEQ_THM, arithmeticTheory.num_CASES, arithmeticTheory.ADD_DIV_RWT, arithmeticTheory.EQ_MULT_LCANCEL, arithmeticTheory.EQ_MULT_RCANCEL, arithmeticTheory.EXP_EQ_1]]
end
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.064043

ALL_DISTINCT_DROP
proof length: 1
proof time: 0.041586
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.082712
  inferstep time: 0.064735
  node_find time: 0.000487
  node_crea time: 0.011036
    pred time: 0.00285
    thmpred time: 0.0
    mc time: 0.005845
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.ALL_DISTINCT_DROP , listTheory.ALL_DISTINCT_CARD_LIST_TO_SET , listTheory.CARD_LIST_TO_SET_ALL_DISTINCT , listTheory.ALL_DISTINCT_MAP , listTheory.ALL_DISTINCT_MAP_INJ , listTheory.ALL_DISTINCT_EL_IMP , listTheory.EL_ALL_DISTINCT_EL_EQ , listTheory.ALL_DISTINCT_ZIP , listTheory.ALL_DISTINCT_APPEND , listTheory.ALL_DISTINCT_FILTER , listTheory.FILTER_ALL_DISTINCT , listTheory.ALL_DISTINCT , listTheory.ALL_DISTINCT_REVERSE , listTheory.ALL_DISTINCT_SNOC , listTheory.DROP_NIL , listTheory.MEM_DROP])
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.065078

MAP_SND_FILTER_NEQ
Statistics
  infstep : 1184
  nodes   : 145
  maxdepth: 5
Time: 10.093626
  inferstep time: 6.081671
  node_find time: 0.604281
  node_crea time: 1.723512
    pred time: 0.323834
    thmpred time: 0.000015
    mc time: 0.727208
    inst time: 0.0
Proof status: Time Out
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.173504

MEM_SING_APPEND
Statistics
  infstep : 469
  nodes   : 98
  maxdepth: 5
Time: 10.036293
  inferstep time: 7.661113
  node_find time: 0.203982
  node_crea time: 1.419082
    pred time: 0.391834
    thmpred time: 0.000019
    mc time: 0.491728
    inst time: 0.0
Proof status: Time Out
Org tac number: 11
Original proof time: 0.0
Replaying proof: 0.34408

EL_LENGTH_APPEND_rwt
proof length: 1
proof time: 0.026924
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.096693
  inferstep time: 0.068285
  node_find time: 0.000581
  node_crea time: 0.015334
    pred time: 0.004197
    thmpred time: 0.0
    mc time: 0.011474
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "EL_APPEND1" , DB.fetch "rich_list" "EL_APPEND2" , listTheory.EL_APPEND_EQN , DB.fetch "rich_list" "EL_LENGTH_APPEND" , DB.fetch "rich_list" "ELL_LENGTH_SNOC" , listTheory.CONS , listTheory.list_case_compute , listTheory.EL , listTheory.EL_compute , listTheory.splitAtPki_APPEND , DB.fetch "rich_list" "ELL_PRE_LENGTH" , listTheory.LAST_REVERSE , DB.fetch "rich_list" "EL_FRONT" , DB.fetch "rich_list" "ELL_LENGTH_APPEND" , DB.fetch "rich_list" "LENGTH_NOT_NULL" , listTheory.NULL_LENGTH])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.015477

MAP_FST_funs
proof length: 3
proof time: 0.071452
Statistics
  infstep : 11
  nodes   : 5
  maxdepth: 3
Time: 0.527906
  inferstep time: 0.373032
  node_find time: 0.008006
  node_crea time: 0.085537
    pred time: 0.028867
    thmpred time: 0.000002
    mc time: 0.04963
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [(DB.fetch "list" "MAP_EQ_EVERY2"), (DB.fetch "list" "EVERY2_EVERY"), (DB.fetch "list" "EVERY_MEM"), (DB.fetch "list" "LIST_EQ_REWRITE"), pairTheory.FORALL_PROD] THEN simpLib.REV_FULL_SIMP_TAC (BasicProvers.srw_ss ()) [(DB.fetch "list" "MEM_ZIP"), boolLib.GSYM boolLib.LEFT_FORALL_IMP_THM, (DB.fetch "list" "EL_REVERSE")] THEN
  metisTools.METIS_TAC [pairTheory.FORALL_PROD, listTheory.LIST_EQ_MAP_PAIR, listTheory.EVERY_MEM, listTheory.LIST_EQ_REWRITE, listTheory.MEM_ZIP, listTheory.MAP_EQ_EVERY2, listTheory.EVERY2_EVERY, pairTheory.CLOSED_PAIR_EQ, pairTheory.pair_CASES, pairTheory.FST, pairTheory.SND, pairTheory.UNCURRY_DEF, satTheory.NOT_NOT, satTheory.OR_DUAL2, satTheory.OR_DUAL3, satTheory.dc_eq]
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.007335

TAKE_PRE_LENGTH
proof length: 6
proof time: 0.067329
Statistics
  infstep : 32
  nodes   : 18
  maxdepth: 4
Time: 1.453877
  inferstep time: 1.168066
  node_find time: 0.01441
  node_crea time: 0.169936
    pred time: 0.046427
    thmpred time: 0.000003
    mc time: 0.086138
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.LENGTH, DB.fetch "rich_list" "LENGTH_FRONT", DB.fetch "rich_list" "BUTLASTN_1", listTheory.APPEND_FRONT_LAST, DB.fetch "rich_list" "EL_FRONT", listTheory.FRONT_CONS, listTheory.FRONT_DEF, listTheory.FRONT_CONS_EQ_NIL, DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "MEM_LAST_FRONT", DB.fetch "rich_list" "MEM_FRONT", DB.fetch "rich_list" "ELL", DB.fetch "rich_list" "ELL_compute", listTheory.FRONT_SNOC], BasicProvers.SRW_TAC [] [listTheory.LENGTH, listTheory.FRONT_DEF, DB.fetch "rich_list" "MEM_LAST_FRONT", listTheory.FRONT_CONS, listTheory.FRONT_CONS_EQ_NIL, listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "MEM_FRONT", DB.fetch "rich_list" "FRONT_APPEND", DB.fetch "rich_list" "IS_PREFIX_BUTLAST", DB.fetch "rich_list" "LENGTH_FRONT", listTheory.APPEND_FRONT_LAST, DB.fetch "rich_list" "BUTLASTN_1", DB.fetch "rich_list" "EL_FRONT", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "ELL"] THEN
  BasicProvers.Cases_on [HolKernel.QUOTE " (*#loc 1 50424*)ls"] THENL
  [metisTools.METIS_TAC [listTheory.LENGTH, listTheory.FRONT_CONS, listTheory.FRONT_DEF, DB.fetch "rich_list" "MEM_LAST_FRONT", listTheory.FRONT_CONS_EQ_NIL, listTheory.LENGTH_FRONT_CONS, DB.fetch "rich_list" "FRONT_APPEND", DB.fetch "rich_list" "MEM_FRONT", DB.fetch "rich_list" "IS_PREFIX_BUTLAST", listTheory.APPEND_FRONT_LAST, DB.fetch "rich_list" "LENGTH_FRONT", DB.fetch "rich_list" "BUTLASTN_1", DB.fetch "rich_list" "BUTLASTN_FRONT", DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", DB.fetch "rich_list" "EL_FRONT", DB.fetch "rich_list" "ELL"],
  BasicProvers.SRW_TAC [] []]]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.067401

DROP_LENGTH_NIL_rwt
proof length: 1
proof time: 0.004262
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.175238
  inferstep time: 0.151788
  node_find time: 0.001208
  node_crea time: 0.012088
    pred time: 0.003794
    thmpred time: 0.000001
    mc time: 0.006824
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ numSimps.ARITH_ss ] [ listTheory.DROP_LENGTH_TOO_LONG , listTheory.splitAtPki_EQN , listTheory.DROP_NIL , DB.fetch "rich_list" "APPEND_BUTLASTN_DROP" , DB.fetch "rich_list" "DROP_DROP" , DB.fetch "rich_list" "EL_DROP" , DB.fetch "rich_list" "SEG_TAKE_BUTFISTN" , DB.fetch "rich_list" "EVERY_DROP" , DB.fetch "rich_list" "EXISTS_DROP" , DB.fetch "rich_list" "MEM_DROP" , DB.fetch "rich_list" "DROP_SEG" , listTheory.last_drop , DB.fetch "rich_list" "BUTLASTN_REVERSE" , DB.fetch "rich_list" "DROP_CONS_EL" , DB.fetch "rich_list" "DROP_LASTN" , DB.fetch "rich_list" "DROP_SNOC" ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.01026

DROP_EL_CONS
proof length: 5
proof time: 0.153049
Statistics
  infstep : 157
  nodes   : 61
  maxdepth: 4
Time: 6.809603
  inferstep time: 4.493264
  node_find time: 0.095601
  node_crea time: 1.64602
    pred time: 0.525416
    thmpred time: 0.000019
    mc time: 0.701433
    inst time: 0.0
Proof found: Prim_rec.INDUCT_THEN ((DB.fetch "list" "list_INDUCT")) boolLib.ASSUME_TAC THENL [metisTools.METIS_TAC [listTheory.LENGTH, listTheory.DROP_def, listTheory.DROP_nil, DB.fetch "rich_list" "DROP_CONS_EL", DB.fetch "rich_list" "EL_DROP", listTheory.splitAtPki_EQN, listTheory.MEM_DROP, listTheory.LEN_DEF, arithmeticTheory.LESS_ADD_1, arithmeticTheory.tactictoe_thm_59, arithmeticTheory.tactictoe_thm_60, numpairTheory.invtri_unique, numpairTheory.invtri0_ind, numpairTheory.invtri0_def, numpairTheory.tactictoe_thm_0, numpairTheory.tactictoe_thm_1], BasicProvers.Cases_on [HolKernel.QUOTE " (*#loc 1 54699*)n"] THENL
  [BasicProvers.SRW_TAC [] [(DB.fetch "numeral" "texp_help_def")],
  metisTools.METIS_TAC [listTheory.EL_restricted, DB.fetch "rich_list" "DROP", listTheory.LENGTH, listTheory.EL, listTheory.MEM_DROP, DB.fetch "rich_list" "DROP_CONS_EL", prim_recTheory.LESS_MONO, arithmeticTheory.LESS_MONO_EQ, prim_recTheory.LESS_MONO_EQ, arithmeticTheory.ADD, DB.fetch "rich_list" "tactictoe_thm_7", DB.fetch "rich_list" "tactictoe_thm_12", numpairTheory.tri_def, DB.fetch "rich_list" "tactictoe_thm_13", DB.fetch "rich_list" "tactictoe_thm_14", DB.fetch "rich_list" "tactictoe_thm_15"]]]
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.202947

TAKE_EL_SNOC
proof length: 7
proof time: 0.090029
Statistics
  infstep : 164
  nodes   : 74
  maxdepth: 5
Time: 7.396268
  inferstep time: 5.508535
  node_find time: 0.078739
  node_crea time: 1.303203
    pred time: 0.377362
    thmpred time: 0.000013
    mc time: 0.644169
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [metisTools.METIS_TAC [listTheory.LENGTH, listTheory.TAKE_def, listTheory.TAKE_nil, DB.fetch "rich_list" "DROP_EL_CONS", DB.fetch "rich_list" "SNOC_EL_TAKE", listTheory.splitAtPki_EQN, listTheory.LLEX_EL_THM, DB.fetch "rich_list" "EL_TAKE", arithmeticTheory.LESS_ADD_1, arithmeticTheory.tactictoe_thm_59, arithmeticTheory.tactictoe_thm_60, numpairTheory.invtri_unique, numpairTheory.invtri0_ind, numpairTheory.invtri0_def, numpairTheory.tactictoe_thm_0, numpairTheory.tactictoe_thm_1], simpLib.FULL_SIMP_TAC (BasicProvers.srw_ss ()) [] THEN
  BasicProvers.Cases_on [HolKernel.QUOTE " (*#loc 1 54699*)n"] THENL
  [simpLib.SIMP_TAC (BasicProvers.srw_ss ()) [],
  boolLib.REWRITE_TAC [listTheory.EL_restricted, DB.fetch "rich_list" "TAKE", DB.fetch "rich_list" "SNOC_EL_TAKE", listTheory.EL, listTheory.tactictoe_thm_14, listTheory.LENGTH, listTheory.LENGTH_SNOC, prim_recTheory.LESS_MONO, arithmeticTheory.LESS_MONO_EQ, prim_recTheory.LESS_MONO_EQ, arithmeticTheory.ADD, numpairTheory.tri_def, DB.fetch "rich_list" "tactictoe_thm_12", DB.fetch "rich_list" "tactictoe_thm_13", DB.fetch "rich_list" "tactictoe_thm_14", DB.fetch "rich_list" "tactictoe_thm_15"] THEN
  (simpLib.ASM_SIMP_TAC (BasicProvers.srw_ss () hhs_infixl0_open simpLib.++ hhs_infixl0_close boolSimps.LET_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.ARITH_ss)) [(DB.fetch "rich_list" "EL_APPEND1"), (DB.fetch "rich_list" "EL_APPEND2"), (DB.fetch "rich_list" "EL_TAKE")]]]
Org tac number: 10
Original proof time: 0.0
Replaying proof: 0.408797

REVERSE_DROP
proof length: 1
proof time: 0.064227
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.156614
  inferstep time: 0.123311
  node_find time: 0.000662
  node_crea time: 0.017883
    pred time: 0.004521
    thmpred time: 0.000001
    mc time: 0.014571
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "DROP_LASTN" , DB.fetch "rich_list" "BUTLASTN_REVERSE" , DB.fetch "rich_list" "DROP_SEG" , DB.fetch "rich_list" "LASTN_DROP" , listTheory.LENGTH_DROP , DB.fetch "rich_list" "LASTN_SEG" , DB.fetch "rich_list" "BUTLASTN_SEG" , DB.fetch "rich_list" "BUTLASTN_TAKE" , DB.fetch "rich_list" "LENGTH_BUTLASTN" , DB.fetch "rich_list" "TAKE_BUTLASTN" , listTheory.EL_REVERSE , DB.fetch "rich_list" "ELL_REVERSE" , DB.fetch "rich_list" "SEG_APPEND" , DB.fetch "rich_list" "ELL_EL" , DB.fetch "rich_list" "ELL_SEG" , DB.fetch "rich_list" "EL_ELL"])
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.357126

LENGTH_FILTER_LESS
Statistics
  infstep : 875
  nodes   : 88
  maxdepth: 5
Time: 10.001191
  inferstep time: 7.142019
  node_find time: 0.435253
  node_crea time: 1.109158
    pred time: 0.301133
    thmpred time: 0.000029
    mc time: 0.332658
    inst time: 0.0
Proof status: Time Out
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.123152

EVERY2_APPEND
Statistics
  infstep : 443
  nodes   : 81
  maxdepth: 5
Time: 10.056071
  inferstep time: 7.622364
  node_find time: 0.207888
  node_crea time: 1.372134
    pred time: 0.394091
    thmpred time: 0.000024
    mc time: 0.383238
    inst time: 0.0
Proof status: Time Out
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.16417

LIST_REL_APPEND_IMP
Statistics
  infstep : 599
  nodes   : 85
  maxdepth: 5
Time: 10.018671
  inferstep time: 7.322154
  node_find time: 0.307927
  node_crea time: 1.368647
    pred time: 0.371996
    thmpred time: 0.000017
    mc time: 0.391243
    inst time: 0.0
Proof status: Time Out
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.228338

EVERY2_APPEND_suff
proof length: 1
proof time: 0.05613
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.11612
  inferstep time: 0.096177
  node_find time: 0.000447
  node_crea time: 0.012384
    pred time: 0.003379
    thmpred time: 0.0
    mc time: 0.006399
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "EVERY2_APPEND" , DB.fetch "rich_list" "LIST_REL_APPEND_IMP" , listTheory.FILTER_EQ_APPEND , listTheory.LIST_REL_trans , listTheory.APPEND_11 , listTheory.APPEND_ASSOC , DB.fetch "rich_list" "APPEND_ASSOC_CONS" , listTheory.LIST_REL_EL_EQN , listTheory.LIST_REL_EVERY_ZIP , listTheory.EVERY2_REVERSE , listTheory.EVERY2_LUPDATE_same , listTheory.EVERY2_MEM_MONO , listTheory.EVERY2_cong , listTheory.EVERY2_EVERY , listTheory.EVERY2_LENGTH , listTheory.EVERY2_mono])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.037357

EVERY2_DROP
proof length: 3
proof time: 0.01772
Statistics
  infstep : 159
  nodes   : 34
  maxdepth: 4
Time: 3.512873
  inferstep time: 2.711338
  node_find time: 0.070407
  node_crea time: 0.438522
    pred time: 0.132287
    thmpred time: 0.000007
    mc time: 0.146939
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC []) [(DB.fetch "list" "EVERY2_EVERY"), (DB.fetch "list" "EVERY_MEM"), pairTheory.FORALL_PROD] THEN simpLib.REV_FULL_SIMP_TAC (BasicProvers.srw_ss ()) [(DB.fetch "list" "MEM_ZIP"), boolLib.GSYM boolLib.LEFT_FORALL_IMP_THM, (DB.fetch "list" "EL_REVERSE")] THEN
  BasicProvers.SRW_TAC [numSimps.ARITH_ss] [DB.fetch "rich_list" "EL_DROP", DB.fetch "rich_list" "DROP_CONS_EL", DB.fetch "rich_list" "DROP_EL_CONS", listTheory.MEM_DROP, listTheory.splitAtPki_EQN, DB.fetch "rich_list" "DROP_APPEND1", DB.fetch "rich_list" "DROP_APPEND", DB.fetch "rich_list" "DROP", listTheory.ALL_DISTINCT_DROP, listTheory.DROP_LENGTH_TOO_LONG, listTheory.ZIP_DROP, listTheory.last_drop, DB.fetch "rich_list" "ALL_DISTINCT_DROP", DB.fetch "rich_list" "APPEND_BUTLASTN_DROP", DB.fetch "rich_list" "BUTLASTN_REVERSE", DB.fetch "rich_list" "DROP_DROP"]
Org tac number: 12
Original proof time: 0.0
Replaying proof: 0.44451

EVERY2_TAKE
proof length: 3
proof time: 0.014495
Statistics
  infstep : 151
  nodes   : 41
  maxdepth: 4
Time: 4.841701
  inferstep time: 3.941935
  node_find time: 0.076992
  node_crea time: 0.492233
    pred time: 0.146404
    thmpred time: 0.000017
    mc time: 0.20622
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [boolSimps.CONJ_ss] [(DB.fetch "list" "LIST_REL_EL_EQN"), (DB.fetch "list" "EL_MAP"), (DB.fetch "list" "LENGTH_MAP")] THENL [BasicProvers.SRW_TAC [numSimps.ARITH_ss] [listTheory.LENGTH_TAKE_EQ, listTheory.LENGTH_TAKE, DB.fetch "rich_list" "LIST_REL_APPEND_IMP", listTheory.LUPDATE_LENGTH, listTheory.EVERY2_THM, listTheory.LIST_LIFT2_def, listTheory.MAP_APPEND_MAP_EQ, listTheory.LENGTH_LUPDATE, listTheory.EL_LUPDATE, listTheory.LUPDATE_SNOC, listTheory.TAKE_cons, listTheory.TAKE_def, DB.fetch "rich_list" "LASTN_def", listTheory.TAKE_LENGTH_TOO_LONG, listTheory.LLEX_EL_THM, listTheory.TAKE_APPEND1], simpLib.FULL_SIMP_TAC (boolSimps.bool_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.ARITH_ss hhs_infixl0_open simpLib.++ hhs_infixl0_close numSimps.REDUCE_ss) [DB.fetch "rich_list" "EL_TAKE", DB.fetch "rich_list" "LIST_REL_APPEND_IMP", listTheory.LUPDATE_LENGTH, listTheory.EVERY2_THM, listTheory.LIST_LIFT2_def, listTheory.MAP_APPEND_MAP_EQ, listTheory.EL_LUPDATE, listTheory.LENGTH_LUPDATE, listTheory.LUPDATE_SNOC, listTheory.LENGTH_TAKE_EQ, listTheory.LLEX_EL_THM, DB.fetch "rich_list" "SNOC_EL_TAKE", DB.fetch "rich_list" "TAKE_EL_SNOC", listTheory.splitAtPki_EQN, listTheory.TAKE_cons, listTheory.TAKE_def]]
Org tac number: 12
Original proof time: 0.0
Replaying proof: 0.536326

LIST_REL_APPEND_SING
Statistics
  infstep : 513
  nodes   : 92
  maxdepth: 5
Time: 10.01084
  inferstep time: 7.399229
  node_find time: 0.251277
  node_crea time: 1.482872
    pred time: 0.397516
    thmpred time: 0.000013
    mc time: 0.469907
    inst time: 0.0
Proof status: Time Out
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.119217

LIST_REL_GENLIST
proof length: 1
proof time: 0.002371
Statistics
  infstep : 87
  nodes   : 5
  maxdepth: 2
Time: 0.833106
  inferstep time: 0.603561
  node_find time: 0.03747
  node_crea time: 0.060563
    pred time: 0.020008
    thmpred time: 0.000001
    mc time: 0.01864
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ boolSimps.CONJ_ss ] [ ( DB.fetch "list" "LIST_REL_EL_EQN" ) , ( DB.fetch "list" "EL_MAP" ) , ( DB.fetch "list" "LENGTH_MAP" ) ])
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.152001

ALL_DISTINCT_MEM_ZIP_MAP
proof length: 6
proof time: 0.087305
Statistics
  infstep : 230
  nodes   : 36
  maxdepth: 4
Time: 4.561807
  inferstep time: 3.534642
  node_find time: 0.109221
  node_crea time: 0.496527
    pred time: 0.131973
    thmpred time: 0.000011
    mc time: 0.194043
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC []) [(DB.fetch "list" "ZIP_MAP"), (DB.fetch "list" "EVERY_MEM"), (DB.fetch "list" "MEM_MAP")] THEN boolLib.EQ_TAC THENL
  [BasicProvers.SRW_TAC [] [pred_setTheory.CROSS_DEF, listTheory.MEM_ZIP_MEM_MAP, pred_setTheory.IN_CROSS, pred_setTheory.CROSS_applied, listTheory.SNOC, listTheory.LIST_TO_SET_FILTER, listTheory.ZIP_MAP, pairTheory.PAIR_MAP, pairTheory.ELIM_PEXISTS, pairTheory.ELIM_UNCURRY, pairTheory.UNCURRY_VAR, pairTheory.UNCURRY, pairTheory.pair_CASE_def, pairTheory.tactictoe_thm_1, pairTheory.ELIM_PFORALL, pairTheory.PROD_ALL_def] THENL
  [metisTools.METIS_TAC [listTheory.SNOC, listTheory.LIST_TO_SET_FILTER, listTheory.mem_exists_set, pred_setTheory.CROSS_DEF, listTheory.MAP_ZIP, arithmeticTheory.DIVMOD_DEF, listTheory.ZIP_MAP, listTheory.every_zip_fst, pairTheory.FST, arithmeticTheory.DIVMOD_CALC, numeralTheory.DIVMOD_NUMERAL_CALC, listTheory.MEM_ZIP_MEM_MAP, pairTheory.PAIR_FUN_THM, pairTheory.PAIR_MAP, DB.fetch "rich_list" "SPLITP", listTheory.UNZIP],
  BasicProvers.SRW_TAC [] [DB.fetch "pred_set" "INTER_DEF", DB.fetch "pred_set" "IN_INTER", DB.fetch "pred_set" "INTER_applied", DB.fetch "pred_set" "UNION_DEF", DB.fetch "pred_set" "tactictoe_thm_0", DB.fetch "pred_set" "GSPECIFICATION", DB.fetch "pred_set" "EXTENSION", DB.fetch "pred_set" "IN_UNION", DB.fetch "pred_set" "SUBSET_DEF", DB.fetch "pred_set" "NOT_EQUAL_SETS", DB.fetch "pred_set" "UNION_applied", DB.fetch "pred_set" "SET_MINIMUM", relationTheory.RRESTRICT_DEF, relationTheory.IN_RDOM_RRESTRICT, DB.fetch "pred_set" "NUM_SET_WOP", DB.fetch "pred_set" "EQ_UNIV"]],
  BasicProvers.PROVE_TAC [(DB.fetch "pair" "PAIR_EQ"), (DB.fetch "pair" "PAIR")]]
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.262942

REVERSE_ZIP
Statistics
  infstep : 341
  nodes   : 109
  maxdepth: 6
Time: 10.00771
  inferstep time: 7.542658
  node_find time: 0.168854
  node_crea time: 1.617684
    pred time: 0.432407
    thmpred time: 0.000033
    mc time: 0.695037
    inst time: 0.0
Proof status: Time Out
Org tac number: 5
Original proof time: 0.0
Replaying proof: 0.127016

EVERY2_REVERSE1
Statistics
  infstep : 480
  nodes   : 104
  maxdepth: 5
Time: 10.030444
  inferstep time: 7.551179
  node_find time: 0.233358
  node_crea time: 1.434793
    pred time: 0.387726
    thmpred time: 0.000024
    mc time: 0.498257
    inst time: 0.0
Proof status: Time Out
Org tac number: 6
Original proof time: 0.0
Replaying proof: 0.162639

every_count_list
proof length: 1
proof time: 0.082833
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.147944
  inferstep time: 0.119683
  node_find time: 0.000551
  node_crea time: 0.014327
    pred time: 0.003384
    thmpred time: 0.0
    mc time: 0.00892
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "EL_COUNT_LIST" , DB.fetch "rich_list" "MEM_COUNT_LIST" , DB.fetch "rich_list" "COUNT_LIST_ADD" , DB.fetch "rich_list" "COUNT_LIST_GENLIST" , DB.fetch "rich_list" "LENGTH_COUNT_LIST" , DB.fetch "rich_list" "COUNT_LIST_def" , DB.fetch "rich_list" "COUNT_LIST_SNOC" , DB.fetch "rich_list" "COUNT_LIST_COUNT" , listTheory.EVERY_GENLIST , listTheory.EVERY_EL , DB.fetch "rich_list" "EVERY_BUTLASTN" , DB.fetch "rich_list" "EVERY_DROP" , DB.fetch "rich_list" "EVERY_SEG" , DB.fetch "rich_list" "EVERY_LASTN" , DB.fetch "rich_list" "EVERY_TAKE" , listTheory.IMP_EVERY_LUPDATE])
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.286503

count_list_sub1
proof length: 3
proof time: 0.10663
Statistics
  infstep : 27
  nodes   : 12
  maxdepth: 4
Time: 1.012568
  inferstep time: 0.692211
  node_find time: 0.013352
  node_crea time: 0.180806
    pred time: 0.035026
    thmpred time: 0.000002
    mc time: 0.156408
    inst time: 0.0
Proof found: BasicProvers.Induct THENL [metisTools.METIS_TAC [DB.fetch "rich_list" "COUNT_LIST_def", DB.fetch "rich_list" "COUNT_LIST_SNOC", numeralTheory.numeral_distrib, arithmeticTheory.SUB, arithmeticTheory.SUB_0, DB.fetch "rich_list" "COUNT_LIST_ADD", DB.fetch "rich_list" "EL_COUNT_LIST", DB.fetch "rich_list" "every_count_list", DB.fetch "rich_list" "COUNT_LIST_GENLIST", DB.fetch "rich_list" "COUNT_LIST_COUNT", DB.fetch "rich_list" "LENGTH_COUNT_LIST", DB.fetch "rich_list" "MEM_COUNT_LIST", listTheory.DROP_cons, listTheory.TAKE_cons, listTheory.DROP_def, listTheory.TAKE_def], metisTools.METIS_TAC [DB.fetch "rich_list" "COUNT_LIST_def", arithmeticTheory.SUC_SUB1, DB.fetch "rich_list" "COUNT_LIST_SNOC", DB.fetch "rich_list" "COUNT_LIST_ADD", arithmeticTheory.SUC_SUB, DB.fetch "rich_list" "EL_COUNT_LIST", DB.fetch "rich_list" "every_count_list", DB.fetch "rich_list" "COUNT_LIST_GENLIST", DB.fetch "rich_list" "COUNT_LIST_COUNT", DB.fetch "rich_list" "LENGTH_COUNT_LIST", DB.fetch "rich_list" "MEM_COUNT_LIST", arithmeticTheory.SUB_LEFT_SUC, arithmeticTheory.SUB, numeralTheory.tactictoe_thm_14, numeralTheory.tactictoe_thm_17, numeralTheory.tactictoe_thm_20]]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.114998
Replaying proof: 0.005941

ZIP_COUNT_LIST
proof length: 1
proof time: 0.045368
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.086059
  inferstep time: 0.064066
  node_find time: 0.000816
  node_crea time: 0.01321
    pred time: 0.00333
    thmpred time: 0.0
    mc time: 0.007686
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [listTheory.ZIP_GENLIST , listTheory.EL_ZIP , listTheory.MEM_ZIP , DB.fetch "rich_list" "COUNT_LIST_GENLIST" , DB.fetch "rich_list" "EL_COUNT_LIST" , DB.fetch "rich_list" "el_map_count" , DB.fetch "rich_list" "LENGTH_COUNT_LIST" , DB.fetch "rich_list" "count_list_sub1" , DB.fetch "rich_list" "every_count_list" , DB.fetch "rich_list" "COUNT_LIST_def" , DB.fetch "rich_list" "COUNT_LIST_ADD" , DB.fetch "rich_list" "COUNT_LIST_SNOC" , DB.fetch "rich_list" "COUNT_LIST_COUNT" , DB.fetch "rich_list" "MEM_COUNT_LIST" , listTheory.GENLIST_EL , listTheory.GENLIST_EL_MAP])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.015901

map_replicate
proof length: 4
proof time: 0.051806
Statistics
  infstep : 9
  nodes   : 6
  maxdepth: 3
Time: 0.691242
  inferstep time: 0.554431
  node_find time: 0.004506
  node_crea time: 0.090109
    pred time: 0.01831
    thmpred time: 0.000002
    mc time: 0.033239
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 104215*)n"] THENL [BasicProvers.SRW_TAC [] [], BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "REPLICATE", DB.fetch "rich_list" "EVERY_REPLICATE", DB.fetch "rich_list" "LENGTH_REPLICATE", DB.fetch "rich_list" "REPLICATE_GENLIST", DB.fetch "rich_list" "REPLICATE_compute", DB.fetch "rich_list" "MEM_REPLICATE", DB.fetch "rich_list" "EL_REPLICATE", listTheory.LUPDATE_MAP, DB.fetch "rich_list" "el_map_count", listTheory.SUM_MAP_PLUS, listTheory.SUM_MAP_PLUS_ZIP, listTheory.SUM_MAP_MEM_bound, listTheory.ALL_DISTINCT_MAP_INJ, listTheory.MEM_MAP, listTheory.EVERY_MAP, listTheory.EXISTS_LIST_EQ_MAP] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "REPLICATE_GENLIST", combinTheory.K_o_THM, combinTheory.K_THM, listTheory.GENLIST_EL_MAP, listTheory.MAP_GENLIST, listTheory.EL_GENLIST, listTheory.GENLIST_FUN_EQ, listTheory.ZIP_GENLIST, listTheory.MEM_GENLIST, listTheory.GENLIST, listTheory.ALL_DISTINCT_GENLIST, listTheory.EVERY_GENLIST, listTheory.EXISTS_GENLIST, listTheory.GENLIST_EL, listTheory.exists_list_GENLIST, DB.fetch "rich_list" "LIST_REL_GENLIST"]]
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.048111

REPLICATE_NIL
proof length: 1
proof time: 0.085373
Statistics
  infstep : 1
  nodes   : 2
  maxdepth: 1
Time: 0.127411
  inferstep time: 0.109663
  node_find time: 0.000479
  node_crea time: 0.011169
    pred time: 0.003461
    thmpred time: 0.0
    mc time: 0.003843
    inst time: 0.0
Proof found: (metisTools.METIS_TAC [DB.fetch "rich_list" "REPLICATE" , DB.fetch "rich_list" "MEM_REPLICATE" , DB.fetch "rich_list" "EL_REPLICATE" , DB.fetch "rich_list" "EVERY_REPLICATE" , DB.fetch "rich_list" "LENGTH_REPLICATE" , DB.fetch "rich_list" "REPLICATE_GENLIST" , DB.fetch "rich_list" "map_replicate" , DB.fetch "rich_list" "REPLICATE_compute" , listTheory.DROP_def , listTheory.LUPDATE_compute , listTheory.LUPDATE_def , listTheory.NOT_NIL_EQ_LENGTH_NOT_0 , listTheory.TAKE_def , DB.fetch "rich_list" "LASTN" , DB.fetch "rich_list" "TAKE" , DB.fetch "rich_list" "SEG"])
Org tac number: 2
Original proof time: 0.0
Replaying proof: 0.042515

REPLICATE_APPEND
proof length: 5
proof time: 0.083912
Statistics
  infstep : 57
  nodes   : 13
  maxdepth: 4
Time: 1.473765
  inferstep time: 1.128764
  node_find time: 0.027168
  node_crea time: 0.173795
    pred time: 0.052919
    thmpred time: 0.000001
    mc time: 0.09901
    inst time: 0.0
Proof found: BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 104215*)n"] THENL [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "REPLICATE", DB.fetch "rich_list" "REPLICATE_compute", arithmeticTheory.ADD_CLAUSES, numeralTheory.numeral_distrib, arithmeticTheory.ADD, DB.fetch "rich_list" "REPLICATE_NIL", DB.fetch "rich_list" "MEM_REPLICATE", DB.fetch "rich_list" "EVERY_REPLICATE", DB.fetch "rich_list" "LENGTH_REPLICATE", DB.fetch "rich_list" "REPLICATE_GENLIST", DB.fetch "rich_list" "map_replicate", DB.fetch "rich_list" "EL_REPLICATE", listTheory.GENLIST_APPEND, listTheory.GENLIST_PLUS_APPEND, DB.fetch "rich_list" "ZIP_APPEND", listTheory.FOLDR_CONS], BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "REPLICATE", DB.fetch "rich_list" "EVERY_REPLICATE", DB.fetch "rich_list" "LENGTH_REPLICATE", DB.fetch "rich_list" "REPLICATE_GENLIST", DB.fetch "rich_list" "map_replicate", DB.fetch "rich_list" "MEM_REPLICATE", DB.fetch "rich_list" "EL_REPLICATE", DB.fetch "rich_list" "REPLICATE_NIL", pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, arithmeticTheory.tactictoe_thm_52, arithmeticTheory.tactictoe_thm_11, arithmeticTheory.ADD_CLAUSES, arithmeticTheory.ADD, DB.fetch "rich_list" "tactictoe_thm_7", DB.fetch "rich_list" "tactictoe_thm_13"] THEN
  boolLib.ONCE_REWRITE_TAC [(DB.fetch "list" "GENLIST_CONS")] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "REPLICATE_GENLIST", combinTheory.K_o_THM, pred_setTheory.tactictoe_thm_37, pred_setTheory.tactictoe_thm_41, combinTheory.K_THM, arithmeticTheory.tactictoe_thm_52, arithmeticTheory.tactictoe_thm_11, listTheory.GENLIST_CONS, listTheory.GENLIST_APPEND, listTheory.GENLIST_PLUS_APPEND, listTheory.DISJOINT_GENLIST_PLUS, listTheory.GENLIST, listTheory.GENLIST_NUMERALS, arithmeticTheory.DIVMOD_DEF, listTheory.LENGTH_EQ_NUM, listTheory.LENGTH_EQ_NUM_compute]]
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.111333

DROP_REPLICATE
Statistics
  infstep : 434
  nodes   : 99
  maxdepth: 5
Time: 10.001562
  inferstep time: 7.694402
  node_find time: 0.223383
  node_crea time: 1.319395
    pred time: 0.386563
    thmpred time: 0.000025
    mc time: 0.441117
    inst time: 0.0
Proof status: Time Out
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.015303

LIST_REL_REPLICATE_same
proof length: 3
proof time: 0.144243
Statistics
  infstep : 13
  nodes   : 5
  maxdepth: 3
Time: 0.522003
  inferstep time: 0.41833
  node_find time: 0.006402
  node_crea time: 0.059114
    pred time: 0.026678
    thmpred time: 0.000001
    mc time: 0.022135
    inst time: 0.0
Proof found: boolLib.PURE_ONCE_REWRITE_TAC [arithmeticTheory.SUB_LEFT_GREATER, arithmeticTheory.EXISTS_GREATEST, arithmeticTheory.GREATER_DEF, arithmeticTheory.GREATER_OR_EQ, arithmeticTheory.NOT_GREATER, arithmeticTheory.SUB_RIGHT_GREATER, DB.fetch "rich_list" "REPLICATE_NIL", DB.fetch "rich_list" "MEM_REPLICATE", DB.fetch "rich_list" "REPLICATE", DB.fetch "rich_list" "map_replicate", DB.fetch "rich_list" "EVERY_REPLICATE", DB.fetch "rich_list" "LENGTH_REPLICATE", DB.fetch "rich_list" "REPLICATE_GENLIST", DB.fetch "rich_list" "DROP_REPLICATE", DB.fetch "rich_list" "REPLICATE_APPEND", DB.fetch "rich_list" "EL_REPLICATE"] THEN BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "REPLICATE_GENLIST", combinTheory.K_THM, combinTheory.K_o_THM, DB.fetch "rich_list" "LIST_REL_GENLIST", listTheory.EVERY2_cong, listTheory.EVERY2_mono, listTheory.LIST_REL_mono, listTheory.EVERY2_sym, listTheory.EVERY2_trans, listTheory.EVERY2_THM, listTheory.EVERY2_LUPDATE_same, listTheory.EVERY2_refl, listTheory.LIST_REL_ind, listTheory.LIST_REL_rules, listTheory.LIST_REL_strongind, listTheory.tactictoe_thm_3] THEN
  metisTools.METIS_TAC [listTheory.splitAtPki_APPEND, DB.fetch "rich_list" "LIST_REL_GENLIST", ind_typeTheory.CONSTR_REC, arithmeticTheory.DA, arithmeticTheory.SUB_RIGHT_LESS, arithmeticTheory.tactictoe_thm_12, DB.fetch "rich_list" "MEM_REPLICATE", numeralTheory.numeral_distrib, arithmeticTheory.LESS_0_CASES, arithmeticTheory.WOP, arithmeticTheory.transitive_monotone, arithmeticTheory.COMPLETE_INDUCTION, arithmeticTheory.GREATER_DEF, arithmeticTheory.LESS_OR_EQ, arithmeticTheory.NOT_LESS, arithmeticTheory.LESS_EQ]
Org tac number: 7
Original proof time: 0.0
Replaying proof: 0.249958

take_drop_partition
Statistics
  infstep : 306
  nodes   : 97
  maxdepth: 5
Time: 10.014823
  inferstep time: 7.509394
  node_find time: 0.157201
  node_crea time: 1.609681
    pred time: 0.450098
    thmpred time: 0.000029
    mc time: 0.651607
    inst time: 0.0
Proof status: Time Out
Org tac number: 8
Original proof time: 0.0
Replaying proof: 0.244555

all_distinct_count_list
proof length: 1
proof time: 0.001867
Statistics
  infstep : 17
  nodes   : 8
  maxdepth: 3
Time: 0.699399
  inferstep time: 0.546449
  node_find time: 0.009389
  node_crea time: 0.082812
    pred time: 0.02827
    thmpred time: 0.000001
    mc time: 0.038624
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ ] [ DB.fetch "rich_list" "COUNT_LIST_ADD" , DB.fetch "rich_list" "COUNT_LIST_def" , DB.fetch "rich_list" "COUNT_LIST_SNOC" , DB.fetch "rich_list" "COUNT_LIST_COUNT" , DB.fetch "rich_list" "COUNT_LIST_GENLIST" , DB.fetch "rich_list" "EL_COUNT_LIST" , DB.fetch "rich_list" "LENGTH_COUNT_LIST" , DB.fetch "rich_list" "MEM_COUNT_LIST" , DB.fetch "rich_list" "count_list_sub1" , DB.fetch "rich_list" "el_map_count" , DB.fetch "rich_list" "every_count_list" , DB.fetch "rich_list" "ZIP_COUNT_LIST" , listTheory.ALL_DISTINCT_DROP , listTheory.ALL_DISTINCT_GENLIST , DB.fetch "rich_list" "ALL_DISTINCT_DROP" , listTheory.ALL_DISTINCT_CARD_LIST_TO_SET ])
Org tac number: 4
Original proof time: 0.0
Replaying proof: 0.088299

list_rel_lastn
proof length: 4
proof time: 0.004435
Statistics
  infstep : 359
  nodes   : 71
  maxdepth: 4
Time: 7.456217
  inferstep time: 5.272272
  node_find time: 0.183914
  node_crea time: 1.25698
    pred time: 0.336995
    thmpred time: 0.000015
    mc time: 0.465528
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [boolLib.EQ_IMP_THM] THEN (simpLib.FULL_SIMP_TAC (BasicProvers.srw_ss ())) [boolLib.GSYM arithmeticTheory.NOT_LESS] THEN
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LASTN_APPEND2", DB.fetch "rich_list" "LASTN_MAP", DB.fetch "rich_list" "LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "APPEND_BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_LASTN_NIL", DB.fetch "rich_list" "LENGTH_LASTN", DB.fetch "rich_list" "LASTN_CONS", DB.fetch "rich_list" "LASTN_DROP", DB.fetch "rich_list" "LASTN_LASTN", DB.fetch "rich_list" "LASTN_SEG", DB.fetch "rich_list" "LAST_LASTN_LAST", DB.fetch "rich_list" "TAKE_REVERSE", DB.fetch "rich_list" "APPEND_TAKE_LASTN", DB.fetch "rich_list" "LASTN_def", DB.fetch "rich_list" "EVERY_LASTN"] THEN
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "LASTN_def", DB.fetch "rich_list" "TAKE_REVERSE", DB.fetch "rich_list" "EVERY2_TAKE", listTheory.EVERY2_REVERSE, DB.fetch "rich_list" "EVERY2_REVERSE1", DB.fetch "rich_list" "LASTN_REVERSE", listTheory.EVERY2_EVERY, listTheory.EVERY2_MAP, listTheory.LIST_REL_MAP1, listTheory.LIST_REL_EL_EQN, listTheory.LIST_REL_trans, listTheory.EVERY2_LUPDATE_same, DB.fetch "rich_list" "EVERY2_DROP", listTheory.LIST_REL_EVERY_ZIP, DB.fetch "rich_list" "EVERY2_APPEND", listTheory.EVERY2_LENGTH]
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.370216

list_rel_butlastn
Statistics
  infstep : 315
  nodes   : 86
  maxdepth: 5
Time: 10.08398
  inferstep time: 7.793575
  node_find time: 0.162494
  node_crea time: 1.516728
    pred time: 0.396754
    thmpred time: 0.00003
    mc time: 0.520954
    inst time: 0.0
Proof status: Time Out
Org tac number: 9
Original proof time: 0.0
Replaying proof: 0.401285
Replaying proof: 0.001025

COUNT_LIST_compute
proof length: 4
proof time: 0.03667
Statistics
  infstep : 105
  nodes   : 33
  maxdepth: 4
Time: 2.441068
  inferstep time: 1.825732
  node_find time: 0.053358
  node_crea time: 0.326894
    pred time: 0.118302
    thmpred time: 0.000005
    mc time: 0.089482
    inst time: 0.0
Proof found: BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "COUNT_LIST_AUX_def", DB.fetch "rich_list" "tactictoe_thm_38", DB.fetch "rich_list" "COUNT_LIST_AUX_def_compute", DB.fetch "rich_list" "COUNT_LIST_SNOC", DB.fetch "rich_list" "COUNT_LIST_def", DB.fetch "rich_list" "COUNT_LIST_GENLIST", DB.fetch "rich_list" "COUNT_LIST_ADD", DB.fetch "rich_list" "COUNT_LIST_COUNT", DB.fetch "rich_list" "EL_COUNT_LIST", DB.fetch "rich_list" "LENGTH_COUNT_LIST", DB.fetch "rich_list" "MEM_COUNT_LIST", DB.fetch "rich_list" "count_list_sub1", DB.fetch "rich_list" "el_map_count", DB.fetch "rich_list" "every_count_list", DB.fetch "rich_list" "ZIP_COUNT_LIST", DB.fetch "rich_list" "all_distinct_count_list"] THEN BasicProvers.Induct_on [HolKernel.QUOTE " (*#loc 1 96581*)n"] THENL
  [metisTools.METIS_TAC [DB.fetch "rich_list" "COUNT_LIST_GENLIST", DB.fetch "rich_list" "COUNT_LIST_AUX_def", DB.fetch "rich_list" "COUNT_LIST_AUX_def_compute", DB.fetch "rich_list" "tactictoe_thm_38", listTheory.SET_TO_LIST_primitive_def, listTheory.MAP_ID, combinTheory.I_THM, combinTheory.I_o_ID, listTheory.GENLIST, listTheory.GENLIST_NUMERALS, listTheory.GENLIST_GENLIST_AUX, listTheory.GENLIST_CONS, listTheory.MAP_GENLIST, listTheory.EL_GENLIST, listTheory.LENGTH_GENLIST, DB.fetch "rich_list" "ZIP_COUNT_LIST"],
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "COUNT_LIST_AUX_def", DB.fetch "rich_list" "COUNT_LIST_GENLIST", DB.fetch "rich_list" "tactictoe_thm_38", DB.fetch "rich_list" "COUNT_LIST_AUX_def_compute", listTheory.SET_TO_LIST_primitive_def, listTheory.MAP_ID, combinTheory.I_THM, combinTheory.I_o_ID, listTheory.GENLIST, listTheory.GENLIST_CONS, listTheory.GENLIST_GENLIST_AUX, listTheory.GENLIST_NUMERALS, listTheory.MAP_GENLIST, listTheory.EL_GENLIST, listTheory.LENGTH_GENLIST, DB.fetch "rich_list" "ZIP_COUNT_LIST"]]
Org tac number: 3
Original proof time: 0.0
Replaying proof: 0.064621
Replaying proof: 0.007268
Replaying proof: 0.003573
Replaying proof: 0.011244

BUTLASTN_compute
proof length: 6
proof time: 0.138429
Statistics
  infstep : 32
  nodes   : 16
  maxdepth: 4
Time: 1.545204
  inferstep time: 1.208208
  node_find time: 0.017358
  node_crea time: 0.186549
    pred time: 0.049894
    thmpred time: 0.000003
    mc time: 0.109792
    inst time: 0.0
Proof found: boolLib.REWRITE_TAC [DB.fetch "rich_list" "take_drop_partition", combinTheory.FAIL_DEF, combinTheory.FAIL_THM, arithmeticTheory.SUB_LEFT_ADD, arithmeticTheory.SUB_LEFT_SUB, arithmeticTheory.SUB_LEFT_SUC, arithmeticTheory.SUB_RIGHT_ADD, numeralTheory.tactictoe_thm_35, numeralTheory.tactictoe_thm_39, DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_TAKE", DB.fetch "rich_list" "BUTLASTN_SEG", DB.fetch "rich_list" "LENGTH_BUTLASTN", DB.fetch "rich_list" "EVERY_BUTLASTN", DB.fetch "rich_list" "EXISTS_BUTLASTN", DB.fetch "rich_list" "MEM_BUTLASTN"] THEN let
  fun INDUCT_TAC g = Prim_rec.INDUCT_THEN numTheory.INDUCTION boolLib.ASSUME_TAC g
in
  boolLib.REPEAT INDUCT_TAC THENL
  [BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "BUTLASTN", numeralTheory.numeral_distrib, arithmeticTheory.ZERO_LESS_EQ, arithmeticTheory.SUB_0, numeralTheory.divmod_POS, arithmeticTheory.findq_def, arithmeticTheory.DIVMOD_THM, arithmeticTheory.DIVMOD_DEF, arithmeticTheory.findq_thm, pred_setTheory.count_EQN, numeralTheory.enumeral_mult, numeralTheory.exactlog_def, DB.fetch "rich_list" "SPLITR_def", listTheory.UNZIP_THM, combinTheory.LET_FORALL_ELIM, pairTheory.LET2_RAND] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "take_drop_partition", DB.fetch "rich_list" "TAKE_TAKE", DB.fetch "rich_list" "APPEND_TAKE_LASTN", listTheory.TAKE_LENGTH_ID_rwt, listTheory.TAKE_SUM, DB.fetch "rich_list" "EVERY_TAKE", DB.fetch "rich_list" "EXISTS_TAKE", DB.fetch "rich_list" "MEM_TAKE", DB.fetch "rich_list" "EXISTS_TAKE_IMP", DB.fetch "rich_list" "MEM_TAKE_IMP", DB.fetch "rich_list" "TAKE", DB.fetch "rich_list" "TAKE_SNOC", DB.fetch "rich_list" "TAKE_BUTLASTN", listTheory.LENGTH_TAKE, listTheory.TAKE_LENGTH_TOO_LONG, DB.fetch "rich_list" "TAKE_SEG"],
  BasicProvers.SRW_TAC [] [DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", numeralTheory.tactictoe_thm_27, DB.fetch "rich_list" "BUTLASTN", arithmeticTheory.NOT_LEQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_SUC_LESS_EQ, arithmeticTheory.OR_LESS, numeralTheory.divmod_POS, arithmeticTheory.findq_def, arithmeticTheory.DIVMOD_THM, arithmeticTheory.DIVMOD_DEF, arithmeticTheory.findq_thm, numeralTheory.enumeral_mult, numeralTheory.exactlog_def, pred_setTheory.count_EQN] THEN
  metisTools.METIS_TAC [DB.fetch "rich_list" "BUTLASTN_SUC_FRONT", numeralTheory.tactictoe_thm_27, DB.fetch "rich_list" "BUTLASTN", arithmeticTheory.NOT_LEQ, arithmeticTheory.NOT_NUM_EQ, arithmeticTheory.LESS_EQ, arithmeticTheory.NOT_SUC_LESS_EQ, arithmeticTheory.OR_LESS, arithmeticTheory.LESS_EQ_MONO, arithmeticTheory.NOT_SUC_LESS_EQ_0, DB.fetch "rich_list" "BUTLASTN_TAKE", DB.fetch "rich_list" "TAKE_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_LASTN", DB.fetch "rich_list" "BUTLASTN_APPEND1", DB.fetch "rich_list" "SEG_LASTN_BUTLASTN", DB.fetch "rich_list" "BUTLASTN_SEG"]]
end
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.009705

LASTN_compute
proof length: 1
proof time: 0.004008
Statistics
  infstep : 2
  nodes   : 2
  maxdepth: 1
Time: 0.163547
  inferstep time: 0.133524
  node_find time: 0.001471
  node_crea time: 0.016441
    pred time: 0.003919
    thmpred time: 0.0
    mc time: 0.010707
    inst time: 0.0
Proof found: (BasicProvers.SRW_TAC [ boolSimps.LET_ss ] [ DB.fetch "rich_list" "BUTLASTN_compute" , combinTheory.FAIL_THM , combinTheory.FAIL_DEF , arithmeticTheory.SUB_LEFT_ADD , arithmeticTheory.SUB_LEFT_SUB , arithmeticTheory.SUB_LEFT_SUC , arithmeticTheory.SUB_RIGHT_ADD , numeralTheory.tactictoe_thm_35 , numeralTheory.tactictoe_thm_39 , DB.fetch "rich_list" "BUTLASTN_LASTN" , DB.fetch "rich_list" "LASTN_DROP" , DB.fetch "rich_list" "LASTN_LASTN" , DB.fetch "rich_list" "LASTN_SEG" , DB.fetch "rich_list" "EVERY_LASTN" , DB.fetch "rich_list" "EXISTS_LASTN" , DB.fetch "rich_list" "MEM_LASTN" ])
Org tac number: 1
Original proof time: 0.0
Replaying proof: 0.011901
Bad stac: 2
